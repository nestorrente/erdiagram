// Generated by dts-bundle-generator v5.9.0

import { JsonAdapter, JsonValue } from 'true-json';

export interface ComponentConfigManager<C, P> {
	getDefaultConfig(): C;
	mergeConfigs(fullConfig: C, partialConfig: P): C;
	mergeWithDefaultConfig(partialConfig: P): C;
	convertToSerializableObject(fullConfig: C): JsonValue;
	convertFromSerializableObject(serializableConfig: JsonValue): C;
}
export declare abstract class AbstractComponentConfigManager<C, P = Partial<C>> implements ComponentConfigManager<C, P> {
	#private;
	constructor();
	abstract getDefaultConfig(): C;
	abstract mergeConfigs(fullConfig: C, partialConfig?: P): C;
	mergeWithDefaultConfig(partialConfig?: P): C;
	convertToSerializableObject(fullConfig: C): JsonValue;
	convertFromSerializableObject(serializableConfig: JsonValue): C;
	protected getJsonAdapter(): JsonAdapter<C>;
}
export interface EntityRelationshipModel {
	entities: EntityDescriptor[];
	relationships: RelationshipDescriptor[];
}
export interface EntityDescriptor {
	name: string;
	identityPropertyName?: string;
	properties: EntityPropertyDescriptor[];
}
export interface EntityPropertyDescriptor {
	name: string;
	optional: boolean;
	unique: boolean;
	type: EntityPropertyType;
	length: number[];
}
export declare enum EntityPropertyType {
	IDENTITY = "identity",
	BOOLEAN = "bool",
	SHORT = "short",
	INT = "int",
	LONG = "long",
	DECIMAL = "decimal",
	TEXT = "text",
	DATE = "date",
	TIME = "time",
	DATETIME = "datetime",
	BLOB = "blob"
}
export interface RelationshipDescriptor {
	leftMember: RelationshipMember;
	rightMember: RelationshipMember;
	direction: Direction;
	relationshipName?: string;
}
export interface RelationshipMember {
	entity: string;
	entityAlias: string;
	cardinality: Cardinality;
}
export declare enum Cardinality {
	MANY = "many",
	ONE = "one",
	ZERO_OR_ONE = "zero_or_one"
}
export declare enum Direction {
	LEFT_TO_RIGHT = "left_to_right",
	RIGHT_TO_LEFT = "right_to_left",
	BIDIRECTIONAL = "bidirectional"
}
export interface EntityRelationshipModelToCodeConverter {
	convertToCode(model: EntityRelationshipModel): string;
}
export interface CaseFormat {
	splitWords(text: string): string[];
	joinWords(words: string[]): string;
}
export declare class CaseConverter {
	private readonly sourceCaseFormat;
	private readonly targetCaseFormat;
	constructor(sourceCaseFormat: CaseFormat, targetCaseFormat: CaseFormat);
	convertCase(text: string): string;
}
export declare const StandardCaseFormats: {
	LOWER_CAMEL: CaseFormat;
	UPPER_CAMEL: CaseFormat;
	LOWER_UNDERSCORE: CaseFormat;
	CAPITALIZED_UNDERSCORE: CaseFormat;
	UPPER_UNDERSCORE: CaseFormat;
};
export declare type IdNamingStrategy = (entityName: string) => string;
export declare const StandardIdNamingStrategies: {
	DEFAULT: IdNamingStrategy;
	ENTITY_NAME_PREFIX: IdNamingStrategy;
};
declare enum SourceType {
	ENTITY = "entity",
	ENTITY_IDENTITY = "entity_identity",
	ENTITY_PROPERTY = "entity_property",
	RELATIONSHIP = "relationship",
	RELATIONSHIP_TARGET = "relationship_target"
}
export interface SourceMetadata<T extends SourceType = SourceType> {
	readonly sourceType: T;
}
export interface EntitySourceMetadata extends SourceMetadata<SourceType.ENTITY> {
	entity: EntityDescriptor;
}
export interface EntityIdentitySourceMetadata extends SourceMetadata<SourceType.ENTITY_IDENTITY> {
	entity: EntityDescriptor;
}
export interface EntityPropertySourceMetadata extends SourceMetadata<SourceType.ENTITY_PROPERTY> {
	entity: EntityDescriptor;
	property: EntityPropertyDescriptor;
}
export interface RelationshipSourceMetadata extends SourceMetadata<SourceType.RELATIONSHIP> {
	relationship: RelationshipDescriptor;
}
export interface RelationshipTargetSourceMetadata extends SourceMetadata<SourceType.RELATIONSHIP_TARGET> {
	relationship: RelationshipDescriptor;
	targetMember: RelationshipMember;
}
export interface DatabaseModel {
	tables: TableDescriptor[];
}
export interface TableDescriptor {
	name: string;
	identityColumnName: string;
	columns: TableColumnDescriptor[];
	references: TableReferenceDescriptor[];
	sourceMetadata: EntitySourceMetadata | RelationshipSourceMetadata;
}
export interface TableColumnDescriptor {
	name: string;
	notNull: boolean;
	unique: boolean;
	type: EntityPropertyType;
	length: number[];
	sourceMetadata: EntityPropertySourceMetadata;
}
export interface TableReferenceDescriptor {
	columnName: string;
	targetTableName: string;
	targetTableIdentityColumnName: string;
	notNull: boolean;
	unique: boolean;
	sourceMetadata: RelationshipTargetSourceMetadata;
}
export interface DatabaseModelToCodeConverter {
	convertToCode(databaseModel: DatabaseModel): string;
}
export interface DatabaseModelGeneratorConfig {
	usePluralTableNames: boolean;
	idNamingStrategy: IdNamingStrategy;
}
export declare type PartialDatabaseModelGeneratorConfig = Partial<DatabaseModelGeneratorConfig>;
export declare class DatabaseModelGenerator {
	private readonly config;
	constructor(config?: PartialDatabaseModelGeneratorConfig);
	generateDatabaseModel(model: EntityRelationshipModel): DatabaseModel;
	private generateEntityTables;
	private generateEntityTable;
	private generateRelationshipTables;
	private generateRelationshipTable;
	private getRelationshipTableName;
	private getRelationshipTableIdentityColumnName;
	private createTableReference;
	private pluralizeEntityNameIfApplies;
	private getIdentityColumnName;
	private mapPropertyToColumn;
	private isManyToManyRelationship;
}
export declare class EntityRelationshipModelToDatabaseCodeConverter implements EntityRelationshipModelToCodeConverter {
	private readonly databaseModelGenerator;
	private readonly databaseModelToCodeConverter;
	constructor(databaseModelGenerator: DatabaseModelGenerator, databaseModelToCodeConverter: DatabaseModelToCodeConverter);
	convertToCode(entityRelationshipModel: EntityRelationshipModel): string;
}
export interface IdColumnCode {
	createSequenceLine?: string;
	columnLine: string;
	pkConstraintLine?: string;
}
export interface RegularColumnCode {
	columnLine: string;
	uniqueConstraintLine?: string;
}
export interface ForeignKeyColumnCode extends RegularColumnCode {
	fkConstraintLine: string;
}
export interface SqlDialect {
	getScriptStartCode(): string;
	getScriptEndCode(): string;
	mustUseAlterTableForForeignKeys(): boolean;
	getCreateTableStartCode(tableName: string): string;
	getIdColumnCode(tableName: string, identityColumnName: string): IdColumnCode;
	getColumnCode(tableName: string, column: TableColumnDescriptor): RegularColumnCode;
	getForeignColumnCode(tableName: string, reference: TableReferenceDescriptor): ForeignKeyColumnCode;
	getCreateTableEndCode(): string;
	getAlterTableAddCode(tableName: string, constraintCode: string): string;
}
export declare class DatabaseModelToSqlCodeConverter implements DatabaseModelToCodeConverter {
	private readonly sqlDialect;
	constructor(sqlDialect: SqlDialect);
	convertToCode(databaseModel: DatabaseModel): string;
	private generateTableCode;
	private processColumns;
	private processReferences;
	private getCreateTableInnerLines;
	private getAlterTableLines;
}
export interface SqlDialectConfig {
	typeBindings: Record<EntityPropertyType, string>;
	tableNameCaseFormat: CaseFormat;
	columnNameCaseFormat: CaseFormat;
}
export declare type WithPartial<T, K extends keyof T> = Omit<T, K> & {
	[P in K]: Partial<T[K]>;
};
export interface MysqlDialectConfig extends SqlDialectConfig {
}
export declare type PartialMysqlDialectConfig = Partial<WithPartial<MysqlDialectConfig, "typeBindings">>;
export declare class MysqlDialect implements SqlDialect {
	private readonly tableNameCaseConverter;
	private readonly columnCodeGenerator;
	private readonly idColumnCodeGenerator;
	private readonly foreignColumnCodeGenerator;
	constructor(config?: Partial<MysqlDialectConfig>);
	getScriptStartCode(): string;
	getScriptEndCode(): string;
	mustUseAlterTableForForeignKeys(): boolean;
	getCreateTableStartCode(tableName: string): string;
	getCreateTableEndCode(): string;
	getIdColumnCode(tableName: string, identityColumnName: string): IdColumnCode;
	getColumnCode(tableName: string, column: TableColumnDescriptor): RegularColumnCode;
	getForeignColumnCode(tableName: string, reference: TableReferenceDescriptor): ForeignKeyColumnCode;
	getAlterTableAddCode(tableName: string, constraintCode: string): string;
}
export declare class MysqlDialectConfigManager extends AbstractComponentConfigManager<MysqlDialectConfig, PartialMysqlDialectConfig> {
	getDefaultConfig(): MysqlDialectConfig;
	mergeConfigs(fullConfig: MysqlDialectConfig, partialConfig?: PartialMysqlDialectConfig): MysqlDialectConfig;
	protected getJsonAdapter(): JsonAdapter<MysqlDialectConfig>;
}
export declare const mysqlDialectConfigManager: MysqlDialectConfigManager;
export interface OracleDialectConfig extends SqlDialectConfig {
}
export declare type PartialOracleDialectConfig = Partial<WithPartial<OracleDialectConfig, "typeBindings">>;
export declare class OracleDialect implements SqlDialect {
	private readonly tableNameCaseConverter;
	private readonly columnCodeGenerator;
	private readonly idColumnCodeGenerator;
	private readonly foreignColumnCodeGenerator;
	constructor(config?: Partial<OracleDialectConfig>);
	getScriptStartCode(): string;
	getScriptEndCode(): string;
	mustUseAlterTableForForeignKeys(): boolean;
	getCreateTableStartCode(tableName: string): string;
	getCreateTableEndCode(): string;
	getIdColumnCode(tableName: string, identityColumnName: string): IdColumnCode;
	getColumnCode(tableName: string, column: TableColumnDescriptor): RegularColumnCode;
	getForeignColumnCode(tableName: string, reference: TableReferenceDescriptor): ForeignKeyColumnCode;
	getAlterTableAddCode(tableName: string, constraintCode: string): string;
}
export declare class OracleDialectConfigManager extends AbstractComponentConfigManager<OracleDialectConfig, PartialOracleDialectConfig> {
	getDefaultConfig(): OracleDialectConfig;
	mergeConfigs(fullConfig: OracleDialectConfig, partialConfig?: PartialOracleDialectConfig): OracleDialectConfig;
	protected getJsonAdapter(): JsonAdapter<OracleDialectConfig>;
}
export declare const oracleDialectConfigManager: OracleDialectConfigManager;
export interface SqliteDialectConfig extends SqlDialectConfig {
}
export declare type PartialSqliteDialectConfig = Partial<WithPartial<SqliteDialectConfig, "typeBindings">>;
export declare class SqliteDialect implements SqlDialect {
	private readonly tableNameCaseConverter;
	private readonly columnCodeGenerator;
	private readonly idColumnCodeGenerator;
	private readonly foreignColumnCodeGenerator;
	constructor(config?: Partial<SqliteDialectConfig>);
	getScriptStartCode(): string;
	getScriptEndCode(): string;
	mustUseAlterTableForForeignKeys(): boolean;
	getCreateTableStartCode(tableName: string): string;
	getCreateTableEndCode(): string;
	getIdColumnCode(tableName: string, identityColumnName: string): IdColumnCode;
	getColumnCode(tableName: string, column: TableColumnDescriptor): RegularColumnCode;
	getForeignColumnCode(tableName: string, reference: TableReferenceDescriptor): ForeignKeyColumnCode;
	getAlterTableAddCode(tableName: string, constraintCode: string): string;
}
export declare class SqliteDialectConfigManager extends AbstractComponentConfigManager<SqliteDialectConfig, PartialSqliteDialectConfig> {
	getDefaultConfig(): SqliteDialectConfig;
	mergeConfigs(fullConfig: SqliteDialectConfig, partialConfig?: PartialSqliteDialectConfig): SqliteDialectConfig;
	protected getJsonAdapter(): JsonAdapter<SqliteDialectConfig>;
}
export declare const sqliteDialectConfigManager: SqliteDialectConfigManager;
export interface SqlServerDialectConfig extends SqlDialectConfig {
}
export declare type PartialSqlServerDialectConfig = Partial<WithPartial<SqlServerDialectConfig, "typeBindings">>;
export declare class SqlServerDialect implements SqlDialect {
	private readonly tableNameCaseConverter;
	private readonly columnCodeGenerator;
	private readonly idColumnCodeGenerator;
	private readonly foreignColumnCodeGenerator;
	constructor(config?: Partial<SqlServerDialectConfig>);
	getScriptStartCode(): string;
	getScriptEndCode(): string;
	mustUseAlterTableForForeignKeys(): boolean;
	getCreateTableStartCode(tableName: string): string;
	getCreateTableEndCode(): string;
	getIdColumnCode(tableName: string, identityColumnName: string): IdColumnCode;
	getColumnCode(tableName: string, column: TableColumnDescriptor): RegularColumnCode;
	getForeignColumnCode(tableName: string, reference: TableReferenceDescriptor): ForeignKeyColumnCode;
	getAlterTableAddCode(tableName: string, constraintCode: string): string;
}
export declare class SqlServerDialectConfigManager extends AbstractComponentConfigManager<SqlServerDialectConfig, PartialSqlServerDialectConfig> {
	getDefaultConfig(): SqlServerDialectConfig;
	mergeConfigs(fullConfig: SqlServerDialectConfig, partialConfig?: PartialSqlServerDialectConfig): SqlServerDialectConfig;
	protected getJsonAdapter(): JsonAdapter<SqlServerDialectConfig>;
}
export declare const sqlServerDialectConfigManager: SqlServerDialectConfigManager;
export interface PostgresqlDialectConfig extends SqlDialectConfig {
}
export declare type PartialPostgresqlDialectConfig = Partial<WithPartial<PostgresqlDialectConfig, "typeBindings">>;
export declare class PostgresqlDialect implements SqlDialect {
	private readonly tableNameCaseConverter;
	private readonly columnCodeGenerator;
	private readonly idColumnCodeGenerator;
	private readonly foreignColumnCodeGenerator;
	constructor(config?: Partial<PostgresqlDialectConfig>);
	getScriptStartCode(): string;
	getScriptEndCode(): string;
	mustUseAlterTableForForeignKeys(): boolean;
	getCreateTableStartCode(tableName: string): string;
	getCreateTableEndCode(): string;
	getIdColumnCode(tableName: string, identityColumnName: string): IdColumnCode;
	getColumnCode(tableName: string, column: TableColumnDescriptor): RegularColumnCode;
	getForeignColumnCode(tableName: string, reference: TableReferenceDescriptor): ForeignKeyColumnCode;
	getAlterTableAddCode(tableName: string, constraintCode: string): string;
}
export declare class PostgresqlDialectConfigManager extends AbstractComponentConfigManager<PostgresqlDialectConfig, PartialPostgresqlDialectConfig> {
	getDefaultConfig(): PostgresqlDialectConfig;
	mergeConfigs(fullConfig: PostgresqlDialectConfig, partialConfig?: PartialPostgresqlDialectConfig): PostgresqlDialectConfig;
	protected getJsonAdapter(): JsonAdapter<PostgresqlDialectConfig>;
}
export declare const postgresqlDialectConfigManager: PostgresqlDialectConfigManager;
export declare class DatabaseModelGeneratorConfigManager extends AbstractComponentConfigManager<DatabaseModelGeneratorConfig, PartialDatabaseModelGeneratorConfig> {
	getDefaultConfig(): DatabaseModelGeneratorConfig;
	mergeConfigs(fullConfig: DatabaseModelGeneratorConfig, partialConfig?: PartialDatabaseModelGeneratorConfig): DatabaseModelGeneratorConfig;
	protected getJsonAdapter(): JsonAdapter<DatabaseModelGeneratorConfig>;
}
export declare const databaseModelGeneratorConfigManager: DatabaseModelGeneratorConfigManager;
export interface ClassModelToCodeConverterConfig<T> {
	typeBindings: Record<EntityPropertyType, T>;
}
export interface ClassModel {
	classes: ClassDescriptor[];
}
export interface ClassDescriptor {
	name: string;
	fields: ClassFieldDescriptor[];
	sourceMetadata: EntitySourceMetadata;
}
export interface ClassFieldDescriptor {
	name: string;
	nullable: boolean;
	list: boolean;
	maxSize?: number;
	primitiveType?: EntityPropertyType;
	entityType?: string;
	sourceMetadata: EntityIdentitySourceMetadata | EntityPropertySourceMetadata | RelationshipTargetSourceMetadata;
}
export interface ClassModelToCodeConverter {
	convertToCode(classModel: ClassModel): string;
}
export interface ClassModelGeneratorConfig {
	idNamingStrategy: IdNamingStrategy;
}
export declare type PartialClassModelGeneratorConfig = Partial<ClassModelGeneratorConfig>;
export declare class ClassModelGenerator {
	private readonly config;
	private readonly entityToClassMapper;
	constructor(config?: PartialClassModelGeneratorConfig);
	generateClassModel(model: EntityRelationshipModel): ClassModel;
}
export declare class EntityRelationshipModelToClassCodeConverter implements EntityRelationshipModelToCodeConverter {
	private readonly classModelGenerator;
	private readonly classModelToCodeConverter;
	constructor(classModelGenerator: ClassModelGenerator, classModelToCodeConverter: ClassModelToCodeConverter);
	convertToCode(entityRelationshipModel: EntityRelationshipModel): string;
}
export interface JavaType {
	packageName?: string;
	name: string;
	canonicalName: string;
	formatSimple(): string;
	formatCanonical(): string;
}
export declare enum NotNullTextValidationStrategy {
	NOT_NULL = "not_null",
	NOT_EMPTY = "not_empty",
	NOT_BLANK = "not_blank"
}
export declare enum NotNullBlobValidationStrategy {
	NOT_NULL = "not_null",
	NOT_EMPTY = "not_empty"
}
export interface JavaClassModelToCodeConverterConfig extends ClassModelToCodeConverterConfig<JavaType> {
	generatedClassesPackage?: string;
	useValidationAnnotations: boolean;
	notNullTextValidationStrategy: NotNullTextValidationStrategy;
	notNullBlobValidationStrategy: NotNullBlobValidationStrategy;
}
export declare type PartialJavaClassModelToCodeConverterConfig = Partial<WithPartial<JavaClassModelToCodeConverterConfig, "typeBindings">>;
export declare class JavaClassModelToCodeConverter implements ClassModelToCodeConverter {
	private readonly config;
	private readonly typeResolver;
	private readonly validationAnnotationsGenerator;
	private readonly importStatementsGenerator;
	constructor(config?: PartialJavaClassModelToCodeConverterConfig);
	convertToCode(classModel: ClassModel): string;
	private generateClass;
	private createField;
	private addValidationAnnotationsToFieldIfApply;
	private addAnnotations;
}
export declare class JavaClassModelToCodeConverterConfigManager extends AbstractComponentConfigManager<JavaClassModelToCodeConverterConfig, PartialJavaClassModelToCodeConverterConfig> {
	getDefaultConfig(): JavaClassModelToCodeConverterConfig;
	mergeConfigs(fullConfig: JavaClassModelToCodeConverterConfig, partialConfig?: PartialJavaClassModelToCodeConverterConfig): JavaClassModelToCodeConverterConfig;
	protected getJsonAdapter(): JsonAdapter<JavaClassModelToCodeConverterConfig>;
}
export declare const javaClassModelToCodeConverterConfigManager: JavaClassModelToCodeConverterConfigManager;
export interface JavaParameterizedType extends JavaType {
	parameterTypes: JavaType[];
}
export function parseJavaType(text: string): JavaType;
export function createJavaSimpleType(name: string, packageName?: string): JavaType;
export function createJavaParameterizedType(name: string, packageName: string | undefined, parameterTypes: JavaType[]): JavaParameterizedType;
export function createJavaArrayType(parameterType: JavaType): JavaParameterizedType;
export function isJavaParameterizedType(javaType: JavaType): javaType is JavaParameterizedType;
export interface TypeScriptType {
	name: string;
	format(): string;
}
export interface TypeScriptClassModelToCodeConverterConfig extends ClassModelToCodeConverterConfig<TypeScriptType> {
}
export declare type PartialTypeScriptClassModelToCodeConverterConfig = Partial<WithPartial<TypeScriptClassModelToCodeConverterConfig, "typeBindings">>;
export declare class TypeScriptClassModelToCodeConverter implements ClassModelToCodeConverter {
	private readonly config;
	private readonly typeResolver;
	constructor(config?: PartialTypeScriptClassModelToCodeConverterConfig);
	convertToCode(classModel: ClassModel): string;
	private generateClass;
	private createField;
}
export declare class TypeScriptClassModelToCodeConverterConfigManager extends AbstractComponentConfigManager<TypeScriptClassModelToCodeConverterConfig, PartialTypeScriptClassModelToCodeConverterConfig> {
	getDefaultConfig(): TypeScriptClassModelToCodeConverterConfig;
	mergeConfigs(fullConfig: TypeScriptClassModelToCodeConverterConfig, partialConfig?: PartialTypeScriptClassModelToCodeConverterConfig): TypeScriptClassModelToCodeConverterConfig;
	protected getJsonAdapter(): JsonAdapter<TypeScriptClassModelToCodeConverterConfig>;
}
export declare const typescriptClassModelToCodeConverterConfigManager: TypeScriptClassModelToCodeConverterConfigManager;
export interface TypeScriptParameterizedType extends TypeScriptType {
	parameterTypes: TypeScriptType[];
}
export function parseTypeScriptType(text: string): TypeScriptType;
export function createTypeScriptParameterizedType(name: string, parameterTypes: TypeScriptType[]): TypeScriptParameterizedType;
export function createTypeScriptArrayType(parameterType: TypeScriptType): TypeScriptParameterizedType;
export function isTypeScriptParameterizedType(javaType: TypeScriptType): javaType is TypeScriptParameterizedType;
export function createTypeScriptSimpleType(name: string): TypeScriptType;
export declare class ClassModelGeneratorConfigManager extends AbstractComponentConfigManager<ClassModelGeneratorConfig, PartialClassModelGeneratorConfig> {
	getDefaultConfig(): ClassModelGeneratorConfig;
	mergeConfigs(fullConfig: ClassModelGeneratorConfig, partialConfig?: PartialClassModelGeneratorConfig): ClassModelGeneratorConfig;
	protected getJsonAdapter(): JsonAdapter<ClassModelGeneratorConfig>;
}
export declare const classModelGeneratorConfigManager: ClassModelGeneratorConfigManager;
export interface NomnomlEntityRelationshipModelToDiagramCodeConverterConfig {
	arrowSize?: number;
	bendSize?: number;
	direction?: "down" | "right";
	gutter?: number;
	edgeMargin?: number;
	gravity?: number;
	edges?: "hard" | "rounded";
	background?: string;
	fill?: string;
	fillArrows?: boolean;
	font?: string;
	fontSize?: number;
	leading?: number;
	lineWidth?: number;
	padding?: number;
	spacing?: number;
	stroke?: string;
	title?: string;
	zoom?: number;
	acyclicer?: "greedy";
	ranker?: "network-simplex" | "tight-tree" | "longest-path";
}
export declare class NomnomlEntityRelationshipModelToDiagramCodeConverter implements EntityRelationshipModelToCodeConverter {
	private readonly config;
	private readonly entityCodeGenerator;
	private readonly relationshipCodeGenerator;
	private readonly directivesCodeGenerator;
	constructor(config?: Partial<NomnomlEntityRelationshipModelToDiagramCodeConverterConfig>);
	convertToCode(model: EntityRelationshipModel): string;
}
export declare class NomnomlEntityRelationshipModelToDiagramCodeConverterConfigManager extends AbstractComponentConfigManager<NomnomlEntityRelationshipModelToDiagramCodeConverterConfig, NomnomlEntityRelationshipModelToDiagramCodeConverterConfig> {
	getDefaultConfig(): NomnomlEntityRelationshipModelToDiagramCodeConverterConfig;
	mergeConfigs(fullConfig: NomnomlEntityRelationshipModelToDiagramCodeConverterConfig, partialConfig?: Partial<NomnomlEntityRelationshipModelToDiagramCodeConverterConfig>): NomnomlEntityRelationshipModelToDiagramCodeConverterConfig;
}
export declare const nomnomlEntityRelationshipModelToDiagramCodeConverterConfigManager: NomnomlEntityRelationshipModelToDiagramCodeConverterConfigManager;
export declare class PlantUmlEntityRelationshipModelToDiagramCodeConverter implements EntityRelationshipModelToCodeConverter {
	private readonly entityCodeGenerator;
	private readonly relationshipCodeGenerator;
	convertToCode(model: EntityRelationshipModel): string;
}
export interface EntityRelationshipModelParserConfig {
	allowUnknownEntities: boolean;
}
export declare type PartialEntityRelationshipModelParserConfig = Partial<EntityRelationshipModelParserConfig>;
export declare class EntityRelationshipModelParser {
	private readonly config;
	private readonly entityRelationshipModelParserWithoutValidation;
	private readonly validator;
	private readonly parsedModelToPublicModelConverter;
	constructor(config?: PartialEntityRelationshipModelParserConfig);
	parseModel(code: string): EntityRelationshipModel;
}
export declare class EntityRelationshipModelParserConfigManager extends AbstractComponentConfigManager<EntityRelationshipModelParserConfig, PartialEntityRelationshipModelParserConfig> {
	getDefaultConfig(): EntityRelationshipModelParserConfig;
	mergeConfigs(fullConfig: EntityRelationshipModelParserConfig, partialConfig?: PartialEntityRelationshipModelParserConfig): EntityRelationshipModelParserConfig;
}
export declare const entityRelationshipModelParserConfigManager: EntityRelationshipModelParserConfigManager;
export declare class ERDiagramError extends Error {
}
export declare class ERDiagramParseLineError extends ERDiagramError {
	private readonly cause;
	readonly lineIndex: number;
	constructor(cause: ERDiagramError, lineIndex: number);
	get lineNumber(): number;
}
export declare class ERDiagramSyntaxError extends ERDiagramError {
}
export declare class ERDiagramUnknownTypeError extends ERDiagramError {
}
export interface ParsedEntityDescriptor {
	name: string;
	properties: ParsedEntityPropertyDescriptor[];
}
export interface ParsedEntityPropertyDescriptor {
	name: string;
	optional: boolean;
	unique: boolean;
	type: EntityPropertyType;
	length: number[];
}
export interface ParsedRelationshipDescriptor {
	leftMember: RelationshipMember;
	rightMember: RelationshipMember;
	direction: Direction;
	relationshipName?: string;
}
export declare class ERDiagramRelationshipError extends ERDiagramError {
	readonly relationship: ParsedRelationshipDescriptor;
	constructor(message: string, relationship: ParsedRelationshipDescriptor);
}
export declare class ERDiagramUnknownEntityError extends ERDiagramRelationshipError {
	readonly member: RelationshipMember;
	constructor(message: string, relationship: ParsedRelationshipDescriptor, member: RelationshipMember);
}
export declare class ERDiagramEntityError extends ERDiagramError {
	readonly entity: ParsedEntityDescriptor;
	constructor(message: string, entity: ParsedEntityDescriptor);
}
export declare class ERDiagramDuplicatedEntityNameError extends ERDiagramEntityError {
}
export declare class ERDiagramEntityPropertyError extends ERDiagramEntityError {
	readonly property: ParsedEntityPropertyDescriptor;
	constructor(message: string, entity: ParsedEntityDescriptor, property: ParsedEntityPropertyDescriptor);
}
export declare class ERDiagramMultipleIdentitiesError extends ERDiagramEntityPropertyError {
	readonly identityProperties: ParsedEntityPropertyDescriptor[];
	constructor(message: string, entity: ParsedEntityDescriptor, identityProperties: ParsedEntityPropertyDescriptor[]);
}
export declare class ERDiagramInvalidIdentityDefinitionError extends ERDiagramEntityPropertyError {
}
export declare class ERDiagramDuplicatedPropertyNameError extends ERDiagramEntityPropertyError {
}

export {};
