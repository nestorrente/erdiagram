{"version":3,"sources":["webpack://@nestorrente/erdiagram/webpack/universalModuleDefinition","webpack://@nestorrente/erdiagram/./node_modules/pluralize/pluralize.js","webpack://@nestorrente/erdiagram/./src/main/erdiagram/common/config/AbstractComponentConfigManager.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/common/config/exports.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/common/exports.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/common/case-format/AbstractCamelCaseFormat.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/common/case-format/AbstractUnderscoreCaseFormat.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/common/case-format/CapitalizedUnderscoreCaseFormat.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/common/case-format/CaseConverter.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/common/case-format/LowerCamelCaseFormat.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/common/case-format/LowerUnderscoreCaseFormat.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/common/case-format/StandardCaseFormats.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/common/case-format/UpperCamelCaseFormat.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/common/case-format/UpperUnderscoreCaseFormat.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/common/case-format/exports.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/common/exports.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/common/id-naming-strategy/StandardIdNamingStrategies.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/common/id-naming-strategy/exports.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/database/code-converter/EntityRelationshipModelToDatabaseCodeConverter.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/database/code-converter/exports.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/database/code-converter/sql/DatabaseModelToSqlCodeConverter.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/database/code-converter/sql/dialect/common/SqlTypeResolver.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/database/code-converter/sql/dialect/exports.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/database/code-converter/sql/dialect/mysql/MysqlDialect.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/database/code-converter/sql/dialect/mysql/column/MysqlColumnCodeGenerator.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/database/code-converter/sql/dialect/mysql/column/MysqlForeignColumnCodeGenerator.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/database/code-converter/sql/dialect/mysql/column/MysqlIdColumnCodeGenerator.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/database/code-converter/sql/dialect/mysql/config/MysqlDialectConfigManager.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/database/code-converter/sql/dialect/mysql/config/exports.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/database/code-converter/sql/dialect/mysql/exports.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/database/code-converter/sql/dialect/oracle/OracleDialect.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/database/code-converter/sql/dialect/oracle/column/OracleColumnCodeGenerator.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/database/code-converter/sql/dialect/oracle/column/OracleForeignColumnCodeGenerator.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/database/code-converter/sql/dialect/oracle/column/OracleIdColumnCodeGenerator.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/database/code-converter/sql/dialect/oracle/config/OracleDialectConfigManager.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/database/code-converter/sql/dialect/oracle/config/exports.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/database/code-converter/sql/dialect/oracle/exports.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/database/code-converter/sql/dialect/postgresql/PostgresqlDialect.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/database/code-converter/sql/dialect/postgresql/column/PostgresqlColumnCodeGenerator.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/database/code-converter/sql/dialect/postgresql/column/PostgresqlForeignColumnCodeGenerator.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/database/code-converter/sql/dialect/postgresql/column/PostgresqlIdColumnCodeGenerator.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/database/code-converter/sql/dialect/postgresql/config/PostgresqlDialectConfigManager.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/database/code-converter/sql/dialect/postgresql/config/exports.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/database/code-converter/sql/dialect/postgresql/exports.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/database/code-converter/sql/dialect/sqlite/SqliteDialect.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/database/code-converter/sql/dialect/sqlite/column/SqliteColumnCodeGenerator.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/database/code-converter/sql/dialect/sqlite/column/SqliteForeignColumnCodeGenerator.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/database/code-converter/sql/dialect/sqlite/column/SqliteIdColumnCodeGenerator.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/database/code-converter/sql/dialect/sqlite/config/SqliteDialectConfigManager.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/database/code-converter/sql/dialect/sqlite/config/exports.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/database/code-converter/sql/dialect/sqlite/exports.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/database/code-converter/sql/dialect/sqlserver/SqlServerDialect.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/database/code-converter/sql/dialect/sqlserver/column/SqlServerColumnCodeGenerator.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/database/code-converter/sql/dialect/sqlserver/column/SqlServerForeignColumnCodeGenerator.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/database/code-converter/sql/dialect/sqlserver/column/SqlServerIdColumnCodeGenerator.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/database/code-converter/sql/dialect/sqlserver/config/SqlServerDialectConfigManager.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/database/code-converter/sql/dialect/sqlserver/config/exports.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/database/code-converter/sql/dialect/sqlserver/exports.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/database/code-converter/sql/exports.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/database/exports.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/database/model/DatabaseModelGenerator.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/database/model/config/DatabaseModelGeneratorConfigManager.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/database/model/config/exports.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/database/model/exports.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/diagram/exports.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/diagram/nomnoml/NomnomlEntityRelationshipModelToDiagramCodeConverter.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/diagram/nomnoml/config/NomnomlEntityRelationshipModelToDiagramCodeConverterConfigManager.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/diagram/nomnoml/config/exports.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/diagram/nomnoml/directive/NomnomlDirectivesCodeGenerator.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/diagram/nomnoml/entity/NomnomlEntityCodeGenerator.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/diagram/nomnoml/entity/NomnomlEntityIdentityPropertyCodeGenerator.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/diagram/nomnoml/entity/NomnomlEntityPropertyCodeGenerator.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/diagram/nomnoml/exports.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/diagram/nomnoml/relationship/NomnomlNamedRelationshipCodeGenerator.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/diagram/nomnoml/relationship/NomnomlRelationshipCardinalityCodeGenerator.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/diagram/nomnoml/relationship/NomnomlRelationshipCodeGenerator.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/diagram/nomnoml/relationship/NomnomlRelationshipDirectionCodeGenerator.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/diagram/nomnoml/relationship/NomnomlUnnamedRelationshipCodeGenerator.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/diagram/plantuml/PlantUmlEntityRelationshipModelToDiagramCodeConverter.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/diagram/plantuml/entity/PlantUmlEntityCodeGenerator.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/diagram/plantuml/entity/PlantUmlEntityIdentityPropertyCodeGenerator.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/diagram/plantuml/entity/PlantUmlEntityPropertyCodeGenerator.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/diagram/plantuml/exports.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/diagram/plantuml/relationship/PlantUmlRelationshipCardinalityCodeGenerator.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/diagram/plantuml/relationship/PlantUmlRelationshipCodeGenerator.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/diagram/plantuml/relationship/PlantUmlRelationshipDirectionCodeGenerator.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/exports.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/oop/code-converter/EntityRelationshipModelToClassCodeConverter.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/oop/code-converter/exports.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/oop/code-converter/java/JavaClassModelToCodeConverter.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/oop/code-converter/java/annotation/validation/JavaValidationAnnotationTypes.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/oop/code-converter/java/annotation/validation/JavaValidationAnnotationsGenerator.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/oop/code-converter/java/annotation/validation/NotNullBlobValidationStrategy.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/oop/code-converter/java/annotation/validation/NotNullTextValidationStrategy.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/oop/code-converter/java/config/JavaClassModelToCodeConverterConfigManager.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/oop/code-converter/java/config/exports.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/oop/code-converter/java/exports.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/oop/code-converter/java/type/JavaFieldTypeResolver.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/oop/code-converter/java/type/JavaParameterizedType.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/oop/code-converter/java/type/JavaType.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/oop/code-converter/java/type/import/JavaImportStatementsGenerator.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/oop/code-converter/java/type/parseJavaType.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/oop/code-converter/typescript/TypeScriptClassModelToCodeConverter.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/oop/code-converter/typescript/config/TypeScriptClassModelToCodeConverterConfigManager.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/oop/code-converter/typescript/config/exports.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/oop/code-converter/typescript/exports.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/oop/code-converter/typescript/type/TypeScriptParameterizedType.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/oop/code-converter/typescript/type/TypeScriptType.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/oop/code-converter/typescript/type/TypeScriptTypeResolver.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/oop/code-converter/typescript/type/parseTypeScriptType.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/oop/exports.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/oop/model/ClassModelGenerator.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/oop/model/class/EntityToClassMapper.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/oop/model/class/field/EntityPropertyToClassFieldMapper.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/oop/model/class/field/EntityToIdClassFieldMapper.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/oop/model/class/field/RelationshipMemberToClassFieldMapper.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/oop/model/config/ClassModelGeneratorConfigManager.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/oop/model/config/exports.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/converter/oop/model/exports.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/exports.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/parser/EntityRelationshipModelParser.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/parser/EntityRelationshipModelParserWithoutValidation.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/parser/ParsedModelToPublicModelConverter.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/parser/config/EntityRelationshipModelParserConfigManager.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/parser/config/exports.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/parser/exports.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/parser/line/EntityRelationshipModelLineParser.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/parser/line/EntityRelationshipModelLineParserErrorHandler.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/parser/statement/statement-type-guesser.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/parser/statement/statement-types-parse-functions.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/parser/statement/statement-types-regexes.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/parser/types/entity-relationship-model-types.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/parser/types/exports.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/parser/types/parse-errors.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/parser/validator/EntityRelationshipModelParseResultValidator.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/parser/validator/EntityRelationshipModelParseResultValidatorErrorHandler.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/util/array-utils.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/util/indent-utils.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/util/map-utils.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/util/record-utils.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/util/regex-utils.ts","webpack://@nestorrente/erdiagram/./src/main/erdiagram/util/string-utils.ts","webpack://@nestorrente/erdiagram/webpack/bootstrap","webpack://@nestorrente/erdiagram/webpack/runtime/compat get default export","webpack://@nestorrente/erdiagram/webpack/runtime/define property getters","webpack://@nestorrente/erdiagram/webpack/runtime/hasOwnProperty shorthand","webpack://@nestorrente/erdiagram/webpack/runtime/make namespace object","webpack://@nestorrente/erdiagram/./src/main/module-entry.ts"],"names":[],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;;;;;;;;;ACVA;;AAEA;AACA;AACA,MAAM,IAA0F;AAChG;AACA;AACA,GAAG,MAAM,EAQN;AACH,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,gBAAgB;AAC9B,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,MAAM;AACpB,cAAc;AACd;AACA;AACA,8BAA8B,IAAI;AAClC;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,MAAM;AACpB,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,MAAM;AACpB,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,MAAM;AACpB,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,QAAQ;AACtB,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,gBAAgB;AAC7B,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,gBAAgB;AAC7B,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,gBAAgB;AAC7B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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","file":"erdiagram.esm.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn ","/* global define */\n\n(function (root, pluralize) {\n  /* istanbul ignore else */\n  if (typeof require === 'function' && typeof exports === 'object' && typeof module === 'object') {\n    // Node.\n    module.exports = pluralize();\n  } else if (typeof define === 'function' && define.amd) {\n    // AMD, registers as an anonymous module.\n    define(function () {\n      return pluralize();\n    });\n  } else {\n    // Browser global.\n    root.pluralize = pluralize();\n  }\n})(this, function () {\n  // Rule storage - pluralize and singularize need to be run sequentially,\n  // while other rules can be optimized using an object for instant lookups.\n  var pluralRules = [];\n  var singularRules = [];\n  var uncountables = {};\n  var irregularPlurals = {};\n  var irregularSingles = {};\n\n  /**\n   * Sanitize a pluralization rule to a usable regular expression.\n   *\n   * @param  {(RegExp|string)} rule\n   * @return {RegExp}\n   */\n  function sanitizeRule (rule) {\n    if (typeof rule === 'string') {\n      return new RegExp('^' + rule + '$', 'i');\n    }\n\n    return rule;\n  }\n\n  /**\n   * Pass in a word token to produce a function that can replicate the case on\n   * another word.\n   *\n   * @param  {string}   word\n   * @param  {string}   token\n   * @return {Function}\n   */\n  function restoreCase (word, token) {\n    // Tokens are an exact match.\n    if (word === token) return token;\n\n    // Lower cased words. E.g. \"hello\".\n    if (word === word.toLowerCase()) return token.toLowerCase();\n\n    // Upper cased words. E.g. \"WHISKY\".\n    if (word === word.toUpperCase()) return token.toUpperCase();\n\n    // Title cased words. E.g. \"Title\".\n    if (word[0] === word[0].toUpperCase()) {\n      return token.charAt(0).toUpperCase() + token.substr(1).toLowerCase();\n    }\n\n    // Lower cased words. E.g. \"test\".\n    return token.toLowerCase();\n  }\n\n  /**\n   * Interpolate a regexp string.\n   *\n   * @param  {string} str\n   * @param  {Array}  args\n   * @return {string}\n   */\n  function interpolate (str, args) {\n    return str.replace(/\\$(\\d{1,2})/g, function (match, index) {\n      return args[index] || '';\n    });\n  }\n\n  /**\n   * Replace a word using a rule.\n   *\n   * @param  {string} word\n   * @param  {Array}  rule\n   * @return {string}\n   */\n  function replace (word, rule) {\n    return word.replace(rule[0], function (match, index) {\n      var result = interpolate(rule[1], arguments);\n\n      if (match === '') {\n        return restoreCase(word[index - 1], result);\n      }\n\n      return restoreCase(match, result);\n    });\n  }\n\n  /**\n   * Sanitize a word by passing in the word and sanitization rules.\n   *\n   * @param  {string}   token\n   * @param  {string}   word\n   * @param  {Array}    rules\n   * @return {string}\n   */\n  function sanitizeWord (token, word, rules) {\n    // Empty string or doesn't need fixing.\n    if (!token.length || uncountables.hasOwnProperty(token)) {\n      return word;\n    }\n\n    var len = rules.length;\n\n    // Iterate over the sanitization rules and use the first one to match.\n    while (len--) {\n      var rule = rules[len];\n\n      if (rule[0].test(word)) return replace(word, rule);\n    }\n\n    return word;\n  }\n\n  /**\n   * Replace a word with the updated word.\n   *\n   * @param  {Object}   replaceMap\n   * @param  {Object}   keepMap\n   * @param  {Array}    rules\n   * @return {Function}\n   */\n  function replaceWord (replaceMap, keepMap, rules) {\n    return function (word) {\n      // Get the correct token and case restoration functions.\n      var token = word.toLowerCase();\n\n      // Check against the keep object map.\n      if (keepMap.hasOwnProperty(token)) {\n        return restoreCase(word, token);\n      }\n\n      // Check against the replacement map for a direct word replacement.\n      if (replaceMap.hasOwnProperty(token)) {\n        return restoreCase(word, replaceMap[token]);\n      }\n\n      // Run all the rules against the word.\n      return sanitizeWord(token, word, rules);\n    };\n  }\n\n  /**\n   * Check if a word is part of the map.\n   */\n  function checkWord (replaceMap, keepMap, rules, bool) {\n    return function (word) {\n      var token = word.toLowerCase();\n\n      if (keepMap.hasOwnProperty(token)) return true;\n      if (replaceMap.hasOwnProperty(token)) return false;\n\n      return sanitizeWord(token, token, rules) === token;\n    };\n  }\n\n  /**\n   * Pluralize or singularize a word based on the passed in count.\n   *\n   * @param  {string}  word      The word to pluralize\n   * @param  {number}  count     How many of the word exist\n   * @param  {boolean} inclusive Whether to prefix with the number (e.g. 3 ducks)\n   * @return {string}\n   */\n  function pluralize (word, count, inclusive) {\n    var pluralized = count === 1\n      ? pluralize.singular(word) : pluralize.plural(word);\n\n    return (inclusive ? count + ' ' : '') + pluralized;\n  }\n\n  /**\n   * Pluralize a word.\n   *\n   * @type {Function}\n   */\n  pluralize.plural = replaceWord(\n    irregularSingles, irregularPlurals, pluralRules\n  );\n\n  /**\n   * Check if a word is plural.\n   *\n   * @type {Function}\n   */\n  pluralize.isPlural = checkWord(\n    irregularSingles, irregularPlurals, pluralRules\n  );\n\n  /**\n   * Singularize a word.\n   *\n   * @type {Function}\n   */\n  pluralize.singular = replaceWord(\n    irregularPlurals, irregularSingles, singularRules\n  );\n\n  /**\n   * Check if a word is singular.\n   *\n   * @type {Function}\n   */\n  pluralize.isSingular = checkWord(\n    irregularPlurals, irregularSingles, singularRules\n  );\n\n  /**\n   * Add a pluralization rule to the collection.\n   *\n   * @param {(string|RegExp)} rule\n   * @param {string}          replacement\n   */\n  pluralize.addPluralRule = function (rule, replacement) {\n    pluralRules.push([sanitizeRule(rule), replacement]);\n  };\n\n  /**\n   * Add a singularization rule to the collection.\n   *\n   * @param {(string|RegExp)} rule\n   * @param {string}          replacement\n   */\n  pluralize.addSingularRule = function (rule, replacement) {\n    singularRules.push([sanitizeRule(rule), replacement]);\n  };\n\n  /**\n   * Add an uncountable word rule.\n   *\n   * @param {(string|RegExp)} word\n   */\n  pluralize.addUncountableRule = function (word) {\n    if (typeof word === 'string') {\n      uncountables[word.toLowerCase()] = true;\n      return;\n    }\n\n    // Set singular and plural references for the word.\n    pluralize.addPluralRule(word, '$0');\n    pluralize.addSingularRule(word, '$0');\n  };\n\n  /**\n   * Add an irregular word definition.\n   *\n   * @param {string} single\n   * @param {string} plural\n   */\n  pluralize.addIrregularRule = function (single, plural) {\n    plural = plural.toLowerCase();\n    single = single.toLowerCase();\n\n    irregularSingles[single] = plural;\n    irregularPlurals[plural] = single;\n  };\n\n  /**\n   * Irregular rules.\n   */\n  [\n    // Pronouns.\n    ['I', 'we'],\n    ['me', 'us'],\n    ['he', 'they'],\n    ['she', 'they'],\n    ['them', 'them'],\n    ['myself', 'ourselves'],\n    ['yourself', 'yourselves'],\n    ['itself', 'themselves'],\n    ['herself', 'themselves'],\n    ['himself', 'themselves'],\n    ['themself', 'themselves'],\n    ['is', 'are'],\n    ['was', 'were'],\n    ['has', 'have'],\n    ['this', 'these'],\n    ['that', 'those'],\n    // Words ending in with a consonant and `o`.\n    ['echo', 'echoes'],\n    ['dingo', 'dingoes'],\n    ['volcano', 'volcanoes'],\n    ['tornado', 'tornadoes'],\n    ['torpedo', 'torpedoes'],\n    // Ends with `us`.\n    ['genus', 'genera'],\n    ['viscus', 'viscera'],\n    // Ends with `ma`.\n    ['stigma', 'stigmata'],\n    ['stoma', 'stomata'],\n    ['dogma', 'dogmata'],\n    ['lemma', 'lemmata'],\n    ['schema', 'schemata'],\n    ['anathema', 'anathemata'],\n    // Other irregular rules.\n    ['ox', 'oxen'],\n    ['axe', 'axes'],\n    ['die', 'dice'],\n    ['yes', 'yeses'],\n    ['foot', 'feet'],\n    ['eave', 'eaves'],\n    ['goose', 'geese'],\n    ['tooth', 'teeth'],\n    ['quiz', 'quizzes'],\n    ['human', 'humans'],\n    ['proof', 'proofs'],\n    ['carve', 'carves'],\n    ['valve', 'valves'],\n    ['looey', 'looies'],\n    ['thief', 'thieves'],\n    ['groove', 'grooves'],\n    ['pickaxe', 'pickaxes'],\n    ['passerby', 'passersby']\n  ].forEach(function (rule) {\n    return pluralize.addIrregularRule(rule[0], rule[1]);\n  });\n\n  /**\n   * Pluralization rules.\n   */\n  [\n    [/s?$/i, 's'],\n    [/[^\\u0000-\\u007F]$/i, '$0'],\n    [/([^aeiou]ese)$/i, '$1'],\n    [/(ax|test)is$/i, '$1es'],\n    [/(alias|[^aou]us|t[lm]as|gas|ris)$/i, '$1es'],\n    [/(e[mn]u)s?$/i, '$1s'],\n    [/([^l]ias|[aeiou]las|[ejzr]as|[iu]am)$/i, '$1'],\n    [/(alumn|syllab|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, '$1i'],\n    [/(alumn|alg|vertebr)(?:a|ae)$/i, '$1ae'],\n    [/(seraph|cherub)(?:im)?$/i, '$1im'],\n    [/(her|at|gr)o$/i, '$1oes'],\n    [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|automat|quor)(?:a|um)$/i, '$1a'],\n    [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)(?:a|on)$/i, '$1a'],\n    [/sis$/i, 'ses'],\n    [/(?:(kni|wi|li)fe|(ar|l|ea|eo|oa|hoo)f)$/i, '$1$2ves'],\n    [/([^aeiouy]|qu)y$/i, '$1ies'],\n    [/([^ch][ieo][ln])ey$/i, '$1ies'],\n    [/(x|ch|ss|sh|zz)$/i, '$1es'],\n    [/(matr|cod|mur|sil|vert|ind|append)(?:ix|ex)$/i, '$1ices'],\n    [/\\b((?:tit)?m|l)(?:ice|ouse)$/i, '$1ice'],\n    [/(pe)(?:rson|ople)$/i, '$1ople'],\n    [/(child)(?:ren)?$/i, '$1ren'],\n    [/eaux$/i, '$0'],\n    [/m[ae]n$/i, 'men'],\n    ['thou', 'you']\n  ].forEach(function (rule) {\n    return pluralize.addPluralRule(rule[0], rule[1]);\n  });\n\n  /**\n   * Singularization rules.\n   */\n  [\n    [/s$/i, ''],\n    [/(ss)$/i, '$1'],\n    [/(wi|kni|(?:after|half|high|low|mid|non|night|[^\\w]|^)li)ves$/i, '$1fe'],\n    [/(ar|(?:wo|[ae])l|[eo][ao])ves$/i, '$1f'],\n    [/ies$/i, 'y'],\n    [/\\b([pl]|zomb|(?:neck|cross)?t|coll|faer|food|gen|goon|group|lass|talk|goal|cut)ies$/i, '$1ie'],\n    [/\\b(mon|smil)ies$/i, '$1ey'],\n    [/\\b((?:tit)?m|l)ice$/i, '$1ouse'],\n    [/(seraph|cherub)im$/i, '$1'],\n    [/(x|ch|ss|sh|zz|tto|go|cho|alias|[^aou]us|t[lm]as|gas|(?:her|at|gr)o|[aeiou]ris)(?:es)?$/i, '$1'],\n    [/(analy|diagno|parenthe|progno|synop|the|empha|cri|ne)(?:sis|ses)$/i, '$1sis'],\n    [/(movie|twelve|abuse|e[mn]u)s$/i, '$1'],\n    [/(test)(?:is|es)$/i, '$1is'],\n    [/(alumn|syllab|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, '$1us'],\n    [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|quor)a$/i, '$1um'],\n    [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)a$/i, '$1on'],\n    [/(alumn|alg|vertebr)ae$/i, '$1a'],\n    [/(cod|mur|sil|vert|ind)ices$/i, '$1ex'],\n    [/(matr|append)ices$/i, '$1ix'],\n    [/(pe)(rson|ople)$/i, '$1rson'],\n    [/(child)ren$/i, '$1'],\n    [/(eau)x?$/i, '$1'],\n    [/men$/i, 'man']\n  ].forEach(function (rule) {\n    return pluralize.addSingularRule(rule[0], rule[1]);\n  });\n\n  /**\n   * Uncountable rules.\n   */\n  [\n    // Singular words with no plurals.\n    'adulthood',\n    'advice',\n    'agenda',\n    'aid',\n    'aircraft',\n    'alcohol',\n    'ammo',\n    'analytics',\n    'anime',\n    'athletics',\n    'audio',\n    'bison',\n    'blood',\n    'bream',\n    'buffalo',\n    'butter',\n    'carp',\n    'cash',\n    'chassis',\n    'chess',\n    'clothing',\n    'cod',\n    'commerce',\n    'cooperation',\n    'corps',\n    'debris',\n    'diabetes',\n    'digestion',\n    'elk',\n    'energy',\n    'equipment',\n    'excretion',\n    'expertise',\n    'firmware',\n    'flounder',\n    'fun',\n    'gallows',\n    'garbage',\n    'graffiti',\n    'hardware',\n    'headquarters',\n    'health',\n    'herpes',\n    'highjinks',\n    'homework',\n    'housework',\n    'information',\n    'jeans',\n    'justice',\n    'kudos',\n    'labour',\n    'literature',\n    'machinery',\n    'mackerel',\n    'mail',\n    'media',\n    'mews',\n    'moose',\n    'music',\n    'mud',\n    'manga',\n    'news',\n    'only',\n    'personnel',\n    'pike',\n    'plankton',\n    'pliers',\n    'police',\n    'pollution',\n    'premises',\n    'rain',\n    'research',\n    'rice',\n    'salmon',\n    'scissors',\n    'series',\n    'sewage',\n    'shambles',\n    'shrimp',\n    'software',\n    'species',\n    'staff',\n    'swine',\n    'tennis',\n    'traffic',\n    'transportation',\n    'trout',\n    'tuna',\n    'wealth',\n    'welfare',\n    'whiting',\n    'wildebeest',\n    'wildlife',\n    'you',\n    /pok[eé]mon$/i,\n    // Regexes.\n    /[^aeiou]ese$/i, // \"chinese\", \"japanese\"\n    /deer$/i, // \"deer\", \"reindeer\"\n    /fish$/i, // \"fish\", \"blowfish\", \"angelfish\"\n    /measles$/i,\n    /o[iu]s$/i, // \"carnivorous\"\n    /pox$/i, // \"chickpox\", \"smallpox\"\n    /sheep$/i\n  ].forEach(pluralize.addUncountableRule);\n\n  return pluralize;\n});\n","import ComponentConfigManager from '@/erdiagram/common/config/ComponentConfigManager';\n\nexport default abstract class AbstractComponentConfigManager<C, P = Partial<C>, S = C>\n\t\timplements ComponentConfigManager<C, P, S> {\n\n\tabstract getDefaultConfig(): C;\n\n\tabstract mergeConfigs(fullConfig: C, partialConfig?: P): C;\n\n\tmergeWithDefaultConfig(partialConfig?: P): C {\n\t\treturn this.mergeConfigs(this.getDefaultConfig(), partialConfig);\n\t}\n\n\tcloneConfig(fullConfig: C): C {\n\t\treturn this.mergeConfigs(fullConfig);\n\t}\n\n\tabstract convertToSerializableObject(fullConfig: C): S;\n\n\tabstract convertFromSerializableObject(serializableConfig: S): C;\n\n}\n","import ComponentConfigManager from './ComponentConfigManager';\nimport AbstractComponentConfigManager from './AbstractComponentConfigManager';\n\nexport {\n\tComponentConfigManager,\n\tAbstractComponentConfigManager\n};\n","export * from './config/exports';\n","import CaseFormat from '@/erdiagram/converter/common/case-format/CaseFormat';\nimport {removeNonEmptyStrings} from '@/erdiagram/util/string-utils';\n\nconst CAMEL_CASE_WORD_BOUNDARIES_REGEX = /((?<=[^A-Z])(?=[A-Z])|(?=[A-Z][a-z])|(?<=[A-Za-z])(?=[0-9]))/;\n\nexport default abstract class AbstractCamelCaseFormat implements CaseFormat {\n\n\tabstract joinWords(words: string[]): string;\n\n\tpublic splitWords(text: string): string[] {\n\t\treturn removeNonEmptyStrings(text.split(CAMEL_CASE_WORD_BOUNDARIES_REGEX));\n\t}\n\n}\n","import CaseFormat from '@/erdiagram/converter/common/case-format/CaseFormat';\nimport {removeNonEmptyStrings} from '@/erdiagram/util/string-utils';\n\nexport default abstract class AbstractUnderscoreCaseFormat implements CaseFormat {\n\n\tabstract joinWords(words: string[]): string;\n\n\tpublic splitWords(text: string): string[] {\n\t\treturn removeNonEmptyStrings(text.split('_'));\n\t}\n\n}\n","import AbstractUnderscoreCaseFormat from '@/erdiagram/converter/common/case-format/AbstractUnderscoreCaseFormat';\nimport {capitalizeWord, removeNonEmptyStrings} from '@/erdiagram/util/string-utils';\n\nexport default class CapitalizedUnderscoreCaseFormat extends AbstractUnderscoreCaseFormat {\n\n\tpublic joinWords(words: string[]): string {\n\t\treturn removeNonEmptyStrings(words)\n\t\t\t\t.map(word => word.toLowerCase())\n\t\t\t\t.map(capitalizeWord)\n\t\t\t\t.join('_');\n\t}\n\n}\n","import CaseFormat from '@/erdiagram/converter/common/case-format/CaseFormat';\n\nexport default class CaseConverter {\n\n\tconstructor(\n\t\t\tprivate readonly originCaseFormat: CaseFormat,\n\t\t\tprivate readonly targetCaseFormat: CaseFormat\n\t) {\n\n\t}\n\n\tpublic convertCase(text: string) {\n\t\tconst words = this.originCaseFormat.splitWords(text);\n\t\treturn this.targetCaseFormat.joinWords(words);\n\t}\n\n}\n","import AbstractCamelCaseFormat from '@/erdiagram/converter/common/case-format/AbstractCamelCaseFormat';\nimport {capitalizeWord, removeNonEmptyStrings} from '@/erdiagram/util/string-utils';\n\nexport default class LowerCamelCaseFormat extends AbstractCamelCaseFormat {\n\n\tpublic joinWords(words: string[]): string {\n\n\t\tconst nonEmptyWords = removeNonEmptyStrings(words)\n\n\t\tif (nonEmptyWords.length === 0) {\n\t\t\treturn '';\n\t\t}\n\n\t\tconst [firstWord, ...otherWords] = nonEmptyWords;\n\n\t\tconst lowerCaseFirstWord = firstWord.toLowerCase();\n\n\t\tconst capitalizedOtherWords = otherWords\n\t\t\t\t.map(word => word.toLowerCase())\n\t\t\t\t.map(capitalizeWord);\n\n\t\treturn lowerCaseFirstWord + capitalizedOtherWords.join('');\n\n\t}\n\n}\n","import AbstractUnderscoreCaseFormat from '@/erdiagram/converter/common/case-format/AbstractUnderscoreCaseFormat';\nimport {removeNonEmptyStrings} from '@/erdiagram/util/string-utils';\n\nexport default class LowerUnderscoreCaseFormat extends AbstractUnderscoreCaseFormat {\n\n\tpublic joinWords(words: string[]): string {\n\t\treturn removeNonEmptyStrings(words)\n\t\t\t\t.map(word => word.toLowerCase())\n\t\t\t\t.join('_');\n\t}\n\n}\n","import LowerCamelCaseFormat from '@/erdiagram/converter/common/case-format/LowerCamelCaseFormat';\nimport UpperCamelCaseFormat from '@/erdiagram/converter/common/case-format/UpperCamelCaseFormat';\nimport LowerUnderscoreCaseFormat from '@/erdiagram/converter/common/case-format/LowerUnderscoreCaseFormat';\nimport CapitalizedUnderscoreCaseFormat from '@/erdiagram/converter/common/case-format/CapitalizedUnderscoreCaseFormat';\nimport UpperUnderscoreCaseFormat from '@/erdiagram/converter/common/case-format/UpperUnderscoreCaseFormat';\nimport CaseFormat from '@/erdiagram/converter/common/case-format/CaseFormat';\n\nconst StandardCaseFormats = {\n\tLOWER_CAMEL: new LowerCamelCaseFormat() as CaseFormat,\n\tUPPER_CAMEL: new UpperCamelCaseFormat() as CaseFormat,\n\tLOWER_UNDERSCORE: new LowerUnderscoreCaseFormat() as CaseFormat,\n\tCAPITALIZED_UNDERSCORE: new CapitalizedUnderscoreCaseFormat() as CaseFormat,\n\tUPPER_UNDERSCORE: new UpperUnderscoreCaseFormat() as CaseFormat,\n};\n\nexport default StandardCaseFormats;\n","import AbstractCamelCaseFormat from '@/erdiagram/converter/common/case-format/AbstractCamelCaseFormat';\nimport {capitalizeWord, removeNonEmptyStrings} from '@/erdiagram/util/string-utils';\n\nexport default class UpperCamelCaseFormat extends AbstractCamelCaseFormat {\n\n\tpublic joinWords(words: string[]): string {\n\t\treturn removeNonEmptyStrings(words)\n\t\t\t\t.map(word => word.toLowerCase())\n\t\t\t\t.map(capitalizeWord)\n\t\t\t\t.join('');\n\t}\n\n}\n","import AbstractUnderscoreCaseFormat from '@/erdiagram/converter/common/case-format/AbstractUnderscoreCaseFormat';\nimport {removeNonEmptyStrings} from '@/erdiagram/util/string-utils';\n\nexport default class UpperUnderscoreCaseFormat extends AbstractUnderscoreCaseFormat {\n\n\tpublic joinWords(words: string[]): string {\n\t\treturn removeNonEmptyStrings(words)\n\t\t\t\t.map(word => word.toUpperCase())\n\t\t\t\t.join('_');\n\t}\n\n}\n","import CaseConverter from './CaseConverter';\nimport CaseFormat from './CaseFormat';\nimport StandardCaseFormats from './StandardCaseFormats';\n\nexport {\n\tCaseFormat,\n\tStandardCaseFormats,\n\tCaseConverter\n};\n","export * from './case-format/exports';\nexport * from './id-naming-strategy/exports';\n","import {uncapitalizeWord} from '@/erdiagram/util/string-utils';\nimport IdNamingStrategy from '@/erdiagram/converter/common/id-naming-strategy/IdNamingStrategy';\n\nconst defaultIdNamingStrategy: IdNamingStrategy = () => 'id';\nconst entityNamePrefixIdNamingStrategy: IdNamingStrategy = entityName => `${uncapitalizeWord(entityName)}Id`;\n\nconst StandardIdNamingStrategies = {\n\tDEFAULT: defaultIdNamingStrategy,\n\tENTITY_NAME_PREFIX: entityNamePrefixIdNamingStrategy\n};\n\nexport default StandardIdNamingStrategies;\n","import StandardIdNamingStrategies from './StandardIdNamingStrategies';\nimport IdNamingStrategy from './IdNamingStrategy';\n\nexport {\n\tIdNamingStrategy,\n\tStandardIdNamingStrategies\n};\n","import DatabaseModelGenerator from '@/erdiagram/converter/database/model/DatabaseModelGenerator';\nimport DatabaseModelToCodeConverter from '@/erdiagram/converter/database/code-converter/DatabaseModelToCodeConverter';\nimport EntityRelationshipModelToCodeConverter from '@/erdiagram/converter/EntityRelationshipModelToCodeConverter';\nimport {EntityRelationshipModel} from '@/erdiagram/parser/types/entity-relationship-model-types';\n\nexport default class EntityRelationshipModelToDatabaseCodeConverter implements EntityRelationshipModelToCodeConverter {\n\n\tprivate readonly databaseModelGenerator: DatabaseModelGenerator;\n\tprivate readonly databaseModelToCodeConverter: DatabaseModelToCodeConverter;\n\n\tconstructor(\n\t\t\tdatabaseModelGenerator: DatabaseModelGenerator,\n\t\t\tdatabaseModelToCodeConverter: DatabaseModelToCodeConverter\n\t) {\n\t\tthis.databaseModelGenerator = databaseModelGenerator;\n\t\tthis.databaseModelToCodeConverter = databaseModelToCodeConverter;\n\t}\n\n\tpublic convertToCode(entityRelationshipModel: EntityRelationshipModel): string {\n\t\tconst databaseModel = this.databaseModelGenerator.generateDatabaseModel(entityRelationshipModel);\n\t\treturn this.databaseModelToCodeConverter.convertToCode(databaseModel);\n\t}\n\n}\n","import DatabaseModelToCodeConverter from './DatabaseModelToCodeConverter';\nimport EntityRelationshipModelToDatabaseCodeConverter from './EntityRelationshipModelToDatabaseCodeConverter';\n\nexport * from './sql/exports';\n\nexport {\n\tDatabaseModelToCodeConverter,\n\tEntityRelationshipModelToDatabaseCodeConverter\n};\n","import {\n\tDatabaseModel,\n\tTableColumnDescriptor,\n\tTableDescriptor,\n\tTableReferenceDescriptor\n} from '@/erdiagram/converter/database/model/database-model-types';\nimport DatabaseModelToCodeConverter from '@/erdiagram/converter/database/code-converter/DatabaseModelToCodeConverter';\nimport {indentLines} from '@/erdiagram/util/indent-utils';\nimport {\n\tCreateTableLines,\n\tTableCreationStatements\n} from '@/erdiagram/converter/database/code-converter/sql/dialect/common/sql-script-types';\nimport SqlDialect from '@/erdiagram/converter/database/code-converter/sql/dialect/common/SqlDialect';\n\nexport default class DatabaseModelToSqlCodeConverter implements DatabaseModelToCodeConverter {\n\n\tconstructor(\n\t\t\tprivate readonly sqlDialect: SqlDialect\n\t) {\n\n\t}\n\n\tpublic convertToCode(databaseModel: DatabaseModel): string {\n\n\t\tconst allCreateTableStatements: string[] = [];\n\t\tconst allAlterTableStatements: string[] = [];\n\n\t\tdatabaseModel.tables\n\t\t\t\t.map(table => this.generateTableCode(table))\n\t\t\t\t.forEach(({createTableStatement, alterTableStatements}) => {\n\n\t\t\t\t\tallCreateTableStatements.push(createTableStatement);\n\n\t\t\t\t\tif (alterTableStatements) {\n\t\t\t\t\t\tallAlterTableStatements.push(alterTableStatements);\n\t\t\t\t\t}\n\n\t\t\t\t});\n\n\t\tconst allScriptStatements = [\n\t\t\t...allCreateTableStatements,\n\t\t\t...allAlterTableStatements\n\t\t];\n\n\t\tconst scriptStartCode = this.sqlDialect.getScriptStartCode();\n\t\tconst scriptEndCode = this.sqlDialect.getScriptEndCode();\n\n\t\tif (scriptStartCode) {\n\t\t\tallScriptStatements.unshift(scriptStartCode);\n\t\t}\n\n\t\tif (scriptEndCode) {\n\t\t\tallScriptStatements.push(scriptEndCode);\n\t\t}\n\n\t\treturn allScriptStatements.join('\\n\\n');\n\n\t}\n\n\t// FIXME split this method\n\tprivate generateTableCode(table: TableDescriptor): TableCreationStatements {\n\n\t\tconst lines: CreateTableLines = {\n\t\t\tsequences: [],\n\t\t\tcolumns: [],\n\t\t\tfkConstraints: [],\n\t\t\totherConstraints: []\n\t\t};\n\n\t\tconst {\n\t\t\tcreateSequenceLine: idCreateSequenceLine,\n\t\t\tcolumnLine: idColumnLine,\n\t\t\tpkConstraintLine\n\t\t} = this.sqlDialect.getIdColumnCode(table.name, table.identityColumnName);\n\n\t\tif (idCreateSequenceLine) {\n\t\t\tlines.sequences.push(idCreateSequenceLine);\n\t\t}\n\n\t\tlines.columns.push(idColumnLine);\n\n\t\tif (pkConstraintLine != null) {\n\t\t\tlines.otherConstraints.push(pkConstraintLine);\n\t\t}\n\n\t\tthis.processColumns(table.name, table.columns, lines);\n\t\tthis.processReferences(table.name, table.references, lines);\n\n\t\tconst createTableInnerLines = this.getCreateTableInnerLines(lines);\n\n\t\tconst createTableLines = [\n\t\t\t...lines.sequences,\n\t\t\tthis.sqlDialect.getCreateTableStartCode(table.name),\n\t\t\tindentLines(createTableInnerLines).join(',\\n'),\n\t\t\tthis.sqlDialect.getCreateTableEndCode()\n\t\t];\n\n\t\tconst alterTableLines = this.getAlterTableLines(table, lines);\n\n\t\treturn {\n\t\t\tcreateTableStatement: createTableLines.join('\\n'),\n\t\t\talterTableStatements: alterTableLines.join('\\n')\n\t\t};\n\n\t}\n\n\tprivate processColumns(tableName: string, columns: TableColumnDescriptor[], lines: CreateTableLines) {\n\n\t\tfor (const column of columns) {\n\n\t\t\tconst {\n\t\t\t\tcolumnLine,\n\t\t\t\tuniqueConstraintLine\n\t\t\t} = this.sqlDialect.getColumnCode(tableName, column);\n\n\t\t\tlines.columns.push(columnLine);\n\n\t\t\tif (uniqueConstraintLine) {\n\t\t\t\tlines.otherConstraints.push(uniqueConstraintLine);\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tprivate processReferences(tableName: string, references: TableReferenceDescriptor[], lines: CreateTableLines) {\n\n\t\tfor (const reference of references) {\n\n\t\t\tconst {\n\t\t\t\tcolumnLine,\n\t\t\t\tuniqueConstraintLine,\n\t\t\t\tfkConstraintLine\n\t\t\t} = this.sqlDialect.getForeignColumnCode(tableName, reference);\n\n\t\t\tlines.columns.push(columnLine);\n\t\t\tlines.fkConstraints.push(fkConstraintLine);\n\n\t\t\tif (uniqueConstraintLine) {\n\t\t\t\tlines.otherConstraints.push(uniqueConstraintLine);\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tprivate getCreateTableInnerLines(lines: CreateTableLines): string[] {\n\n\t\tconst createTableInnerLines = [\n\t\t\t...lines.columns,\n\t\t\t...lines.otherConstraints\n\t\t];\n\n\t\tif (!this.sqlDialect.mustUseAlterTableForForeignKeys()) {\n\t\t\tcreateTableInnerLines.push(...lines.fkConstraints);\n\t\t}\n\n\t\treturn createTableInnerLines;\n\n\t}\n\n\tprivate getAlterTableLines(table: TableDescriptor, lines: CreateTableLines): string[] {\n\n\t\tif (!this.sqlDialect.mustUseAlterTableForForeignKeys()) {\n\t\t\treturn [];\n\t\t}\n\n\t\treturn lines.fkConstraints.map(fkConstraintLine => {\n\t\t\treturn this.sqlDialect.getAlterTableAddCode(table.name, fkConstraintLine);\n\t\t});\n\n\t}\n\n}\n","import {EntityPropertyType} from '@/erdiagram/parser/types/entity-relationship-model-types';\n\nexport default class SqlTypeResolver {\n\n\tprivate readonly typeBindings: Partial<Record<EntityPropertyType, string>>;\n\n\tconstructor(typeBindings: Partial<Record<EntityPropertyType, string>>) {\n\t\tthis.typeBindings = typeBindings;\n\t}\n\n\tpublic resolveSqlType(type: EntityPropertyType): string {\n\n\t\t/* istanbul ignore next */\n\t\tif (!this.typeBindings.hasOwnProperty(type)) {\n\t\t\tthrow new Error('Unsupported type: ' + type);\n\t\t}\n\n\t\treturn this.typeBindings[type]!;\n\n\t}\n\n}\n","export * from './common/config/exports';\n\nexport * from './mysql/exports';\nexport * from './oracle/exports';\nexport * from './sqlite/exports';\nexport * from './sqlserver/exports';\nexport * from './postgresql/exports';\n","import SqlDialect from '@/erdiagram/converter/database/code-converter/sql/dialect/common/SqlDialect';\nimport {\n\tTableColumnDescriptor,\n\tTableReferenceDescriptor\n} from '@/erdiagram/converter/database/model/database-model-types';\nimport {\n\tForeignKeyColumnCode,\n\tIdColumnCode,\n\tRegularColumnCode\n} from '@/erdiagram/converter/database/code-converter/sql/dialect/common/sql-script-types';\nimport CaseConverter from '@/erdiagram/converter/common/case-format/CaseConverter';\nimport MysqlColumnCodeGenerator\n\tfrom '@/erdiagram/converter/database/code-converter/sql/dialect/mysql/column/MysqlColumnCodeGenerator';\nimport MysqlIdColumnCodeGenerator\n\tfrom '@/erdiagram/converter/database/code-converter/sql/dialect/mysql/column/MysqlIdColumnCodeGenerator';\nimport MysqlForeignColumnCodeGenerator\n\tfrom '@/erdiagram/converter/database/code-converter/sql/dialect/mysql/column/MysqlForeignColumnCodeGenerator';\nimport SqlTypeResolver from '@/erdiagram/converter/database/code-converter/sql/dialect/common/SqlTypeResolver';\nimport mysqlDialectConfigManager\n\tfrom '@/erdiagram/converter/database/code-converter/sql/dialect/mysql/config/MysqlDialectConfigManager';\nimport StandardCaseFormats from '@/erdiagram/converter/common/case-format/StandardCaseFormats';\nimport MysqlDialectConfig\n\tfrom '@/erdiagram/converter/database/code-converter/sql/dialect/mysql/config/MysqlDialectConfig';\n\nexport default class MysqlDialect implements SqlDialect {\n\n\tprivate readonly tableNameCaseConverter: CaseConverter;\n\n\tprivate readonly columnCodeGenerator: MysqlColumnCodeGenerator;\n\tprivate readonly idColumnCodeGenerator: MysqlIdColumnCodeGenerator;\n\tprivate readonly foreignColumnCodeGenerator: MysqlForeignColumnCodeGenerator;\n\n\tconstructor(config?: Partial<MysqlDialectConfig>) {\n\n\t\tconst fullConfig = mysqlDialectConfigManager.mergeWithDefaultConfig(config);\n\n\t\tthis.tableNameCaseConverter = new CaseConverter(\n\t\t\t\tStandardCaseFormats.LOWER_CAMEL,\n\t\t\t\tfullConfig.tableNameCaseFormat\n\t\t);\n\n\t\tconst columnNameCaseConverter = new CaseConverter(\n\t\t\t\tStandardCaseFormats.LOWER_CAMEL,\n\t\t\t\tfullConfig.columnNameCaseFormat\n\t\t);\n\n\t\tconst sqlTypeResolver = new SqlTypeResolver(fullConfig.typeBindings);\n\n\t\tthis.columnCodeGenerator = new MysqlColumnCodeGenerator(\n\t\t\t\tsqlTypeResolver,\n\t\t\t\tcolumnNameCaseConverter\n\t\t);\n\n\t\tthis.idColumnCodeGenerator = new MysqlIdColumnCodeGenerator(\n\t\t\t\tsqlTypeResolver,\n\t\t\t\tcolumnNameCaseConverter\n\t\t);\n\n\t\tthis.foreignColumnCodeGenerator = new MysqlForeignColumnCodeGenerator(\n\t\t\t\tthis.columnCodeGenerator,\n\t\t\t\tthis.tableNameCaseConverter,\n\t\t\t\tcolumnNameCaseConverter\n\t\t);\n\n\t}\n\n\tgetScriptStartCode() {\n\t\treturn '';\n\t}\n\n\tgetScriptEndCode() {\n\t\treturn '';\n\t}\n\n\tmustUseAlterTableForForeignKeys(): boolean {\n\t\treturn true;\n\t}\n\n\tgetCreateTableStartCode(tableName: string) {\n\t\tconst outputTableName = this.tableNameCaseConverter.convertCase(tableName);\n\t\treturn `CREATE TABLE \\`${outputTableName}\\` (`;\n\t}\n\n\tgetCreateTableEndCode() {\n\t\treturn ');';\n\t}\n\n\tgetIdColumnCode(tableName: string, identityColumnName: string): IdColumnCode {\n\t\tconst outputTableName = this.tableNameCaseConverter.convertCase(tableName);\n\t\treturn this.idColumnCodeGenerator.generateIdColumnCode(outputTableName, identityColumnName);\n\t}\n\n\tgetColumnCode(tableName: string, column: TableColumnDescriptor): RegularColumnCode {\n\t\tconst outputTableName = this.tableNameCaseConverter.convertCase(tableName);\n\t\treturn this.columnCodeGenerator.generateColumnCode(outputTableName, column);\n\t}\n\n\tgetForeignColumnCode(tableName: string, reference: TableReferenceDescriptor): ForeignKeyColumnCode {\n\t\tconst outputTableName = this.tableNameCaseConverter.convertCase(tableName);\n\t\treturn this.foreignColumnCodeGenerator.generateForeignColumnCode(outputTableName, reference);\n\t}\n\n\tgetAlterTableAddCode(tableName: string, constraintCode: string) {\n\t\tconst outputTableName = this.tableNameCaseConverter.convertCase(tableName);\n\t\treturn `ALTER TABLE \\`${outputTableName}\\` ADD ${constraintCode};`;\n\t}\n\n}\n","import {EntityPropertyType} from '@/erdiagram/parser/types/entity-relationship-model-types';\nimport {TableColumnDescriptor} from '@/erdiagram/converter/database/model/database-model-types';\nimport CaseConverter from '@/erdiagram/converter/common/case-format/CaseConverter';\nimport SqlTypeResolver from '@/erdiagram/converter/database/code-converter/sql/dialect/common/SqlTypeResolver';\nimport {RegularColumnCode} from '@/erdiagram/converter/database/code-converter/sql/dialect/common/sql-script-types';\nimport SqlColumnCodeGenerator\n\tfrom '@/erdiagram/converter/database/code-converter/sql/dialect/common/column/SqlColumnCodeGenerator';\n\nexport default class MysqlColumnCodeGenerator implements SqlColumnCodeGenerator {\n\n\tconstructor(\n\t\t\tprivate readonly typeResolver: SqlTypeResolver,\n\t\t\tprivate readonly columnNameCaseConverter: CaseConverter\n\t) {\n\n\t}\n\n\tpublic generateColumnCode(outputTableName: string, column: TableColumnDescriptor): RegularColumnCode {\n\n\t\tconst outputColumnName = this.columnNameCaseConverter.convertCase(column.name);\n\n\t\treturn {\n\t\t\tcolumnLine: this.generateColumnDeclarationLine(outputColumnName, column),\n\t\t\tuniqueConstraintLine: column.unique ? this.generateUniqueConstraintLine(outputTableName, outputColumnName) : undefined\n\t\t};\n\n\t}\n\n\tprivate generateColumnDeclarationLine(outputColumnName: string, column: TableColumnDescriptor): string {\n\n\t\tconst {\n\t\t\tnotNull,\n\t\t\ttype,\n\t\t\tlength\n\t\t} = column;\n\n\t\tconst lineParts: string[] = [\n\t\t\t`\\`${outputColumnName}\\``,\n\t\t\tthis.generateMysqlTypeDeclaration(type, length)\n\t\t];\n\n\t\tif (notNull) {\n\t\t\tlineParts.push('NOT NULL');\n\t\t}\n\n\t\treturn lineParts.join(' ');\n\n\t}\n\n\tprivate generateMysqlTypeDeclaration(type: EntityPropertyType, length: number[]) {\n\n\t\tconst mysqlType = this.typeResolver.resolveSqlType(type);\n\t\tconst lengthCode = this.generateLengthCode(length);\n\n\t\treturn mysqlType + lengthCode;\n\n\t}\n\n\tprivate generateLengthCode(length: number[]): string {\n\n\t\tif (length.length === 0) {\n\t\t\treturn '';\n\t\t}\n\n\t\treturn `(${length.join(', ')})`;\n\n\t}\n\n\tprivate generateUniqueConstraintLine(outputTableName: string, outputColumnName: string) {\n\t\treturn `CONSTRAINT \\`${outputTableName}_${outputColumnName}_unique\\` UNIQUE (\\`${outputColumnName}\\`)`;\n\t}\n\n}\n","import {EntityPropertyType} from '@/erdiagram/parser/types/entity-relationship-model-types';\nimport {\n\tTableColumnDescriptor,\n\tTableReferenceDescriptor\n} from '@/erdiagram/converter/database/model/database-model-types';\nimport MysqlColumnCodeGenerator\n\tfrom '@/erdiagram/converter/database/code-converter/sql/dialect/mysql/column/MysqlColumnCodeGenerator';\nimport CaseConverter from '@/erdiagram/converter/common/case-format/CaseConverter';\nimport {ForeignKeyColumnCode} from '@/erdiagram/converter/database/code-converter/sql/dialect/common/sql-script-types';\nimport SqlForeignColumnCodeGenerator\n\tfrom '@/erdiagram/converter/database/code-converter/sql/dialect/common/column/SqlForeignColumnCodeGenerator';\n\nexport default class MysqlForeignColumnCodeGenerator implements SqlForeignColumnCodeGenerator {\n\n\tconstructor(\n\t\t\tprivate readonly columnCodeGenerator: MysqlColumnCodeGenerator,\n\t\t\tprivate readonly tableNameCaseConverter: CaseConverter,\n\t\t\tprivate readonly columnNameCaseConverter: CaseConverter\n\t) {\n\n\t}\n\n\tpublic generateForeignColumnCode(outputTableName: string, reference: TableReferenceDescriptor): ForeignKeyColumnCode {\n\n\t\tconst columnDescriptor = this.createForeignKeyColumnDescriptor(reference);\n\n\t\tconst {\n\t\t\tcolumnLine,\n\t\t\tuniqueConstraintLine\n\t\t} = this.columnCodeGenerator.generateColumnCode(outputTableName, columnDescriptor);\n\n\t\treturn {\n\t\t\tcolumnLine,\n\t\t\tuniqueConstraintLine,\n\t\t\tfkConstraintLine: this.createForeignKeyConstraint(outputTableName, reference)\n\t\t};\n\n\t}\n\n\tprivate createForeignKeyColumnDescriptor(reference: TableReferenceDescriptor): TableColumnDescriptor {\n\n\t\tconst {\n\t\t\tcolumnName,\n\t\t\tnotNull,\n\t\t\tunique\n\t\t} = reference;\n\n\t\treturn {\n\t\t\tname: columnName,\n\t\t\ttype: EntityPropertyType.IDENTITY,\n\t\t\tlength: [],\n\t\t\tnotNull,\n\t\t\tunique\n\t\t};\n\n\t}\n\n\tprivate createForeignKeyConstraint(outputTableName: string, reference: TableReferenceDescriptor) {\n\n\t\tconst outputColumnName = this.columnNameCaseConverter.convertCase(reference.columnName);\n\n\t\tconst outputTargetTableName = this.tableNameCaseConverter.convertCase(reference.targetTableName);\n\t\tconst outputTargetColumnName = this.columnNameCaseConverter.convertCase(reference.targetTableIdentityColumnName);\n\n\t\treturn `CONSTRAINT \\`${outputTableName}_${outputColumnName}_fk\\` FOREIGN KEY (\\`${outputColumnName}\\`)`\n\t\t\t\t+ ` REFERENCES \\`${outputTargetTableName}\\` (\\`${outputTargetColumnName}\\`)`;\n\n\t}\n\n}\n","import {EntityPropertyType} from '@/erdiagram/parser/types/entity-relationship-model-types';\nimport CaseConverter from '@/erdiagram/converter/common/case-format/CaseConverter';\nimport {IdColumnCode} from '@/erdiagram/converter/database/code-converter/sql/dialect/common/sql-script-types';\nimport SqlIdColumnCodeGenerator\n\tfrom '@/erdiagram/converter/database/code-converter/sql/dialect/common/column/SqlIdColumnCodeGenerator';\nimport SqlTypeResolver from '@/erdiagram/converter/database/code-converter/sql/dialect/common/SqlTypeResolver';\n\nexport default class MysqlIdColumnCodeGenerator implements SqlIdColumnCodeGenerator {\n\n\tconstructor(\n\t\t\tprivate readonly typeResolver: SqlTypeResolver,\n\t\t\tprivate readonly columnNameCaseConverter: CaseConverter\n\t) {\n\n\t}\n\n\tpublic generateIdColumnCode(outputTableName: string, identityColumnName: string): IdColumnCode {\n\n\t\tconst outputIdentityColumnName = this.columnNameCaseConverter.convertCase(identityColumnName);\n\n\t\treturn {\n\t\t\tcolumnLine: this.generateIdColumnDeclarationLine(outputIdentityColumnName),\n\t\t\tpkConstraintLine: this.createPrimaryKeyConstraint(outputTableName, outputIdentityColumnName)\n\t\t};\n\n\t}\n\n\tprivate generateIdColumnDeclarationLine(outputIdentityColumnName: string): string {\n\t\tconst sqlType = this.typeResolver.resolveSqlType(EntityPropertyType.IDENTITY);\n\t\treturn `\\`${outputIdentityColumnName}\\` ${sqlType} NOT NULL AUTO_INCREMENT`;\n\t}\n\n\tprivate createPrimaryKeyConstraint(outputTableName: string, outputIdentityColumnName: string) {\n\t\treturn `CONSTRAINT \\`${outputTableName}_pk\\` PRIMARY KEY (\\`${outputIdentityColumnName}\\`)`;\n\t}\n\n}\n","import {EntityPropertyType} from '@/erdiagram/parser/types/entity-relationship-model-types';\nimport StandardCaseFormats from '@/erdiagram/converter/common/case-format/StandardCaseFormats';\nimport AbstractComponentConfigManager from '@/erdiagram/common/config/AbstractComponentConfigManager';\nimport MysqlDialectConfig\n\tfrom '@/erdiagram/converter/database/code-converter/sql/dialect/mysql/config/MysqlDialectConfig';\nimport {findKeyFromValue, findValueFromNullableKey} from '@/erdiagram/util/record-utils';\nimport MysqlDialectSerializableConfig\n\tfrom '@/erdiagram/converter/database/code-converter/sql/dialect/mysql/config/MysqlDialectSerializableConfig';\n\nexport class MysqlDialectConfigManager\n\t\textends AbstractComponentConfigManager<MysqlDialectConfig, Partial<MysqlDialectConfig>, MysqlDialectSerializableConfig> {\n\n\tgetDefaultConfig(): MysqlDialectConfig {\n\t\treturn {\n\t\t\ttypeBindings: {\n\t\t\t\t[EntityPropertyType.IDENTITY]: 'BIGINT',\n\t\t\t\t[EntityPropertyType.TEXT]: 'VARCHAR',\n\t\t\t\t[EntityPropertyType.LONG]: 'BIGINT',\n\t\t\t\t[EntityPropertyType.INT]: 'INT',\n\t\t\t\t[EntityPropertyType.SHORT]: 'SHORT',\n\t\t\t\t[EntityPropertyType.DECIMAL]: 'DECIMAL',\n\t\t\t\t[EntityPropertyType.BOOLEAN]: 'BOOLEAN',\n\t\t\t\t[EntityPropertyType.DATE]: 'DATE',\n\t\t\t\t[EntityPropertyType.TIME]: 'TIME',\n\t\t\t\t[EntityPropertyType.DATETIME]: 'TIMESTAMP',\n\t\t\t\t[EntityPropertyType.BLOB]: 'BLOB'\n\t\t\t},\n\t\t\ttableNameCaseFormat: StandardCaseFormats.UPPER_CAMEL,\n\t\t\tcolumnNameCaseFormat: StandardCaseFormats.LOWER_CAMEL,\n\t\t};\n\t}\n\n\tmergeConfigs(fullConfig: MysqlDialectConfig, partialConfig?: Partial<MysqlDialectConfig>): MysqlDialectConfig {\n\t\treturn {\n\t\t\t...fullConfig,\n\t\t\t...partialConfig,\n\t\t\ttypeBindings: {\n\t\t\t\t...fullConfig.typeBindings,\n\t\t\t\t...partialConfig?.typeBindings\n\t\t\t}\n\t\t};\n\t}\n\n\tconvertToSerializableObject(fullConfig: MysqlDialectConfig): MysqlDialectSerializableConfig {\n\t\treturn {\n\t\t\t...fullConfig,\n\t\t\ttableNameCaseFormat: findKeyFromValue(StandardCaseFormats, fullConfig.tableNameCaseFormat),\n\t\t\tcolumnNameCaseFormat: findKeyFromValue(StandardCaseFormats, fullConfig.columnNameCaseFormat),\n\t\t};\n\t}\n\n\tconvertFromSerializableObject(serializableConfig: MysqlDialectSerializableConfig): MysqlDialectConfig {\n\t\treturn {\n\t\t\t...serializableConfig,\n\t\t\ttableNameCaseFormat: findValueFromNullableKey(StandardCaseFormats, serializableConfig.tableNameCaseFormat, StandardCaseFormats.UPPER_CAMEL),\n\t\t\tcolumnNameCaseFormat: findValueFromNullableKey(StandardCaseFormats, serializableConfig.columnNameCaseFormat, StandardCaseFormats.UPPER_CAMEL),\n\t\t};\n\t}\n\n}\n\nconst mysqlDialectConfigManager = new MysqlDialectConfigManager();\nexport default mysqlDialectConfigManager;\n","import MysqlDialectConfig from './MysqlDialectConfig';\nimport MysqlDialectSerializableConfig from './MysqlDialectSerializableConfig';\nimport mysqlDialectConfigManager, {MysqlDialectConfigManager} from './MysqlDialectConfigManager';\n\nexport {\n\tMysqlDialectConfig,\n\tMysqlDialectSerializableConfig,\n\tMysqlDialectConfigManager,\n\tmysqlDialectConfigManager\n};\n","import MysqlDialect from '@/erdiagram/converter/database/code-converter/sql/dialect/mysql/MysqlDialect';\n\nexport * from './config/exports';\n\nexport {\n\tMysqlDialect\n};\n","import SqlDialect from '@/erdiagram/converter/database/code-converter/sql/dialect/common/SqlDialect';\nimport CaseConverter from '@/erdiagram/converter/common/case-format/CaseConverter';\nimport OracleColumnCodeGenerator\n\tfrom '@/erdiagram/converter/database/code-converter/sql/dialect/oracle/column/OracleColumnCodeGenerator';\nimport OracleIdColumnCodeGenerator\n\tfrom '@/erdiagram/converter/database/code-converter/sql/dialect/oracle/column/OracleIdColumnCodeGenerator';\nimport OracleForeignColumnCodeGenerator\n\tfrom '@/erdiagram/converter/database/code-converter/sql/dialect/oracle/column/OracleForeignColumnCodeGenerator';\nimport OracleDialectConfig\n\tfrom '@/erdiagram/converter/database/code-converter/sql/dialect/oracle/config/OracleDialectConfig';\nimport oracleDialectConfigManager\n\tfrom '@/erdiagram/converter/database/code-converter/sql/dialect/oracle/config/OracleDialectConfigManager';\nimport StandardCaseFormats from '@/erdiagram/converter/common/case-format/StandardCaseFormats';\nimport SqlTypeResolver from '@/erdiagram/converter/database/code-converter/sql/dialect/common/SqlTypeResolver';\nimport {\n\tForeignKeyColumnCode,\n\tIdColumnCode,\n\tRegularColumnCode\n} from '@/erdiagram/converter/database/code-converter/sql/dialect/common/sql-script-types';\nimport {\n\tTableColumnDescriptor,\n\tTableReferenceDescriptor\n} from '@/erdiagram/converter/database/model/database-model-types';\n\nexport default class OracleDialect implements SqlDialect {\n\n\tprivate readonly tableNameCaseConverter: CaseConverter;\n\n\tprivate readonly columnCodeGenerator: OracleColumnCodeGenerator;\n\tprivate readonly idColumnCodeGenerator: OracleIdColumnCodeGenerator;\n\tprivate readonly foreignColumnCodeGenerator: OracleForeignColumnCodeGenerator;\n\n\tconstructor(config?: Partial<OracleDialectConfig>) {\n\n\t\tconst fullConfig = oracleDialectConfigManager.mergeWithDefaultConfig(config);\n\n\t\tthis.tableNameCaseConverter = new CaseConverter(\n\t\t\t\tStandardCaseFormats.LOWER_CAMEL,\n\t\t\t\tfullConfig.tableNameCaseFormat\n\t\t);\n\n\t\tconst columnNameCaseConverter = new CaseConverter(\n\t\t\t\tStandardCaseFormats.LOWER_CAMEL,\n\t\t\t\tfullConfig.columnNameCaseFormat\n\t\t);\n\n\t\tconst sqlTypeResolver = new SqlTypeResolver(fullConfig.typeBindings);\n\n\t\tthis.columnCodeGenerator = new OracleColumnCodeGenerator(\n\t\t\t\tsqlTypeResolver,\n\t\t\t\tcolumnNameCaseConverter\n\t\t);\n\n\t\tthis.idColumnCodeGenerator = new OracleIdColumnCodeGenerator(\n\t\t\t\tsqlTypeResolver,\n\t\t\t\tcolumnNameCaseConverter\n\t\t);\n\n\t\tthis.foreignColumnCodeGenerator = new OracleForeignColumnCodeGenerator(\n\t\t\t\tthis.columnCodeGenerator,\n\t\t\t\tthis.tableNameCaseConverter,\n\t\t\t\tcolumnNameCaseConverter\n\t\t);\n\n\t}\n\n\tgetScriptStartCode() {\n\t\treturn '';\n\t}\n\n\tgetScriptEndCode() {\n\t\treturn '';\n\t}\n\n\tmustUseAlterTableForForeignKeys(): boolean {\n\t\treturn true;\n\t}\n\n\tgetCreateTableStartCode(tableName: string) {\n\t\tconst outputTableName = this.tableNameCaseConverter.convertCase(tableName);\n\t\treturn `CREATE TABLE \"${outputTableName}\" (`;\n\t}\n\n\tgetCreateTableEndCode() {\n\t\treturn ');';\n\t}\n\n\tgetIdColumnCode(tableName: string, identityColumnName: string): IdColumnCode {\n\t\tconst outputTableName = this.tableNameCaseConverter.convertCase(tableName);\n\t\treturn this.idColumnCodeGenerator.generateIdColumnCode(outputTableName, identityColumnName);\n\t}\n\n\tgetColumnCode(tableName: string, column: TableColumnDescriptor): RegularColumnCode {\n\t\tconst outputTableName = this.tableNameCaseConverter.convertCase(tableName);\n\t\treturn this.columnCodeGenerator.generateColumnCode(outputTableName, column);\n\t}\n\n\tgetForeignColumnCode(tableName: string, reference: TableReferenceDescriptor): ForeignKeyColumnCode {\n\t\tconst outputTableName = this.tableNameCaseConverter.convertCase(tableName);\n\t\treturn this.foreignColumnCodeGenerator.generateForeignColumnCode(outputTableName, reference);\n\t}\n\n\tgetAlterTableAddCode(tableName: string, constraintCode: string) {\n\t\tconst outputTableName = this.tableNameCaseConverter.convertCase(tableName);\n\t\treturn `ALTER TABLE \"${outputTableName}\" ADD ${constraintCode};`;\n\t}\n\n}\n","import {EntityPropertyType} from '@/erdiagram/parser/types/entity-relationship-model-types';\nimport {TableColumnDescriptor} from '@/erdiagram/converter/database/model/database-model-types';\nimport CaseConverter from '@/erdiagram/converter/common/case-format/CaseConverter';\nimport SqlTypeResolver from '@/erdiagram/converter/database/code-converter/sql/dialect/common/SqlTypeResolver';\nimport {RegularColumnCode} from '@/erdiagram/converter/database/code-converter/sql/dialect/common/sql-script-types';\nimport SqlColumnCodeGenerator\n\tfrom '@/erdiagram/converter/database/code-converter/sql/dialect/common/column/SqlColumnCodeGenerator';\n\nexport default class OracleColumnCodeGenerator implements SqlColumnCodeGenerator {\n\n\tconstructor(\n\t\t\tprivate readonly typeResolver: SqlTypeResolver,\n\t\t\tprivate readonly columnNameCaseConverter: CaseConverter\n\t) {\n\n\t}\n\n\tpublic generateColumnCode(outputTableName: string, column: TableColumnDescriptor): RegularColumnCode {\n\n\t\tconst outputColumnName = this.columnNameCaseConverter.convertCase(column.name);\n\n\t\treturn {\n\t\t\tcolumnLine: this.generateColumnDeclarationLine(outputColumnName, column),\n\t\t\tuniqueConstraintLine: column.unique ? this.generateUniqueConstraintLine(outputTableName, outputColumnName) : undefined\n\t\t};\n\n\t}\n\n\tprivate generateColumnDeclarationLine(outputColumnName: string, column: TableColumnDescriptor): string {\n\n\t\tconst {\n\t\t\tnotNull,\n\t\t\ttype,\n\t\t\tlength\n\t\t} = column;\n\n\t\tconst lineParts: string[] = [\n\t\t\t`\"${outputColumnName}\"`,\n\t\t\tthis.generateOracleTypeDeclaration(type, length)\n\t\t];\n\n\t\tif (notNull) {\n\t\t\tlineParts.push('NOT NULL');\n\t\t}\n\n\t\treturn lineParts.join(' ');\n\n\t}\n\n\tprivate generateOracleTypeDeclaration(type: EntityPropertyType, length: number[]) {\n\n\t\tconst oracleType = this.typeResolver.resolveSqlType(type);\n\t\tconst lengthCode = this.generateLengthCode(length);\n\n\t\treturn oracleType + lengthCode;\n\n\t}\n\n\tprivate generateLengthCode(length: number[]): string {\n\n\t\tif (length.length === 0) {\n\t\t\treturn '';\n\t\t}\n\n\t\treturn `(${length.join(', ')})`;\n\n\t}\n\n\tprivate generateUniqueConstraintLine(outputTableName: string, outputColumnName: string) {\n\t\treturn `CONSTRAINT \"${outputTableName}_${outputColumnName}_UNIQUE\" UNIQUE (\"${outputColumnName}\")`;\n\t}\n\n}\n","import {EntityPropertyType} from '@/erdiagram/parser/types/entity-relationship-model-types';\nimport {\n\tTableColumnDescriptor,\n\tTableReferenceDescriptor\n} from '@/erdiagram/converter/database/model/database-model-types';\nimport OracleColumnCodeGenerator\n\tfrom '@/erdiagram/converter/database/code-converter/sql/dialect/oracle/column/OracleColumnCodeGenerator';\nimport CaseConverter from '@/erdiagram/converter/common/case-format/CaseConverter';\nimport {ForeignKeyColumnCode} from '@/erdiagram/converter/database/code-converter/sql/dialect/common/sql-script-types';\nimport SqlForeignColumnCodeGenerator\n\tfrom '@/erdiagram/converter/database/code-converter/sql/dialect/common/column/SqlForeignColumnCodeGenerator';\n\nexport default class OracleForeignColumnCodeGenerator implements SqlForeignColumnCodeGenerator {\n\n\tconstructor(\n\t\t\tprivate readonly columnCodeGenerator: OracleColumnCodeGenerator,\n\t\t\tprivate readonly tableNameCaseConverter: CaseConverter,\n\t\t\tprivate readonly columnNameCaseConverter: CaseConverter\n\t) {\n\n\t}\n\n\tpublic generateForeignColumnCode(outputTableName: string, reference: TableReferenceDescriptor): ForeignKeyColumnCode {\n\n\t\tconst columnDescriptor = this.createForeignKeyColumnDescriptor(reference);\n\n\t\tconst {\n\t\t\tcolumnLine,\n\t\t\tuniqueConstraintLine\n\t\t} = this.columnCodeGenerator.generateColumnCode(outputTableName, columnDescriptor);\n\n\t\treturn {\n\t\t\tcolumnLine,\n\t\t\tuniqueConstraintLine,\n\t\t\tfkConstraintLine: this.createForeignKeyConstraint(outputTableName, reference)\n\t\t};\n\n\t}\n\n\tprivate createForeignKeyColumnDescriptor(reference: TableReferenceDescriptor): TableColumnDescriptor {\n\n\t\tconst {\n\t\t\tcolumnName,\n\t\t\tnotNull,\n\t\t\tunique\n\t\t} = reference;\n\n\t\treturn {\n\t\t\tname: columnName,\n\t\t\ttype: EntityPropertyType.IDENTITY,\n\t\t\tlength: [],\n\t\t\tnotNull,\n\t\t\tunique\n\t\t};\n\n\t}\n\n\tprivate createForeignKeyConstraint(outputTableName: string, reference: TableReferenceDescriptor) {\n\n\t\tconst outputColumnName = this.columnNameCaseConverter.convertCase(reference.columnName);\n\n\t\tconst outputTargetTableName = this.tableNameCaseConverter.convertCase(reference.targetTableName);\n\t\tconst outputTargetColumnName = this.columnNameCaseConverter.convertCase(reference.targetTableIdentityColumnName);\n\n\t\treturn `CONSTRAINT \"${outputTableName}_${outputColumnName}_FK\" FOREIGN KEY (\"${outputColumnName}\")`\n\t\t\t\t+ ` REFERENCES \"${outputTargetTableName}\" (\"${outputTargetColumnName}\")`;\n\n\t}\n\n}\n","import {EntityPropertyType} from '@/erdiagram/parser/types/entity-relationship-model-types';\nimport CaseConverter from '@/erdiagram/converter/common/case-format/CaseConverter';\nimport {IdColumnCode} from '@/erdiagram/converter/database/code-converter/sql/dialect/common/sql-script-types';\nimport SqlIdColumnCodeGenerator\n\tfrom '@/erdiagram/converter/database/code-converter/sql/dialect/common/column/SqlIdColumnCodeGenerator';\nimport SqlTypeResolver from '@/erdiagram/converter/database/code-converter/sql/dialect/common/SqlTypeResolver';\n\nexport default class OracleIdColumnCodeGenerator implements SqlIdColumnCodeGenerator {\n\n\tconstructor(\n\t\t\tprivate readonly typeResolver: SqlTypeResolver,\n\t\t\tprivate readonly columnNameCaseConverter: CaseConverter\n\t) {\n\n\t}\n\n\tpublic generateIdColumnCode(outputTableName: string, identityColumnName: string): IdColumnCode {\n\n\t\tconst outputIdentityColumnName = this.columnNameCaseConverter.convertCase(identityColumnName);\n\n\t\tconst sequenceName = this.getSequenceName(outputTableName);\n\n\t\treturn {\n\t\t\tcreateSequenceLine: this.generateCreateSequenceLine(sequenceName),\n\t\t\tcolumnLine: this.generateIdColumnDeclarationLine(outputIdentityColumnName, sequenceName),\n\t\t\tpkConstraintLine: this.createPrimaryKeyConstraint(outputTableName, outputIdentityColumnName)\n\t\t};\n\n\t}\n\n\tprivate getSequenceName(outputTableName: string): string {\n\t\treturn `${outputTableName}_SEQ`;\n\t}\n\n\tprivate generateCreateSequenceLine(sequenceName: string): string {\n\t\treturn `CREATE SEQUENCE \"${sequenceName}\" START WITH 1;`;\n\t}\n\n\tprivate generateIdColumnDeclarationLine(outputIdentityColumnName: string, sequenceName: string): string {\n\t\tconst sqlType = this.typeResolver.resolveSqlType(EntityPropertyType.IDENTITY);\n\t\treturn `\"${outputIdentityColumnName}\" ${sqlType} NOT NULL DEFAULT \"${sequenceName}\".nextval`;\n\t}\n\n\tprivate createPrimaryKeyConstraint(outputTableName: string, outputIdentityColumnName: string) {\n\t\treturn `CONSTRAINT \"${outputTableName}_PK\" PRIMARY KEY (\"${outputIdentityColumnName}\")`;\n\t}\n\n}\n","import {EntityPropertyType} from '@/erdiagram/parser/types/entity-relationship-model-types';\nimport StandardCaseFormats from '@/erdiagram/converter/common/case-format/StandardCaseFormats';\nimport AbstractComponentConfigManager from '@/erdiagram/common/config/AbstractComponentConfigManager';\nimport OracleDialectConfig\n\tfrom '@/erdiagram/converter/database/code-converter/sql/dialect/oracle/config/OracleDialectConfig';\nimport OracleDialectSerializableConfig\n\tfrom '@/erdiagram/converter/database/code-converter/sql/dialect/oracle/config/OracleDialectSerializableConfig';\nimport {findKeyFromValue, findValueFromNullableKey} from '@/erdiagram/util/record-utils';\n\nexport class OracleDialectConfigManager\n\t\textends AbstractComponentConfigManager<OracleDialectConfig, Partial<OracleDialectConfig>, OracleDialectSerializableConfig> {\n\n\tgetDefaultConfig(): OracleDialectConfig {\n\t\treturn {\n\t\t\ttypeBindings: {\n\t\t\t\t[EntityPropertyType.IDENTITY]: 'NUMBER',\n\t\t\t\t[EntityPropertyType.TEXT]: 'VARCHAR2',\n\t\t\t\t[EntityPropertyType.LONG]: 'NUMBER',\n\t\t\t\t[EntityPropertyType.INT]: 'NUMBER',\n\t\t\t\t[EntityPropertyType.SHORT]: 'NUMBER',\n\t\t\t\t[EntityPropertyType.DECIMAL]: 'NUMBER',\n\t\t\t\t[EntityPropertyType.BOOLEAN]: 'NUMBER(1, 0)',\n\t\t\t\t[EntityPropertyType.DATE]: 'DATE',\n\t\t\t\t[EntityPropertyType.TIME]: 'TIMESTAMP',\n\t\t\t\t[EntityPropertyType.DATETIME]: 'TIMESTAMP',\n\t\t\t\t[EntityPropertyType.BLOB]: 'BLOB'\n\t\t\t},\n\t\t\ttableNameCaseFormat: StandardCaseFormats.UPPER_UNDERSCORE,\n\t\t\tcolumnNameCaseFormat: StandardCaseFormats.UPPER_UNDERSCORE,\n\t\t};\n\t}\n\n\tmergeConfigs(fullConfig: OracleDialectConfig, partialConfig?: Partial<OracleDialectConfig>): OracleDialectConfig {\n\t\treturn {\n\t\t\t...fullConfig,\n\t\t\t...partialConfig,\n\t\t\ttypeBindings: {\n\t\t\t\t...fullConfig.typeBindings,\n\t\t\t\t...partialConfig?.typeBindings\n\t\t\t}\n\t\t};\n\t}\n\n\tconvertToSerializableObject(fullConfig: OracleDialectConfig): OracleDialectSerializableConfig {\n\t\treturn {\n\t\t\t...fullConfig,\n\t\t\ttableNameCaseFormat: findKeyFromValue(StandardCaseFormats, fullConfig.tableNameCaseFormat),\n\t\t\tcolumnNameCaseFormat: findKeyFromValue(StandardCaseFormats, fullConfig.columnNameCaseFormat),\n\t\t};\n\t}\n\n\tconvertFromSerializableObject(serializableConfig: OracleDialectSerializableConfig): OracleDialectConfig {\n\t\treturn {\n\t\t\t...serializableConfig,\n\t\t\ttableNameCaseFormat: findValueFromNullableKey(StandardCaseFormats, serializableConfig.tableNameCaseFormat, StandardCaseFormats.UPPER_CAMEL),\n\t\t\tcolumnNameCaseFormat: findValueFromNullableKey(StandardCaseFormats, serializableConfig.columnNameCaseFormat, StandardCaseFormats.UPPER_CAMEL),\n\t\t};\n\t}\n\n}\n\nconst oracleDialectConfigManager = new OracleDialectConfigManager();\nexport default oracleDialectConfigManager;\n","import OracleDialectConfig from './OracleDialectConfig';\nimport OracleDialectSerializableConfig from './OracleDialectSerializableConfig';\nimport oracleDialectConfigManager, {OracleDialectConfigManager} from './OracleDialectConfigManager';\n\nexport {\n\tOracleDialectConfig,\n\tOracleDialectSerializableConfig,\n\tOracleDialectConfigManager,\n\toracleDialectConfigManager\n};\n","import OracleDialect from '@/erdiagram/converter/database/code-converter/sql/dialect/oracle/OracleDialect';\n\nexport * from './config/exports';\n\nexport {\n\tOracleDialect\n};\n","import SqlDialect from '@/erdiagram/converter/database/code-converter/sql/dialect/common/SqlDialect';\nimport CaseConverter from '@/erdiagram/converter/common/case-format/CaseConverter';\nimport StandardCaseFormats from '@/erdiagram/converter/common/case-format/StandardCaseFormats';\nimport SqlTypeResolver from '@/erdiagram/converter/database/code-converter/sql/dialect/common/SqlTypeResolver';\nimport {\n\tForeignKeyColumnCode,\n\tIdColumnCode,\n\tRegularColumnCode\n} from '@/erdiagram/converter/database/code-converter/sql/dialect/common/sql-script-types';\nimport {\n\tTableColumnDescriptor,\n\tTableReferenceDescriptor\n} from '@/erdiagram/converter/database/model/database-model-types';\nimport PostgresqlColumnCodeGenerator\n\tfrom '@/erdiagram/converter/database/code-converter/sql/dialect/postgresql/column/PostgresqlColumnCodeGenerator';\nimport PostgresqlIdColumnCodeGenerator\n\tfrom '@/erdiagram/converter/database/code-converter/sql/dialect/postgresql/column/PostgresqlIdColumnCodeGenerator';\nimport PostgresqlForeignColumnCodeGenerator\n\tfrom '@/erdiagram/converter/database/code-converter/sql/dialect/postgresql/column/PostgresqlForeignColumnCodeGenerator';\nimport PostgresqlDialectConfig\n\tfrom '@/erdiagram/converter/database/code-converter/sql/dialect/postgresql/config/PostgresqlDialectConfig';\nimport postgresqlDialectConfigManager\n\tfrom '@/erdiagram/converter/database/code-converter/sql/dialect/postgresql/config/PostgresqlDialectConfigManager';\n\nexport default class PostgresqlDialect implements SqlDialect {\n\n\tprivate readonly tableNameCaseConverter: CaseConverter;\n\n\tprivate readonly columnCodeGenerator: PostgresqlColumnCodeGenerator;\n\tprivate readonly idColumnCodeGenerator: PostgresqlIdColumnCodeGenerator;\n\tprivate readonly foreignColumnCodeGenerator: PostgresqlForeignColumnCodeGenerator;\n\n\tconstructor(config?: Partial<PostgresqlDialectConfig>) {\n\n\t\tconst fullConfig = postgresqlDialectConfigManager.mergeWithDefaultConfig(config);\n\n\t\tthis.tableNameCaseConverter = new CaseConverter(\n\t\t\t\tStandardCaseFormats.LOWER_CAMEL,\n\t\t\t\tfullConfig.tableNameCaseFormat\n\t\t);\n\n\t\tconst columnNameCaseConverter = new CaseConverter(\n\t\t\t\tStandardCaseFormats.LOWER_CAMEL,\n\t\t\t\tfullConfig.columnNameCaseFormat\n\t\t);\n\n\t\tconst sqlTypeResolver = new SqlTypeResolver(fullConfig.typeBindings);\n\n\t\tthis.columnCodeGenerator = new PostgresqlColumnCodeGenerator(\n\t\t\t\tsqlTypeResolver,\n\t\t\t\tcolumnNameCaseConverter\n\t\t);\n\n\t\tthis.idColumnCodeGenerator = new PostgresqlIdColumnCodeGenerator(\n\t\t\t\tsqlTypeResolver,\n\t\t\t\tcolumnNameCaseConverter\n\t\t);\n\n\t\tthis.foreignColumnCodeGenerator = new PostgresqlForeignColumnCodeGenerator(\n\t\t\t\tthis.columnCodeGenerator,\n\t\t\t\tthis.tableNameCaseConverter,\n\t\t\t\tcolumnNameCaseConverter\n\t\t);\n\n\t}\n\n\tgetScriptStartCode() {\n\t\treturn '';\n\t}\n\n\tgetScriptEndCode() {\n\t\treturn '';\n\t}\n\n\tmustUseAlterTableForForeignKeys(): boolean {\n\t\treturn true;\n\t}\n\n\tgetCreateTableStartCode(tableName: string) {\n\t\tconst outputTableName = this.tableNameCaseConverter.convertCase(tableName);\n\t\treturn `CREATE TABLE \"${outputTableName}\" (`;\n\t}\n\n\tgetCreateTableEndCode() {\n\t\treturn ');';\n\t}\n\n\tgetIdColumnCode(tableName: string, identityColumnName: string): IdColumnCode {\n\t\tconst outputTableName = this.tableNameCaseConverter.convertCase(tableName);\n\t\treturn this.idColumnCodeGenerator.generateIdColumnCode(outputTableName, identityColumnName);\n\t}\n\n\tgetColumnCode(tableName: string, column: TableColumnDescriptor): RegularColumnCode {\n\t\tconst outputTableName = this.tableNameCaseConverter.convertCase(tableName);\n\t\treturn this.columnCodeGenerator.generateColumnCode(outputTableName, column);\n\t}\n\n\tgetForeignColumnCode(tableName: string, reference: TableReferenceDescriptor): ForeignKeyColumnCode {\n\t\tconst outputTableName = this.tableNameCaseConverter.convertCase(tableName);\n\t\treturn this.foreignColumnCodeGenerator.generateForeignColumnCode(outputTableName, reference);\n\t}\n\n\tgetAlterTableAddCode(tableName: string, constraintCode: string) {\n\t\tconst outputTableName = this.tableNameCaseConverter.convertCase(tableName);\n\t\treturn `ALTER TABLE \"${outputTableName}\" ADD ${constraintCode};`;\n\t}\n\n}\n","import {EntityPropertyType} from '@/erdiagram/parser/types/entity-relationship-model-types';\nimport {TableColumnDescriptor} from '@/erdiagram/converter/database/model/database-model-types';\nimport CaseConverter from '@/erdiagram/converter/common/case-format/CaseConverter';\nimport SqlTypeResolver from '@/erdiagram/converter/database/code-converter/sql/dialect/common/SqlTypeResolver';\nimport {RegularColumnCode} from '@/erdiagram/converter/database/code-converter/sql/dialect/common/sql-script-types';\nimport SqlColumnCodeGenerator\n\tfrom '@/erdiagram/converter/database/code-converter/sql/dialect/common/column/SqlColumnCodeGenerator';\n\nexport default class PostgresqlColumnCodeGenerator implements SqlColumnCodeGenerator {\n\n\tconstructor(\n\t\t\tprivate readonly typeResolver: SqlTypeResolver,\n\t\t\tprivate readonly columnNameCaseConverter: CaseConverter\n\t) {\n\n\t}\n\n\tpublic generateColumnCode(outputTableName: string, column: TableColumnDescriptor): RegularColumnCode {\n\n\t\tconst outputColumnName = this.columnNameCaseConverter.convertCase(column.name);\n\n\t\treturn {\n\t\t\tcolumnLine: this.generateColumnDeclarationLine(outputColumnName, column),\n\t\t\tuniqueConstraintLine: column.unique ? this.generateUniqueConstraintLine(outputTableName, outputColumnName) : undefined\n\t\t};\n\n\t}\n\n\tprivate generateColumnDeclarationLine(outputColumnName: string, column: TableColumnDescriptor): string {\n\n\t\tconst {\n\t\t\tnotNull,\n\t\t\ttype,\n\t\t\tlength\n\t\t} = column;\n\n\t\tconst lineParts: string[] = [\n\t\t\t`\"${outputColumnName}\"`,\n\t\t\tthis.generatePostgresqlTypeDeclaration(type, length)\n\t\t];\n\n\t\tif (notNull) {\n\t\t\tlineParts.push('NOT NULL');\n\t\t}\n\n\t\treturn lineParts.join(' ');\n\n\t}\n\n\tprivate generatePostgresqlTypeDeclaration(type: EntityPropertyType, length: number[]) {\n\n\t\tconst postgresqlType = this.typeResolver.resolveSqlType(type);\n\t\tconst lengthCode = this.generateLengthCode(length);\n\n\t\treturn postgresqlType + lengthCode;\n\n\t}\n\n\tprivate generateLengthCode(length: number[]): string {\n\n\t\tif (length.length === 0) {\n\t\t\treturn '';\n\t\t}\n\n\t\treturn `(${length.join(', ')})`;\n\n\t}\n\n\tprivate generateUniqueConstraintLine(outputTableName: string, outputColumnName: string) {\n\t\treturn `CONSTRAINT \"${outputTableName}_${outputColumnName}_unique\" UNIQUE (\"${outputColumnName}\")`;\n\t}\n\n}\n","import {EntityPropertyType} from '@/erdiagram/parser/types/entity-relationship-model-types';\nimport {\n\tTableColumnDescriptor,\n\tTableReferenceDescriptor\n} from '@/erdiagram/converter/database/model/database-model-types';\nimport PostgresqlColumnCodeGenerator\n\tfrom '@/erdiagram/converter/database/code-converter/sql/dialect/postgresql/column/PostgresqlColumnCodeGenerator';\nimport CaseConverter from '@/erdiagram/converter/common/case-format/CaseConverter';\nimport {ForeignKeyColumnCode} from '@/erdiagram/converter/database/code-converter/sql/dialect/common/sql-script-types';\nimport SqlForeignColumnCodeGenerator\n\tfrom '@/erdiagram/converter/database/code-converter/sql/dialect/common/column/SqlForeignColumnCodeGenerator';\n\nexport default class PostgresqlForeignColumnCodeGenerator implements SqlForeignColumnCodeGenerator {\n\n\tconstructor(\n\t\t\tprivate readonly columnCodeGenerator: PostgresqlColumnCodeGenerator,\n\t\t\tprivate readonly tableNameCaseConverter: CaseConverter,\n\t\t\tprivate readonly columnNameCaseConverter: CaseConverter\n\t) {\n\n\t}\n\n\tpublic generateForeignColumnCode(outputTableName: string, reference: TableReferenceDescriptor): ForeignKeyColumnCode {\n\n\t\tconst columnDescriptor = this.createForeignKeyColumnDescriptor(reference);\n\n\t\tconst {\n\t\t\tcolumnLine,\n\t\t\tuniqueConstraintLine\n\t\t} = this.columnCodeGenerator.generateColumnCode(outputTableName, columnDescriptor);\n\n\t\treturn {\n\t\t\tcolumnLine,\n\t\t\tuniqueConstraintLine,\n\t\t\tfkConstraintLine: this.createForeignKeyConstraint(outputTableName, reference)\n\t\t};\n\n\t}\n\n\tprivate createForeignKeyColumnDescriptor(reference: TableReferenceDescriptor): TableColumnDescriptor {\n\n\t\tconst {\n\t\t\tcolumnName,\n\t\t\tnotNull,\n\t\t\tunique\n\t\t} = reference;\n\n\t\treturn {\n\t\t\tname: columnName,\n\t\t\ttype: EntityPropertyType.IDENTITY,\n\t\t\tlength: [],\n\t\t\tnotNull,\n\t\t\tunique\n\t\t};\n\n\t}\n\n\tprivate createForeignKeyConstraint(outputTableName: string, reference: TableReferenceDescriptor) {\n\n\t\tconst outputColumnName = this.columnNameCaseConverter.convertCase(reference.columnName);\n\n\t\tconst outputTargetTableName = this.tableNameCaseConverter.convertCase(reference.targetTableName);\n\t\tconst outputTargetColumnName = this.columnNameCaseConverter.convertCase(reference.targetTableIdentityColumnName);\n\n\t\treturn `CONSTRAINT \"${outputTableName}_${outputColumnName}_fk\" FOREIGN KEY (\"${outputColumnName}\")`\n\t\t\t\t+ ` REFERENCES \"${outputTargetTableName}\" (\"${outputTargetColumnName}\")`;\n\n\t}\n\n}\n","import {EntityPropertyType} from '@/erdiagram/parser/types/entity-relationship-model-types';\nimport CaseConverter from '@/erdiagram/converter/common/case-format/CaseConverter';\nimport {IdColumnCode} from '@/erdiagram/converter/database/code-converter/sql/dialect/common/sql-script-types';\nimport SqlIdColumnCodeGenerator\n\tfrom '@/erdiagram/converter/database/code-converter/sql/dialect/common/column/SqlIdColumnCodeGenerator';\nimport SqlTypeResolver from '@/erdiagram/converter/database/code-converter/sql/dialect/common/SqlTypeResolver';\n\nexport default class PostgresqlIdColumnCodeGenerator implements SqlIdColumnCodeGenerator {\n\n\tconstructor(\n\t\t\tprivate readonly typeResolver: SqlTypeResolver,\n\t\t\tprivate readonly columnNameCaseConverter: CaseConverter\n\t) {\n\n\t}\n\n\tpublic generateIdColumnCode(outputTableName: string, identityColumnName: string): IdColumnCode {\n\n\t\tconst outputIdentityColumnName = this.columnNameCaseConverter.convertCase(identityColumnName);\n\n\t\treturn {\n\t\t\tcolumnLine: this.generateIdColumnDeclarationLine(outputIdentityColumnName),\n\t\t\tpkConstraintLine: this.createPrimaryKeyConstraint(outputTableName, outputIdentityColumnName)\n\t\t};\n\n\t}\n\n\tprivate generateIdColumnDeclarationLine(outputIdentityColumnName: string): string {\n\t\tconst sqlType = this.typeResolver.resolveSqlType(EntityPropertyType.IDENTITY);\n\t\treturn `\"${outputIdentityColumnName}\" ${sqlType} NOT NULL GENERATED ALWAYS AS IDENTITY`;\n\t}\n\n\tprivate createPrimaryKeyConstraint(outputTableName: string, outputIdentityColumnName: string) {\n\t\treturn `CONSTRAINT \"${outputTableName}_pk\" PRIMARY KEY (\"${outputIdentityColumnName}\")`;\n\t}\n\n}\n","import {EntityPropertyType} from '@/erdiagram/parser/types/entity-relationship-model-types';\nimport StandardCaseFormats from '@/erdiagram/converter/common/case-format/StandardCaseFormats';\nimport AbstractComponentConfigManager from '@/erdiagram/common/config/AbstractComponentConfigManager';\nimport PostgresqlDialectConfig\n\tfrom '@/erdiagram/converter/database/code-converter/sql/dialect/postgresql/config/PostgresqlDialectConfig';\nimport PostgresqlDialectSerializableConfig\n\tfrom '@/erdiagram/converter/database/code-converter/sql/dialect/postgresql/config/PostgresqlDialectSerializableConfig';\nimport {findKeyFromValue, findValueFromNullableKey} from '@/erdiagram/util/record-utils';\n\nexport class PostgresqlDialectConfigManager\n\t\textends AbstractComponentConfigManager<PostgresqlDialectConfig, Partial<PostgresqlDialectConfig>, PostgresqlDialectSerializableConfig> {\n\n\tgetDefaultConfig(): PostgresqlDialectConfig {\n\t\treturn {\n\t\t\ttypeBindings: {\n\t\t\t\t[EntityPropertyType.IDENTITY]: 'BIGINT',\n\t\t\t\t[EntityPropertyType.TEXT]: 'VARCHAR',\n\t\t\t\t[EntityPropertyType.LONG]: 'BIGINT',\n\t\t\t\t[EntityPropertyType.INT]: 'INTEGER',\n\t\t\t\t[EntityPropertyType.SHORT]: 'SMALLINT',\n\t\t\t\t[EntityPropertyType.DECIMAL]: 'DECIMAL',\n\t\t\t\t[EntityPropertyType.BOOLEAN]: 'BOOLEAN',\n\t\t\t\t[EntityPropertyType.DATE]: 'DATE',\n\t\t\t\t[EntityPropertyType.TIME]: 'TIME',\n\t\t\t\t[EntityPropertyType.DATETIME]: 'TIMESTAMP',\n\t\t\t\t[EntityPropertyType.BLOB]: 'BYTEA'\n\t\t\t},\n\t\t\ttableNameCaseFormat: StandardCaseFormats.LOWER_UNDERSCORE,\n\t\t\tcolumnNameCaseFormat: StandardCaseFormats.LOWER_UNDERSCORE,\n\t\t};\n\t}\n\n\tmergeConfigs(fullConfig: PostgresqlDialectConfig, partialConfig?: Partial<PostgresqlDialectConfig>): PostgresqlDialectConfig {\n\t\treturn {\n\t\t\t...fullConfig,\n\t\t\t...partialConfig,\n\t\t\ttypeBindings: {\n\t\t\t\t...fullConfig.typeBindings,\n\t\t\t\t...partialConfig?.typeBindings\n\t\t\t}\n\t\t};\n\t}\n\n\tconvertToSerializableObject(fullConfig: PostgresqlDialectConfig): PostgresqlDialectSerializableConfig {\n\t\treturn {\n\t\t\t...fullConfig,\n\t\t\ttableNameCaseFormat: findKeyFromValue(StandardCaseFormats, fullConfig.tableNameCaseFormat),\n\t\t\tcolumnNameCaseFormat: findKeyFromValue(StandardCaseFormats, fullConfig.columnNameCaseFormat),\n\t\t};\n\t}\n\n\tconvertFromSerializableObject(serializableConfig: PostgresqlDialectSerializableConfig): PostgresqlDialectConfig {\n\t\treturn {\n\t\t\t...serializableConfig,\n\t\t\ttableNameCaseFormat: findValueFromNullableKey(StandardCaseFormats, serializableConfig.tableNameCaseFormat, StandardCaseFormats.UPPER_CAMEL),\n\t\t\tcolumnNameCaseFormat: findValueFromNullableKey(StandardCaseFormats, serializableConfig.columnNameCaseFormat, StandardCaseFormats.UPPER_CAMEL),\n\t\t};\n\t}\n\n}\n\nconst postgresqlDialectConfigManager = new PostgresqlDialectConfigManager();\nexport default postgresqlDialectConfigManager;\n","import PostgresqlDialectConfig from './PostgresqlDialectConfig';\nimport PostgresqlDialectSerializableConfig from './PostgresqlDialectSerializableConfig';\nimport postgresqlDialectConfigManager, {PostgresqlDialectConfigManager} from './PostgresqlDialectConfigManager';\n\nexport {\n\tPostgresqlDialectConfig,\n\tPostgresqlDialectSerializableConfig,\n\tPostgresqlDialectConfigManager,\n\tpostgresqlDialectConfigManager\n};\n","import PostgresqlDialect from '@/erdiagram/converter/database/code-converter/sql/dialect/postgresql/PostgresqlDialect';\n\nexport * from './config/exports';\n\nexport {\n\tPostgresqlDialect\n};\n","import SqlDialect from '@/erdiagram/converter/database/code-converter/sql/dialect/common/SqlDialect';\nimport CaseConverter from '@/erdiagram/converter/common/case-format/CaseConverter';\nimport StandardCaseFormats from '@/erdiagram/converter/common/case-format/StandardCaseFormats';\nimport SqlTypeResolver from '@/erdiagram/converter/database/code-converter/sql/dialect/common/SqlTypeResolver';\nimport {\n\tForeignKeyColumnCode,\n\tIdColumnCode,\n\tRegularColumnCode\n} from '@/erdiagram/converter/database/code-converter/sql/dialect/common/sql-script-types';\nimport {\n\tTableColumnDescriptor,\n\tTableReferenceDescriptor\n} from '@/erdiagram/converter/database/model/database-model-types';\nimport SqliteColumnCodeGenerator\n\tfrom '@/erdiagram/converter/database/code-converter/sql/dialect/sqlite/column/SqliteColumnCodeGenerator';\nimport SqliteIdColumnCodeGenerator\n\tfrom '@/erdiagram/converter/database/code-converter/sql/dialect/sqlite/column/SqliteIdColumnCodeGenerator';\nimport SqliteForeignColumnCodeGenerator\n\tfrom '@/erdiagram/converter/database/code-converter/sql/dialect/sqlite/column/SqliteForeignColumnCodeGenerator';\nimport SqliteDialectConfig\n\tfrom '@/erdiagram/converter/database/code-converter/sql/dialect/sqlite/config/SqliteDialectConfig';\nimport sqliteDialectConfigManager\n\tfrom '@/erdiagram/converter/database/code-converter/sql/dialect/sqlite/config/SqliteDialectConfigManager';\n\nexport default class SqliteDialect implements SqlDialect {\n\n\tprivate readonly tableNameCaseConverter: CaseConverter;\n\n\tprivate readonly columnCodeGenerator: SqliteColumnCodeGenerator;\n\tprivate readonly idColumnCodeGenerator: SqliteIdColumnCodeGenerator;\n\tprivate readonly foreignColumnCodeGenerator: SqliteForeignColumnCodeGenerator;\n\n\tconstructor(config?: Partial<SqliteDialectConfig>) {\n\n\t\tconst fullConfig = sqliteDialectConfigManager.mergeWithDefaultConfig(config);\n\n\t\tthis.tableNameCaseConverter = new CaseConverter(\n\t\t\t\tStandardCaseFormats.LOWER_CAMEL,\n\t\t\t\tfullConfig.tableNameCaseFormat\n\t\t);\n\n\t\tconst columnNameCaseConverter = new CaseConverter(\n\t\t\t\tStandardCaseFormats.LOWER_CAMEL,\n\t\t\t\tfullConfig.columnNameCaseFormat\n\t\t);\n\n\t\tconst sqlTypeResolver = new SqlTypeResolver(fullConfig.typeBindings);\n\n\t\tthis.columnCodeGenerator = new SqliteColumnCodeGenerator(\n\t\t\t\tsqlTypeResolver,\n\t\t\t\tcolumnNameCaseConverter\n\t\t);\n\n\t\tthis.idColumnCodeGenerator = new SqliteIdColumnCodeGenerator(\n\t\t\t\tsqlTypeResolver,\n\t\t\t\tcolumnNameCaseConverter\n\t\t);\n\n\t\tthis.foreignColumnCodeGenerator = new SqliteForeignColumnCodeGenerator(\n\t\t\t\tthis.columnCodeGenerator,\n\t\t\t\tthis.tableNameCaseConverter,\n\t\t\t\tcolumnNameCaseConverter\n\t\t);\n\n\t}\n\n\tgetScriptStartCode() {\n\t\treturn 'PRAGMA foreign_keys = OFF;';\n\t}\n\n\tgetScriptEndCode() {\n\t\treturn 'PRAGMA foreign_keys = ON;';\n\t}\n\n\tmustUseAlterTableForForeignKeys(): boolean {\n\t\treturn false;\n\t}\n\n\tgetCreateTableStartCode(tableName: string) {\n\t\tconst outputTableName = this.tableNameCaseConverter.convertCase(tableName);\n\t\treturn `CREATE TABLE \"${outputTableName}\" (`;\n\t}\n\n\tgetCreateTableEndCode() {\n\t\treturn ');';\n\t}\n\n\tgetIdColumnCode(tableName: string, identityColumnName: string): IdColumnCode {\n\t\tconst outputTableName = this.tableNameCaseConverter.convertCase(tableName);\n\t\treturn this.idColumnCodeGenerator.generateIdColumnCode(outputTableName, identityColumnName);\n\t}\n\n\tgetColumnCode(tableName: string, column: TableColumnDescriptor): RegularColumnCode {\n\t\tconst outputTableName = this.tableNameCaseConverter.convertCase(tableName);\n\t\treturn this.columnCodeGenerator.generateColumnCode(outputTableName, column);\n\t}\n\n\tgetForeignColumnCode(tableName: string, reference: TableReferenceDescriptor): ForeignKeyColumnCode {\n\t\tconst outputTableName = this.tableNameCaseConverter.convertCase(tableName);\n\t\treturn this.foreignColumnCodeGenerator.generateForeignColumnCode(outputTableName, reference);\n\t}\n\n\t/* istanbul ignore next */\n\tgetAlterTableAddCode(tableName: string, constraintCode: string): string {\n\t\tthrow new Error('Unsupported feature');\n\t}\n\n}\n","import {EntityPropertyType} from '@/erdiagram/parser/types/entity-relationship-model-types';\nimport {TableColumnDescriptor} from '@/erdiagram/converter/database/model/database-model-types';\nimport CaseConverter from '@/erdiagram/converter/common/case-format/CaseConverter';\nimport SqlTypeResolver from '@/erdiagram/converter/database/code-converter/sql/dialect/common/SqlTypeResolver';\nimport {RegularColumnCode} from '@/erdiagram/converter/database/code-converter/sql/dialect/common/sql-script-types';\nimport SqlColumnCodeGenerator\n\tfrom '@/erdiagram/converter/database/code-converter/sql/dialect/common/column/SqlColumnCodeGenerator';\n\nexport default class SqliteColumnCodeGenerator implements SqlColumnCodeGenerator {\n\n\tconstructor(\n\t\t\tprivate readonly typeResolver: SqlTypeResolver,\n\t\t\tprivate readonly columnNameCaseConverter: CaseConverter\n\t) {\n\n\t}\n\n\tpublic generateColumnCode(outputTableName: string, column: TableColumnDescriptor): RegularColumnCode {\n\n\t\tconst outputColumnName = this.columnNameCaseConverter.convertCase(column.name);\n\n\t\treturn {\n\t\t\tcolumnLine: this.generateColumnDeclarationLine(outputColumnName, column),\n\t\t\tuniqueConstraintLine: column.unique ? this.generateUniqueConstraintLine(outputTableName, outputColumnName) : undefined\n\t\t};\n\n\t}\n\n\tprivate generateColumnDeclarationLine(outputColumnName: string, column: TableColumnDescriptor): string {\n\n\t\tconst {\n\t\t\tnotNull,\n\t\t\ttype,\n\t\t\tlength\n\t\t} = column;\n\n\t\tconst lineParts: string[] = [\n\t\t\t`\"${outputColumnName}\"`,\n\t\t\tthis.generateSqliteTypeDeclaration(type, length)\n\t\t];\n\n\t\tif (notNull) {\n\t\t\tlineParts.push('NOT NULL');\n\t\t}\n\n\t\treturn lineParts.join(' ');\n\n\t}\n\n\tprivate generateSqliteTypeDeclaration(type: EntityPropertyType, length: number[]) {\n\n\t\tconst sqliteType = this.typeResolver.resolveSqlType(type);\n\t\tconst lengthCode = this.generateLengthCode(length);\n\n\t\treturn sqliteType + lengthCode;\n\n\t}\n\n\tprivate generateLengthCode(length: number[]): string {\n\n\t\tif (length.length === 0) {\n\t\t\treturn '';\n\t\t}\n\n\t\treturn `(${length.join(', ')})`;\n\n\t}\n\n\tprivate generateUniqueConstraintLine(outputTableName: string, outputColumnName: string) {\n\t\treturn `CONSTRAINT \"${outputTableName}_${outputColumnName}_unique\" UNIQUE (\"${outputColumnName}\")`;\n\t}\n\n}\n","import {EntityPropertyType} from '@/erdiagram/parser/types/entity-relationship-model-types';\nimport {\n\tTableColumnDescriptor,\n\tTableReferenceDescriptor\n} from '@/erdiagram/converter/database/model/database-model-types';\nimport CaseConverter from '@/erdiagram/converter/common/case-format/CaseConverter';\nimport {ForeignKeyColumnCode} from '@/erdiagram/converter/database/code-converter/sql/dialect/common/sql-script-types';\nimport SqlForeignColumnCodeGenerator\n\tfrom '@/erdiagram/converter/database/code-converter/sql/dialect/common/column/SqlForeignColumnCodeGenerator';\nimport SqliteColumnCodeGenerator\n\tfrom '@/erdiagram/converter/database/code-converter/sql/dialect/sqlite/column/SqliteColumnCodeGenerator';\n\nexport default class SqliteForeignColumnCodeGenerator implements SqlForeignColumnCodeGenerator {\n\n\tconstructor(\n\t\t\tprivate readonly columnCodeGenerator: SqliteColumnCodeGenerator,\n\t\t\tprivate readonly tableNameCaseConverter: CaseConverter,\n\t\t\tprivate readonly columnNameCaseConverter: CaseConverter\n\t) {\n\n\t}\n\n\tpublic generateForeignColumnCode(outputTableName: string, reference: TableReferenceDescriptor): ForeignKeyColumnCode {\n\n\t\tconst columnDescriptor = this.createForeignKeyColumnDescriptor(reference);\n\n\t\tconst {\n\t\t\tcolumnLine,\n\t\t\tuniqueConstraintLine\n\t\t} = this.columnCodeGenerator.generateColumnCode(outputTableName, columnDescriptor);\n\n\t\treturn {\n\t\t\tcolumnLine,\n\t\t\tuniqueConstraintLine,\n\t\t\tfkConstraintLine: this.createForeignKeyConstraint(outputTableName, reference)\n\t\t};\n\n\t}\n\n\tprivate createForeignKeyColumnDescriptor(reference: TableReferenceDescriptor): TableColumnDescriptor {\n\n\t\tconst {\n\t\t\tcolumnName,\n\t\t\tnotNull,\n\t\t\tunique\n\t\t} = reference;\n\n\t\treturn {\n\t\t\tname: columnName,\n\t\t\ttype: EntityPropertyType.IDENTITY,\n\t\t\tlength: [],\n\t\t\tnotNull,\n\t\t\tunique\n\t\t};\n\n\t}\n\n\tprivate createForeignKeyConstraint(outputTableName: string, reference: TableReferenceDescriptor) {\n\n\t\tconst outputColumnName = this.columnNameCaseConverter.convertCase(reference.columnName);\n\n\t\tconst outputTargetTableName = this.tableNameCaseConverter.convertCase(reference.targetTableName);\n\t\tconst outputTargetColumnName = this.columnNameCaseConverter.convertCase(reference.targetTableIdentityColumnName);\n\n\t\treturn `CONSTRAINT \"${outputTableName}_${outputColumnName}_fk\" FOREIGN KEY (\"${outputColumnName}\")`\n\t\t\t\t+ ` REFERENCES \"${outputTargetTableName}\" (\"${outputTargetColumnName}\")`;\n\n\t}\n\n}\n","import {EntityPropertyType} from '@/erdiagram/parser/types/entity-relationship-model-types';\nimport CaseConverter from '@/erdiagram/converter/common/case-format/CaseConverter';\nimport {IdColumnCode} from '@/erdiagram/converter/database/code-converter/sql/dialect/common/sql-script-types';\nimport SqlIdColumnCodeGenerator\n\tfrom '@/erdiagram/converter/database/code-converter/sql/dialect/common/column/SqlIdColumnCodeGenerator';\nimport SqlTypeResolver from '@/erdiagram/converter/database/code-converter/sql/dialect/common/SqlTypeResolver';\n\nexport default class SqliteIdColumnCodeGenerator implements SqlIdColumnCodeGenerator {\n\n\tconstructor(\n\t\t\tprivate readonly typeResolver: SqlTypeResolver,\n\t\t\tprivate readonly columnNameCaseConverter: CaseConverter\n\t) {\n\n\t}\n\n\tpublic generateIdColumnCode(outputTableName: string, identityColumnName: string): IdColumnCode {\n\n\t\tconst outputIdentityColumnName = this.columnNameCaseConverter.convertCase(identityColumnName);\n\n\t\treturn {\n\t\t\tcolumnLine: this.generateIdColumnDeclarationLine(outputIdentityColumnName)\n\t\t};\n\n\t}\n\n\tprivate generateIdColumnDeclarationLine(outputIdentityColumnName: string): string {\n\t\tconst sqlType = this.typeResolver.resolveSqlType(EntityPropertyType.IDENTITY);\n\t\treturn `\"${outputIdentityColumnName}\" ${sqlType} NOT NULL PRIMARY KEY AUTOINCREMENT`;\n\t}\n\n}\n","import {EntityPropertyType} from '@/erdiagram/parser/types/entity-relationship-model-types';\nimport StandardCaseFormats from '@/erdiagram/converter/common/case-format/StandardCaseFormats';\nimport AbstractComponentConfigManager from '@/erdiagram/common/config/AbstractComponentConfigManager';\nimport {findKeyFromValue, findValueFromNullableKey} from '@/erdiagram/util/record-utils';\nimport SqliteDialectConfig\n\tfrom '@/erdiagram/converter/database/code-converter/sql/dialect/sqlite/config/SqliteDialectConfig';\nimport SqliteDialectSerializableConfig\n\tfrom '@/erdiagram/converter/database/code-converter/sql/dialect/sqlite/config/SqliteDialectSerializableConfig';\n\nexport class SqliteDialectConfigManager\n\t\textends AbstractComponentConfigManager<SqliteDialectConfig, Partial<SqliteDialectConfig>, SqliteDialectSerializableConfig> {\n\n\tgetDefaultConfig(): SqliteDialectConfig {\n\t\treturn {\n\t\t\ttypeBindings: {\n\t\t\t\t[EntityPropertyType.IDENTITY]: 'INTEGER',\n\t\t\t\t[EntityPropertyType.TEXT]: 'TEXT',\n\t\t\t\t[EntityPropertyType.LONG]: 'INTEGER',\n\t\t\t\t[EntityPropertyType.INT]: 'INTEGER',\n\t\t\t\t[EntityPropertyType.SHORT]: 'INTEGER',\n\t\t\t\t[EntityPropertyType.DECIMAL]: 'REAL',\n\t\t\t\t[EntityPropertyType.BOOLEAN]: 'INTEGER',\n\t\t\t\t[EntityPropertyType.DATE]: 'INTEGER',\n\t\t\t\t[EntityPropertyType.TIME]: 'INTEGER',\n\t\t\t\t[EntityPropertyType.DATETIME]: 'INTEGER',\n\t\t\t\t[EntityPropertyType.BLOB]: 'BLOB'\n\t\t\t},\n\t\t\ttableNameCaseFormat: StandardCaseFormats.LOWER_UNDERSCORE,\n\t\t\tcolumnNameCaseFormat: StandardCaseFormats.LOWER_UNDERSCORE,\n\t\t};\n\t}\n\n\tmergeConfigs(fullConfig: SqliteDialectConfig, partialConfig?: Partial<SqliteDialectConfig>): SqliteDialectConfig {\n\t\treturn {\n\t\t\t...fullConfig,\n\t\t\t...partialConfig,\n\t\t\ttypeBindings: {\n\t\t\t\t...fullConfig.typeBindings,\n\t\t\t\t...partialConfig?.typeBindings\n\t\t\t}\n\t\t};\n\t}\n\n\tconvertToSerializableObject(fullConfig: SqliteDialectConfig): SqliteDialectSerializableConfig {\n\t\treturn {\n\t\t\t...fullConfig,\n\t\t\ttableNameCaseFormat: findKeyFromValue(StandardCaseFormats, fullConfig.tableNameCaseFormat),\n\t\t\tcolumnNameCaseFormat: findKeyFromValue(StandardCaseFormats, fullConfig.columnNameCaseFormat),\n\t\t};\n\t}\n\n\tconvertFromSerializableObject(serializableConfig: SqliteDialectSerializableConfig): SqliteDialectConfig {\n\t\treturn {\n\t\t\t...serializableConfig,\n\t\t\ttableNameCaseFormat: findValueFromNullableKey(StandardCaseFormats, serializableConfig.tableNameCaseFormat, StandardCaseFormats.UPPER_CAMEL),\n\t\t\tcolumnNameCaseFormat: findValueFromNullableKey(StandardCaseFormats, serializableConfig.columnNameCaseFormat, StandardCaseFormats.UPPER_CAMEL),\n\t\t};\n\t}\n\n}\n\nconst sqliteDialectConfigManager = new SqliteDialectConfigManager();\nexport default sqliteDialectConfigManager;\n","import SqliteDialectConfig from './SqliteDialectConfig';\nimport SqliteDialectSerializableConfig from './SqliteDialectSerializableConfig';\nimport sqliteDialectConfigManager, {SqliteDialectConfigManager} from './SqliteDialectConfigManager';\n\nexport {\n\tSqliteDialectConfig,\n\tSqliteDialectSerializableConfig,\n\tSqliteDialectConfigManager,\n\tsqliteDialectConfigManager\n};\n","import SqliteDialect from '@/erdiagram/converter/database/code-converter/sql/dialect/sqlite/SqliteDialect';\n\nexport * from './config/exports';\n\nexport {\n\tSqliteDialect\n};\n","import SqlDialect from '@/erdiagram/converter/database/code-converter/sql/dialect/common/SqlDialect';\nimport CaseConverter from '@/erdiagram/converter/common/case-format/CaseConverter';\nimport SqlServerColumnCodeGenerator\n\tfrom '@/erdiagram/converter/database/code-converter/sql/dialect/sqlserver/column/SqlServerColumnCodeGenerator';\nimport SqlServerIdColumnCodeGenerator\n\tfrom '@/erdiagram/converter/database/code-converter/sql/dialect/sqlserver/column/SqlServerIdColumnCodeGenerator';\nimport SqlServerForeignColumnCodeGenerator\n\tfrom '@/erdiagram/converter/database/code-converter/sql/dialect/sqlserver/column/SqlServerForeignColumnCodeGenerator';\nimport SqlServerDialectConfig\n\tfrom '@/erdiagram/converter/database/code-converter/sql/dialect/sqlserver/config/SqlServerDialectConfig';\nimport sqlServerDialectConfigManager\n\tfrom '@/erdiagram/converter/database/code-converter/sql/dialect/sqlserver/config/SqlServerDialectConfigManager';\nimport StandardCaseFormats from '@/erdiagram/converter/common/case-format/StandardCaseFormats';\nimport SqlTypeResolver from '@/erdiagram/converter/database/code-converter/sql/dialect/common/SqlTypeResolver';\nimport {\n\tForeignKeyColumnCode,\n\tIdColumnCode,\n\tRegularColumnCode\n} from '@/erdiagram/converter/database/code-converter/sql/dialect/common/sql-script-types';\nimport {\n\tTableColumnDescriptor,\n\tTableReferenceDescriptor\n} from '@/erdiagram/converter/database/model/database-model-types';\n\nexport default class SqlServerDialect implements SqlDialect {\n\n\tprivate readonly tableNameCaseConverter: CaseConverter;\n\n\tprivate readonly columnCodeGenerator: SqlServerColumnCodeGenerator;\n\tprivate readonly idColumnCodeGenerator: SqlServerIdColumnCodeGenerator;\n\tprivate readonly foreignColumnCodeGenerator: SqlServerForeignColumnCodeGenerator;\n\n\tconstructor(config?: Partial<SqlServerDialectConfig>) {\n\n\t\tconst fullConfig = sqlServerDialectConfigManager.mergeWithDefaultConfig(config);\n\n\t\tthis.tableNameCaseConverter = new CaseConverter(\n\t\t\t\tStandardCaseFormats.LOWER_CAMEL,\n\t\t\t\tfullConfig.tableNameCaseFormat\n\t\t);\n\n\t\tconst columnNameCaseConverter = new CaseConverter(\n\t\t\t\tStandardCaseFormats.LOWER_CAMEL,\n\t\t\t\tfullConfig.columnNameCaseFormat\n\t\t);\n\n\t\tconst sqlTypeResolver = new SqlTypeResolver(fullConfig.typeBindings);\n\n\t\tthis.columnCodeGenerator = new SqlServerColumnCodeGenerator(\n\t\t\t\tsqlTypeResolver,\n\t\t\t\tcolumnNameCaseConverter\n\t\t);\n\n\t\tthis.idColumnCodeGenerator = new SqlServerIdColumnCodeGenerator(\n\t\t\t\tsqlTypeResolver,\n\t\t\t\tcolumnNameCaseConverter\n\t\t);\n\n\t\tthis.foreignColumnCodeGenerator = new SqlServerForeignColumnCodeGenerator(\n\t\t\t\tthis.columnCodeGenerator,\n\t\t\t\tthis.tableNameCaseConverter,\n\t\t\t\tcolumnNameCaseConverter\n\t\t);\n\n\t}\n\n\tgetScriptStartCode() {\n\t\treturn '';\n\t}\n\n\tgetScriptEndCode() {\n\t\treturn '';\n\t}\n\n\tmustUseAlterTableForForeignKeys(): boolean {\n\t\treturn true;\n\t}\n\n\tgetCreateTableStartCode(tableName: string) {\n\t\tconst outputTableName = this.tableNameCaseConverter.convertCase(tableName);\n\t\treturn `CREATE TABLE \"${outputTableName}\" (`;\n\t}\n\n\tgetCreateTableEndCode() {\n\t\treturn ');';\n\t}\n\n\tgetIdColumnCode(tableName: string, identityColumnName: string): IdColumnCode {\n\t\tconst outputTableName = this.tableNameCaseConverter.convertCase(tableName);\n\t\treturn this.idColumnCodeGenerator.generateIdColumnCode(outputTableName, identityColumnName);\n\t}\n\n\tgetColumnCode(tableName: string, column: TableColumnDescriptor): RegularColumnCode {\n\t\tconst outputTableName = this.tableNameCaseConverter.convertCase(tableName);\n\t\treturn this.columnCodeGenerator.generateColumnCode(outputTableName, column);\n\t}\n\n\tgetForeignColumnCode(tableName: string, reference: TableReferenceDescriptor): ForeignKeyColumnCode {\n\t\tconst outputTableName = this.tableNameCaseConverter.convertCase(tableName);\n\t\treturn this.foreignColumnCodeGenerator.generateForeignColumnCode(outputTableName, reference);\n\t}\n\n\tgetAlterTableAddCode(tableName: string, constraintCode: string) {\n\t\tconst outputTableName = this.tableNameCaseConverter.convertCase(tableName);\n\t\treturn `ALTER TABLE \"${outputTableName}\" ADD ${constraintCode};`;\n\t}\n\n}\n","import {EntityPropertyType} from '@/erdiagram/parser/types/entity-relationship-model-types';\nimport {TableColumnDescriptor} from '@/erdiagram/converter/database/model/database-model-types';\nimport CaseConverter from '@/erdiagram/converter/common/case-format/CaseConverter';\nimport SqlTypeResolver from '@/erdiagram/converter/database/code-converter/sql/dialect/common/SqlTypeResolver';\nimport {RegularColumnCode} from '@/erdiagram/converter/database/code-converter/sql/dialect/common/sql-script-types';\nimport SqlColumnCodeGenerator\n\tfrom '@/erdiagram/converter/database/code-converter/sql/dialect/common/column/SqlColumnCodeGenerator';\n\nexport default class SqlServerColumnCodeGenerator implements SqlColumnCodeGenerator {\n\n\tconstructor(\n\t\t\tprivate readonly typeResolver: SqlTypeResolver,\n\t\t\tprivate readonly columnNameCaseConverter: CaseConverter\n\t) {\n\n\t}\n\n\tpublic generateColumnCode(outputTableName: string, column: TableColumnDescriptor): RegularColumnCode {\n\n\t\tconst outputColumnName = this.columnNameCaseConverter.convertCase(column.name);\n\n\t\treturn {\n\t\t\tcolumnLine: this.generateColumnDeclarationLine(outputColumnName, column),\n\t\t\tuniqueConstraintLine: column.unique ? this.generateUniqueConstraintLine(outputTableName, outputColumnName) : undefined\n\t\t};\n\n\t}\n\n\tprivate generateColumnDeclarationLine(outputColumnName: string, column: TableColumnDescriptor): string {\n\n\t\tconst {\n\t\t\tnotNull,\n\t\t\ttype,\n\t\t\tlength\n\t\t} = column;\n\n\t\tconst lineParts: string[] = [\n\t\t\t`\"${outputColumnName}\"`,\n\t\t\tthis.generateSqlServerTypeDeclaration(type, length)\n\t\t];\n\n\t\tif (notNull) {\n\t\t\tlineParts.push('NOT NULL');\n\t\t}\n\n\t\treturn lineParts.join(' ');\n\n\t}\n\n\tprivate generateSqlServerTypeDeclaration(type: EntityPropertyType, length: number[]) {\n\n\t\tconst sqlServerType = this.typeResolver.resolveSqlType(type);\n\t\tconst lengthCode = this.generateLengthCode(length);\n\n\t\treturn sqlServerType + lengthCode;\n\n\t}\n\n\tprivate generateLengthCode(length: number[]): string {\n\n\t\tif (length.length === 0) {\n\t\t\treturn '';\n\t\t}\n\n\t\treturn `(${length.join(', ')})`;\n\n\t}\n\n\tprivate generateUniqueConstraintLine(outputTableName: string, outputColumnName: string) {\n\t\treturn `CONSTRAINT \"${outputTableName}_${outputColumnName}_unique\" UNIQUE (\"${outputColumnName}\")`;\n\t}\n\n}\n","import {EntityPropertyType} from '@/erdiagram/parser/types/entity-relationship-model-types';\nimport {\n\tTableColumnDescriptor,\n\tTableReferenceDescriptor\n} from '@/erdiagram/converter/database/model/database-model-types';\nimport SqlServerColumnCodeGenerator\n\tfrom '@/erdiagram/converter/database/code-converter/sql/dialect/sqlserver/column/SqlServerColumnCodeGenerator';\nimport CaseConverter from '@/erdiagram/converter/common/case-format/CaseConverter';\nimport {ForeignKeyColumnCode} from '@/erdiagram/converter/database/code-converter/sql/dialect/common/sql-script-types';\nimport SqlForeignColumnCodeGenerator\n\tfrom '@/erdiagram/converter/database/code-converter/sql/dialect/common/column/SqlForeignColumnCodeGenerator';\n\nexport default class SqlServerForeignColumnCodeGenerator implements SqlForeignColumnCodeGenerator {\n\n\tconstructor(\n\t\t\tprivate readonly columnCodeGenerator: SqlServerColumnCodeGenerator,\n\t\t\tprivate readonly tableNameCaseConverter: CaseConverter,\n\t\t\tprivate readonly columnNameCaseConverter: CaseConverter\n\t) {\n\n\t}\n\n\tpublic generateForeignColumnCode(outputTableName: string, reference: TableReferenceDescriptor): ForeignKeyColumnCode {\n\n\t\tconst columnDescriptor = this.createForeignKeyColumnDescriptor(reference);\n\n\t\tconst {\n\t\t\tcolumnLine,\n\t\t\tuniqueConstraintLine\n\t\t} = this.columnCodeGenerator.generateColumnCode(outputTableName, columnDescriptor);\n\n\t\treturn {\n\t\t\tcolumnLine,\n\t\t\tuniqueConstraintLine,\n\t\t\tfkConstraintLine: this.createForeignKeyConstraint(outputTableName, reference)\n\t\t};\n\n\t}\n\n\tprivate createForeignKeyColumnDescriptor(reference: TableReferenceDescriptor): TableColumnDescriptor {\n\n\t\tconst {\n\t\t\tcolumnName,\n\t\t\tnotNull,\n\t\t\tunique\n\t\t} = reference;\n\n\t\treturn {\n\t\t\tname: columnName,\n\t\t\ttype: EntityPropertyType.IDENTITY,\n\t\t\tlength: [],\n\t\t\tnotNull,\n\t\t\tunique\n\t\t};\n\n\t}\n\n\tprivate createForeignKeyConstraint(outputTableName: string, reference: TableReferenceDescriptor) {\n\n\t\tconst outputColumnName = this.columnNameCaseConverter.convertCase(reference.columnName);\n\n\t\tconst outputTargetTableName = this.tableNameCaseConverter.convertCase(reference.targetTableName);\n\t\tconst outputTargetColumnName = this.columnNameCaseConverter.convertCase(reference.targetTableIdentityColumnName);\n\n\t\treturn `CONSTRAINT \"${outputTableName}_${outputColumnName}_fk\" FOREIGN KEY (\"${outputColumnName}\")`\n\t\t\t\t+ ` REFERENCES \"${outputTargetTableName}\" (\"${outputTargetColumnName}\")`;\n\n\t}\n\n}\n","import {EntityPropertyType} from '@/erdiagram/parser/types/entity-relationship-model-types';\nimport CaseConverter from '@/erdiagram/converter/common/case-format/CaseConverter';\nimport {IdColumnCode} from '@/erdiagram/converter/database/code-converter/sql/dialect/common/sql-script-types';\nimport SqlIdColumnCodeGenerator\n\tfrom '@/erdiagram/converter/database/code-converter/sql/dialect/common/column/SqlIdColumnCodeGenerator';\nimport SqlTypeResolver from '@/erdiagram/converter/database/code-converter/sql/dialect/common/SqlTypeResolver';\n\nexport default class SqlServerIdColumnCodeGenerator implements SqlIdColumnCodeGenerator {\n\n\tconstructor(\n\t\t\tprivate readonly typeResolver: SqlTypeResolver,\n\t\t\tprivate readonly columnNameCaseConverter: CaseConverter\n\t) {\n\n\t}\n\n\tpublic generateIdColumnCode(outputTableName: string, identityColumnName: string): IdColumnCode {\n\n\t\tconst outputIdentityColumnName = this.columnNameCaseConverter.convertCase(identityColumnName);\n\n\t\treturn {\n\t\t\tcolumnLine: this.generateIdColumnDeclarationLine(outputIdentityColumnName),\n\t\t\tpkConstraintLine: this.createPrimaryKeyConstraint(outputTableName, outputIdentityColumnName)\n\t\t};\n\n\t}\n\n\tprivate generateIdColumnDeclarationLine(outputIdentityColumnName: string): string {\n\t\tconst sqlType = this.typeResolver.resolveSqlType(EntityPropertyType.IDENTITY);\n\t\treturn `\"${outputIdentityColumnName}\" ${sqlType} NOT NULL IDENTITY(1, 1)`;\n\t}\n\n\tprivate createPrimaryKeyConstraint(outputTableName: string, outputIdentityColumnName: string) {\n\t\treturn `CONSTRAINT \"${outputTableName}_pk\" PRIMARY KEY (\"${outputIdentityColumnName}\")`;\n\t}\n\n}\n","import {EntityPropertyType} from '@/erdiagram/parser/types/entity-relationship-model-types';\nimport StandardCaseFormats from '@/erdiagram/converter/common/case-format/StandardCaseFormats';\nimport AbstractComponentConfigManager from '@/erdiagram/common/config/AbstractComponentConfigManager';\nimport SqlServerDialectConfig\n\tfrom '@/erdiagram/converter/database/code-converter/sql/dialect/sqlserver/config/SqlServerDialectConfig';\nimport {findKeyFromValue, findValueFromNullableKey} from '@/erdiagram/util/record-utils';\nimport SqlServerDialectSerializableConfig\n\tfrom '@/erdiagram/converter/database/code-converter/sql/dialect/sqlserver/config/SqlServerDialectSerializableConfig';\n\nexport class SqlServerDialectConfigManager\n\t\textends AbstractComponentConfigManager<SqlServerDialectConfig, Partial<SqlServerDialectConfig>, SqlServerDialectSerializableConfig> {\n\n\tgetDefaultConfig(): SqlServerDialectConfig {\n\t\treturn {\n\t\t\ttypeBindings: {\n\t\t\t\t[EntityPropertyType.IDENTITY]: 'BIGINT',\n\t\t\t\t[EntityPropertyType.TEXT]: 'NVARCHAR',\n\t\t\t\t[EntityPropertyType.LONG]: 'BIGINT',\n\t\t\t\t[EntityPropertyType.INT]: 'INT',\n\t\t\t\t[EntityPropertyType.SHORT]: 'SMALLINT',\n\t\t\t\t[EntityPropertyType.DECIMAL]: 'DECIMAL',\n\t\t\t\t[EntityPropertyType.BOOLEAN]: 'BIT',\n\t\t\t\t[EntityPropertyType.DATE]: 'DATE',\n\t\t\t\t[EntityPropertyType.TIME]: 'TIME',\n\t\t\t\t[EntityPropertyType.DATETIME]: 'DATETIME2',\n\t\t\t\t[EntityPropertyType.BLOB]: 'VARBINARY(MAX)'\n\t\t\t},\n\t\t\ttableNameCaseFormat: StandardCaseFormats.UPPER_CAMEL,\n\t\t\tcolumnNameCaseFormat: StandardCaseFormats.UPPER_CAMEL,\n\t\t};\n\t}\n\n\tmergeConfigs(fullConfig: SqlServerDialectConfig, partialConfig?: Partial<SqlServerDialectConfig>): SqlServerDialectConfig {\n\t\treturn {\n\t\t\t...fullConfig,\n\t\t\t...partialConfig,\n\t\t\ttypeBindings: {\n\t\t\t\t...fullConfig.typeBindings,\n\t\t\t\t...partialConfig?.typeBindings\n\t\t\t}\n\t\t};\n\t}\n\n\tconvertToSerializableObject(fullConfig: SqlServerDialectConfig): SqlServerDialectSerializableConfig {\n\t\treturn {\n\t\t\t...fullConfig,\n\t\t\ttableNameCaseFormat: findKeyFromValue(StandardCaseFormats, fullConfig.tableNameCaseFormat),\n\t\t\tcolumnNameCaseFormat: findKeyFromValue(StandardCaseFormats, fullConfig.columnNameCaseFormat),\n\t\t};\n\t}\n\n\tconvertFromSerializableObject(serializableConfig: SqlServerDialectSerializableConfig): SqlServerDialectConfig {\n\t\treturn {\n\t\t\t...serializableConfig,\n\t\t\ttableNameCaseFormat: findValueFromNullableKey(StandardCaseFormats, serializableConfig.tableNameCaseFormat, StandardCaseFormats.UPPER_CAMEL),\n\t\t\tcolumnNameCaseFormat: findValueFromNullableKey(StandardCaseFormats, serializableConfig.columnNameCaseFormat, StandardCaseFormats.UPPER_CAMEL),\n\t\t};\n\t}\n\n}\n\nconst sqlServerDialectConfigManager = new SqlServerDialectConfigManager();\nexport default sqlServerDialectConfigManager;\n","import SqlServerDialectConfig from './SqlServerDialectConfig';\nimport SqlServerDialectSerializableConfig from './SqlServerDialectSerializableConfig';\nimport sqlServerDialectConfigManager, {SqlServerDialectConfigManager} from './SqlServerDialectConfigManager';\n\nexport {\n\tSqlServerDialectConfig,\n\tSqlServerDialectSerializableConfig,\n\tSqlServerDialectConfigManager,\n\tsqlServerDialectConfigManager\n};\n","import SqlServerDialect from '@/erdiagram/converter/database/code-converter/sql/dialect/sqlserver/SqlServerDialect';\n\nexport * from './config/exports';\n\nexport {\n\tSqlServerDialect\n};\n","import DatabaseModelToSqlCodeConverter\n\tfrom '@/erdiagram/converter/database/code-converter/sql/DatabaseModelToSqlCodeConverter';\n\nexport * from './dialect/exports';\n\nexport {\n\tDatabaseModelToSqlCodeConverter\n};\n","export * from './code-converter/exports';\nexport * from './model/exports';\n","import pluralize from 'pluralize';\nimport {\n\tDatabaseModel,\n\tTableColumnDescriptor,\n\tTableDescriptor,\n\tTableReferenceDescriptor\n} from '@/erdiagram/converter/database/model/database-model-types';\nimport DatabaseModelGeneratorConfig from '@/erdiagram/converter/database/model/config/DatabaseModelGeneratorConfig';\nimport {\n\tCardinality,\n\tEntityDescriptor,\n\tEntityPropertyDescriptor,\n\tEntityRelationshipModel,\n\tRelationshipDescriptor,\n\tRelationshipMember\n} from '@/erdiagram/parser/types/entity-relationship-model-types';\nimport databaseModelGeneratorConfigManager\n\tfrom '@/erdiagram/converter/database/model/config/DatabaseModelGeneratorConfigManager';\nimport {classifyBy} from '@/erdiagram/util/map-utils';\nimport {capitalizeWord, uncapitalizeWord} from '@/erdiagram/util/string-utils';\n\nexport default class DatabaseModelGenerator {\n\n\tprivate readonly config: DatabaseModelGeneratorConfig;\n\n\tconstructor(config?: Partial<DatabaseModelGeneratorConfig>) {\n\t\tthis.config = databaseModelGeneratorConfigManager.mergeWithDefaultConfig(config);\n\t}\n\n\tgenerateDatabaseModel(model: EntityRelationshipModel): DatabaseModel {\n\n\t\tconst entityIdentitiesMap = classifyBy(\n\t\t\t\tmodel.entities.filter(entity => entity.identityPropertyName),\n\t\t\t\tentity => entity.name,\n\t\t\t\tentity => entity.identityPropertyName!\n\t\t);\n\n\t\tconst tables: TableDescriptor[] = [];\n\n\t\tthis.generateEntityTables(model, entityIdentitiesMap, tables);\n\t\tthis.generateRelationshipTables(model, entityIdentitiesMap, tables);\n\n\t\treturn {\n\t\t\ttables\n\t\t};\n\n\t}\n\n\tprivate generateEntityTables(model: EntityRelationshipModel, entityIdentitiesMap: Map<string, string>, tables: TableDescriptor[]) {\n\t\tmodel.entities\n\t\t\t\t.map(entity => this.generateEntityTable(entity, model, entityIdentitiesMap))\n\t\t\t\t.forEach(sentence => tables.push(sentence));\n\t}\n\n\tprivate generateEntityTable(entity: EntityDescriptor, model: EntityRelationshipModel, entityIdentitiesMap: Map<string, string>): TableDescriptor {\n\n\t\tconst columns: TableColumnDescriptor[] = [];\n\n\t\tconst references: TableReferenceDescriptor[] = [];\n\n\t\tfor (const property of entity.properties) {\n\t\t\tcolumns.push(this.mapPropertyToColumn(property));\n\t\t}\n\n\t\tfor (const relationship of model.relationships) {\n\t\t\tif (relationship.rightMember.cardinality !== Cardinality.MANY) {\n\t\t\t\tif (relationship.leftMember.entity === entity.name) {\n\t\t\t\t\tconst isOneToOneRelationship = relationship.leftMember.cardinality !== Cardinality.MANY;\n\t\t\t\t\treferences.push(this.createTableReference(relationship.rightMember, entityIdentitiesMap, isOneToOneRelationship));\n\t\t\t\t}\n\t\t\t} else if (relationship.leftMember.cardinality !== Cardinality.MANY) {\n\t\t\t\tif (relationship.rightMember.entity === entity.name) {\n\t\t\t\t\treferences.push(this.createTableReference(relationship.leftMember, entityIdentitiesMap));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tname: this.pluralizeEntityNameIfApplies(entity.name),\n\t\t\tidentityColumnName: this.getIdentityColumnName(entity.name, entityIdentitiesMap),\n\t\t\tcolumns,\n\t\t\treferences\n\t\t};\n\n\t}\n\n\tprivate generateRelationshipTables(model: EntityRelationshipModel, entityIdentitiesMap: Map<string, string>, tables: TableDescriptor[]) {\n\t\tmodel.relationships\n\t\t\t\t.filter(relationship => this.isManyToManyRelationship(relationship))\n\t\t\t\t.map(relationship => this.generateRelationshipTable(relationship, entityIdentitiesMap))\n\t\t\t\t.forEach(sentence => tables.push(sentence));\n\t}\n\n\tprivate generateRelationshipTable(relationship: RelationshipDescriptor, entityIdentitiesMap: Map<string, string>): TableDescriptor {\n\n\t\tconst name = this.getRelationshipTableName(relationship);\n\t\tconst identityColumnName = this.getRelationshipTableIdentityColumnName(relationship, entityIdentitiesMap);\n\n\t\treturn {\n\t\t\tname,\n\t\t\tidentityColumnName: identityColumnName,\n\t\t\tcolumns: [],\n\t\t\treferences: [\n\t\t\t\tthis.createTableReference(relationship.leftMember, entityIdentitiesMap),\n\t\t\t\tthis.createTableReference(relationship.rightMember, entityIdentitiesMap)\n\t\t\t]\n\t\t};\n\n\t}\n\n\tprivate getRelationshipTableName(relationship: RelationshipDescriptor): string {\n\n\t\tconst {\n\t\t\trelationshipName,\n\t\t\tleftMember,\n\t\t\trightMember\n\t\t} = relationship;\n\n\t\tif (relationshipName) {\n\t\t\treturn relationshipName;\n\t\t}\n\n\t\treturn this.pluralizeEntityNameIfApplies(leftMember.entity)\n\t\t\t\t+ this.pluralizeEntityNameIfApplies(rightMember.entity);\n\n\t}\n\n\tprivate getRelationshipTableIdentityColumnName(relationship: RelationshipDescriptor, entityIdentitiesMap: Map<string, string>): string {\n\n\t\tconst {\n\t\t\trelationshipName,\n\t\t\tleftMember,\n\t\t\trightMember\n\t\t} = relationship;\n\n\t\tif (relationshipName) {\n\t\t\treturn this.getIdentityColumnName(relationshipName, entityIdentitiesMap);\n\t\t}\n\n\t\treturn this.getIdentityColumnName(leftMember.entity + rightMember.entity, entityIdentitiesMap);\n\n\t}\n\n\tprivate createTableReference(toMember: RelationshipMember, entityIdentitiesMap: Map<string, string>, unique: boolean = false): TableReferenceDescriptor {\n\n\t\tconst {\n\t\t\tentityAlias,\n\t\t\tentity,\n\t\t\tcardinality\n\t\t} = toMember;\n\n\t\treturn {\n\t\t\tcolumnName: `${entityAlias}Id`,\n\t\t\ttargetTableName: this.pluralizeEntityNameIfApplies(entity),\n\t\t\ttargetTableIdentityColumnName: this.getIdentityColumnName(entity, entityIdentitiesMap),\n\t\t\tnotNull: cardinality !== Cardinality.ZERO_OR_ONE,\n\t\t\tunique\n\t\t};\n\n\t}\n\n\tprivate pluralizeEntityNameIfApplies(entityName: string): string {\n\n\t\tif (!this.config.usePluralTableNames) {\n\t\t\treturn entityName;\n\t\t}\n\n\t\t// pluralize() takes into account the case of the word, so 'A' is pluralized to 'AS' instead of 'As'.\n\t\t// This means that we have to uncapitalize the entity name before calling pluralize() in order to get the\n\t\t// expected behavior, then capitalize the result.\n\n\t\tconst uncapitalizedEntityName = uncapitalizeWord(entityName);\n\t\tconst pluralizedUncapitalizedEntityName = pluralize(uncapitalizedEntityName);\n\n\t\treturn capitalizeWord(pluralizedUncapitalizedEntityName);\n\n\t}\n\n\tprivate getIdentityColumnName(entityName: string, entityIdentitiesMap: Map<string, string>): string {\n\n\t\tif (entityIdentitiesMap.has(entityName)) {\n\t\t\treturn entityIdentitiesMap.get(entityName)!;\n\t\t}\n\n\t\tconst {idNamingStrategy} = this.config;\n\t\treturn idNamingStrategy(entityName);\n\n\t}\n\n\tprivate mapPropertyToColumn(property: EntityPropertyDescriptor): TableColumnDescriptor {\n\n\t\tconst {\n\t\t\tname,\n\t\t\toptional,\n\t\t\tunique,\n\t\t\ttype,\n\t\t\tlength\n\t\t} = property;\n\n\t\treturn {\n\t\t\tname,\n\t\t\tnotNull: !optional,\n\t\t\tunique,\n\t\t\ttype,\n\t\t\tlength\n\t\t};\n\n\t}\n\n\tprivate isManyToManyRelationship(relationship: RelationshipDescriptor): boolean {\n\t\treturn [\n\t\t\trelationship.leftMember,\n\t\t\trelationship.rightMember\n\t\t].every(member => member.cardinality === Cardinality.MANY);\n\t}\n\n}\n","import AbstractComponentConfigManager from '@/erdiagram/common/config/AbstractComponentConfigManager';\nimport DatabaseModelGeneratorConfig from '@/erdiagram/converter/database/model/config/DatabaseModelGeneratorConfig';\nimport StandardIdNamingStrategies from '@/erdiagram/converter/common/id-naming-strategy/StandardIdNamingStrategies';\nimport {findKeyFromValue, findValueFromNullableKey} from '@/erdiagram/util/record-utils';\nimport DatabaseModelGeneratorSerializableConfig\n\tfrom '@/erdiagram/converter/database/model/config/DatabaseModelGeneratorSerializableConfig';\n\nexport class DatabaseModelGeneratorConfigManager\n\t\textends AbstractComponentConfigManager<DatabaseModelGeneratorConfig, Partial<DatabaseModelGeneratorConfig>, DatabaseModelGeneratorSerializableConfig> {\n\n\tgetDefaultConfig(): DatabaseModelGeneratorConfig {\n\t\treturn {\n\t\t\tusePluralTableNames: false,\n\t\t\tidNamingStrategy: StandardIdNamingStrategies.DEFAULT\n\t\t};\n\t}\n\n\tmergeConfigs(fullConfig: DatabaseModelGeneratorConfig, partialConfig?: Partial<DatabaseModelGeneratorConfig>): DatabaseModelGeneratorConfig {\n\t\treturn {\n\t\t\t...fullConfig,\n\t\t\t...partialConfig\n\t\t};\n\t}\n\n\tconvertToSerializableObject(fullConfig: DatabaseModelGeneratorConfig): DatabaseModelGeneratorSerializableConfig {\n\t\treturn {\n\t\t\t...fullConfig,\n\t\t\tidNamingStrategy: findKeyFromValue(StandardIdNamingStrategies, fullConfig.idNamingStrategy)\n\t\t};\n\t}\n\n\tconvertFromSerializableObject(serializableConfig: DatabaseModelGeneratorSerializableConfig): DatabaseModelGeneratorConfig {\n\t\treturn {\n\t\t\t...serializableConfig,\n\t\t\tidNamingStrategy: findValueFromNullableKey(StandardIdNamingStrategies, serializableConfig.idNamingStrategy, StandardIdNamingStrategies.DEFAULT)\n\t\t};\n\t}\n\n}\n\nconst databaseModelGeneratorConfigManager = new DatabaseModelGeneratorConfigManager();\nexport default databaseModelGeneratorConfigManager;\n","import DatabaseModelGeneratorConfig from './DatabaseModelGeneratorConfig';\nimport DatabaseModelGeneratorSerializableConfig from './DatabaseModelGeneratorSerializableConfig';\nimport databaseModelGeneratorConfigManager, {DatabaseModelGeneratorConfigManager} from './DatabaseModelGeneratorConfigManager';\n\nexport {\n\tDatabaseModelGeneratorConfig,\n\tDatabaseModelGeneratorSerializableConfig,\n\tDatabaseModelGeneratorConfigManager,\n\tdatabaseModelGeneratorConfigManager\n};\n","import DatabaseModelGenerator from './DatabaseModelGenerator';\n\nexport * from './database-model-types';\nexport * from './config/exports';\n\nexport {\n\tDatabaseModelGenerator\n};\n","export * from './nomnoml/exports';\nexport * from './plantuml/exports';\n","import {EntityRelationshipModel} from '@/erdiagram/parser/types/entity-relationship-model-types';\nimport NomnomlEntityCodeGenerator from '@/erdiagram/converter/diagram/nomnoml/entity/NomnomlEntityCodeGenerator';\nimport NomnomlRelationshipCodeGenerator\n\tfrom '@/erdiagram/converter/diagram/nomnoml/relationship/NomnomlRelationshipCodeGenerator';\nimport EntityRelationshipModelToCodeConverter from '@/erdiagram/converter/EntityRelationshipModelToCodeConverter';\nimport NomnomlEntityRelationshipModelToDiagramCodeConverterConfig\n\tfrom '@/erdiagram/converter/diagram/nomnoml/config/NomnomlEntityRelationshipModelToDiagramCodeConverterConfig';\nimport nomnomlEntityRelationshipModelToDiagramCodeConverterConfigManager\n\tfrom '@/erdiagram/converter/diagram/nomnoml/config/NomnomlEntityRelationshipModelToDiagramCodeConverterConfigManager';\nimport NomnomlDirectivesCodeGenerator\n\tfrom '@/erdiagram/converter/diagram/nomnoml/directive/NomnomlDirectivesCodeGenerator';\n\nexport default class NomnomlEntityRelationshipModelToDiagramCodeConverter implements EntityRelationshipModelToCodeConverter {\n\n\tprivate readonly config: NomnomlEntityRelationshipModelToDiagramCodeConverterConfig;\n\n\tprivate readonly entityCodeGenerator = new NomnomlEntityCodeGenerator();\n\tprivate readonly relationshipCodeGenerator = new NomnomlRelationshipCodeGenerator();\n\tprivate readonly directivesCodeGenerator = new NomnomlDirectivesCodeGenerator();\n\n\tconstructor(config?: Partial<NomnomlEntityRelationshipModelToDiagramCodeConverterConfig>) {\n\t\tthis.config = nomnomlEntityRelationshipModelToDiagramCodeConverterConfigManager.mergeWithDefaultConfig(config);\n\t}\n\n\tpublic convertToCode(model: EntityRelationshipModel): string {\n\t\treturn [\n\t\t\t...model.entities.map(entity => this.entityCodeGenerator.generateEntityCode(entity)),\n\t\t\t...model.relationships.map(relationship => this.relationshipCodeGenerator.generateRelationshipCode(relationship)),\n\t\t\tthis.directivesCodeGenerator.generateDirectivesCode(this.config)\n\t\t].join('\\n\\n');\n\t}\n\n}\n","import AbstractComponentConfigManager from '@/erdiagram/common/config/AbstractComponentConfigManager';\nimport NomnomlEntityRelationshipModelToDiagramCodeConverterConfig\n\tfrom '@/erdiagram/converter/diagram/nomnoml/config/NomnomlEntityRelationshipModelToDiagramCodeConverterConfig';\nimport NomnomlEntityRelationshipModelToDiagramCodeConverterSerializableConfig\n\tfrom '@/erdiagram/converter/diagram/nomnoml/config/NomnomlEntityRelationshipModelToDiagramCodeConverterSerializableConfig';\n\nexport class NomnomlEntityRelationshipModelToDiagramCodeConverterConfigManager\n\t\textends AbstractComponentConfigManager<NomnomlEntityRelationshipModelToDiagramCodeConverterConfig, NomnomlEntityRelationshipModelToDiagramCodeConverterConfig, NomnomlEntityRelationshipModelToDiagramCodeConverterSerializableConfig> {\n\n\tgetDefaultConfig(): NomnomlEntityRelationshipModelToDiagramCodeConverterConfig {\n\t\treturn {\n\t\t\tarrowSize: 1,\n\t\t\tbendSize: undefined,\n\t\t\tdirection: undefined,\n\t\t\tgutter: undefined,\n\t\t\tedgeMargin: undefined,\n\t\t\tgravity: 1.5,\n\t\t\tedges: undefined,\n\t\t\tbackground: 'transparent',\n\t\t\tfill: '#fefece',\n\t\t\tfillArrows: undefined,\n\t\t\tfont: undefined,\n\t\t\tfontSize: undefined,\n\t\t\tleading: undefined,\n\t\t\tlineWidth: 1,\n\t\t\tpadding: undefined,\n\t\t\tspacing: undefined,\n\t\t\tstroke: '#333333',\n\t\t\ttitle: undefined,\n\t\t\tzoom: undefined,\n\t\t\tacyclicer: undefined,\n\t\t\tranker: 'longest-path'\n\t\t};\n\t}\n\n\tmergeConfigs(fullConfig: NomnomlEntityRelationshipModelToDiagramCodeConverterConfig, partialConfig?: Partial<NomnomlEntityRelationshipModelToDiagramCodeConverterConfig>): NomnomlEntityRelationshipModelToDiagramCodeConverterConfig {\n\t\treturn {\n\t\t\t...fullConfig,\n\t\t\t...partialConfig\n\t\t};\n\t}\n\n\tconvertToSerializableObject(fullConfig: NomnomlEntityRelationshipModelToDiagramCodeConverterConfig): NomnomlEntityRelationshipModelToDiagramCodeConverterSerializableConfig {\n\t\treturn {\n\t\t\t...fullConfig\n\t\t};\n\t}\n\n\tconvertFromSerializableObject(serializableConfig: NomnomlEntityRelationshipModelToDiagramCodeConverterSerializableConfig): NomnomlEntityRelationshipModelToDiagramCodeConverterConfig {\n\t\treturn {\n\t\t\t...serializableConfig\n\t\t};\n\t}\n\n}\n\nconst nomnomlEntityRelationshipModelToDiagramCodeConverterConfigManager = new NomnomlEntityRelationshipModelToDiagramCodeConverterConfigManager();\nexport default nomnomlEntityRelationshipModelToDiagramCodeConverterConfigManager;\n","import NomnomlEntityRelationshipModelToDiagramCodeConverterConfig\n\tfrom './NomnomlEntityRelationshipModelToDiagramCodeConverterConfig';\nimport NomnomlEntityRelationshipModelToDiagramCodeConverterSerializableConfig\n\tfrom './NomnomlEntityRelationshipModelToDiagramCodeConverterSerializableConfig';\nimport nomnomlEntityRelationshipModelToDiagramCodeConverterConfigManager, {NomnomlEntityRelationshipModelToDiagramCodeConverterConfigManager} from './NomnomlEntityRelationshipModelToDiagramCodeConverterConfigManager';\n\nexport {\n\tNomnomlEntityRelationshipModelToDiagramCodeConverterConfig,\n\tNomnomlEntityRelationshipModelToDiagramCodeConverterSerializableConfig,\n\tNomnomlEntityRelationshipModelToDiagramCodeConverterConfigManager,\n\tnomnomlEntityRelationshipModelToDiagramCodeConverterConfigManager\n};\n","import NomnomlEntityRelationshipModelToDiagramCodeConverterConfig\n\tfrom '@/erdiagram/converter/diagram/nomnoml/config/NomnomlEntityRelationshipModelToDiagramCodeConverterConfig';\n\nexport default class NomnomlDirectivesCodeGenerator {\n\n\tpublic generateDirectivesCode(config: NomnomlEntityRelationshipModelToDiagramCodeConverterConfig): string {\n\t\treturn Object.entries(config)\n\t\t\t\t.filter(([key, value]) => value != null && value !== '')\n\t\t\t\t.map(([key, value]) => `#${key}: ${value}`)\n\t\t\t\t.join('\\n');\n\t}\n\n}\n","import {EntityDescriptor} from '@/erdiagram/parser/types/entity-relationship-model-types';\nimport NomnomlEntityIdentityPropertyCodeGenerator\n\tfrom '@/erdiagram/converter/diagram/nomnoml/entity/NomnomlEntityIdentityPropertyCodeGenerator';\nimport NomnomlEntityPropertyCodeGenerator\n\tfrom '@/erdiagram/converter/diagram/nomnoml/entity/NomnomlEntityPropertyCodeGenerator';\nimport {indentLines} from '@/erdiagram/util/indent-utils';\n\nexport default class NomnomlEntityCodeGenerator {\n\n\tprivate readonly entityIdentityPropertyCodeGenerator = new NomnomlEntityIdentityPropertyCodeGenerator();\n\tprivate readonly entityPropertyCodeGenerator = new NomnomlEntityPropertyCodeGenerator();\n\n\tpublic generateEntityCode(entity: EntityDescriptor): string {\n\n\t\tconst propertiesCode = this.generateEntityPropertiesCode(entity);\n\n\t\tif (!propertiesCode) {\n\t\t\treturn `[${entity.name}]`;\n\t\t}\n\n\t\treturn [\n\t\t\t`[${entity.name}|`,\n\t\t\tpropertiesCode,\n\t\t\t']'\n\t\t].join('\\n');\n\n\t}\n\n\tprivate generateEntityPropertiesCode(entity: EntityDescriptor): string {\n\n\t\tconst {\n\t\t\tidentityPropertyName,\n\t\t\tproperties\n\t\t} = entity;\n\n\t\tconst propertiesCode = properties.map(property => this.entityPropertyCodeGenerator.generateEntityPropertyCode(property));\n\n\t\tif (identityPropertyName) {\n\t\t\tpropertiesCode.unshift(this.entityIdentityPropertyCodeGenerator.generateEntityIdentityPropertyCode(identityPropertyName));\n\t\t}\n\n\t\treturn indentLines(propertiesCode).join('\\n');\n\n\t}\n\n}\n","import {EntityPropertyType} from '@/erdiagram/parser/types/entity-relationship-model-types';\n\nexport default class NomnomlEntityIdentityPropertyCodeGenerator {\n\n\tpublic generateEntityIdentityPropertyCode(identityPropertyName: string): string {\n\t\treturn `${identityPropertyName}: ${EntityPropertyType.IDENTITY}`;\n\t}\n\n}\n","import {EntityPropertyDescriptor, EntityPropertyType} from '@/erdiagram/parser/types/entity-relationship-model-types';\n\nexport default class NomnomlEntityPropertyCodeGenerator {\n\n\tpublic generateEntityPropertyCode(property: EntityPropertyDescriptor): string {\n\n\t\tconst {\n\t\t\tname,\n\t\t\ttype,\n\t\t\tlength,\n\t\t\toptional,\n\t\t\tunique\n\t\t} = property;\n\n\t\tconst typeWithLengthCode = this.getTypeWithLengthCode(type, length);\n\n\t\tconst modifiersCode = this.getModifiersCode(optional, unique);\n\n\t\treturn `${name}${modifiersCode}: ${typeWithLengthCode}`;\n\n\t}\n\n\tprivate getTypeWithLengthCode(type: EntityPropertyType, length: number[]): string {\n\n\t\tif (length.length === 0) {\n\t\t\treturn type;\n\t\t}\n\n\t\treturn `${type}(${length.join(', ')})`;\n\n\t}\n\n\tprivate getModifiersCode(optional: boolean, unique: boolean) {\n\n\t\tconst optionalModifierCode = optional ? '?' : '';\n\t\tconst uniqueModifierCode = unique ? '!' : '';\n\n\t\treturn optionalModifierCode + uniqueModifierCode;\n\n\t}\n\n}\n","import NomnomlEntityRelationshipModelToDiagramCodeConverter\n\tfrom './NomnomlEntityRelationshipModelToDiagramCodeConverter';\n\nexport * from './config/exports';\n\nexport {\n\tNomnomlEntityRelationshipModelToDiagramCodeConverter\n};\n","import {RelationshipDescriptor} from '@/erdiagram/parser/types/entity-relationship-model-types';\nimport NomnomlRelationshipDirectionCodeGenerator\n\tfrom '@/erdiagram/converter/diagram/nomnoml/relationship/NomnomlRelationshipDirectionCodeGenerator';\nimport NomnomlRelationshipCardinalityCodeGenerator\n\tfrom '@/erdiagram/converter/diagram/nomnoml/relationship/NomnomlRelationshipCardinalityCodeGenerator';\n\nexport default class NomnomlNamedRelationshipCodeGenerator {\n\n\tconstructor(\n\t\t\tprivate readonly relationshipDirectionCodeGenerator: NomnomlRelationshipDirectionCodeGenerator,\n\t\t\tprivate readonly relationshipCardinalityCodeGenerator: NomnomlRelationshipCardinalityCodeGenerator\n\t) {\n\n\t}\n\n\tpublic generateNamedRelationshipCode(relationship: RelationshipDescriptor): string {\n\n\t\tconst {\n\t\t\tleftMember,\n\t\t\trightMember,\n\t\t\tdirection,\n\t\t\trelationshipName\n\t\t} = relationship;\n\n\t\tconst leftMemberCardinalityCode = this.relationshipCardinalityCodeGenerator.generateCardinalityCode(leftMember.cardinality);\n\t\tconst rightMemberCardinalityCode = this.relationshipCardinalityCodeGenerator.generateCardinalityCode(rightMember.cardinality);\n\n\t\tconst leftSideDirectionCode = this.relationshipDirectionCodeGenerator.generateLeftSideDirectionCode(direction);\n\t\tconst rightSideDirectionCode = this.relationshipDirectionCodeGenerator.generateRightSideDirectionCode(direction);\n\n\t\treturn [\n\t\t\t`[<label>${relationshipName}]`,\n\t\t\t`[${leftMember.entity}] ${leftMemberCardinalityCode}${leftSideDirectionCode} [${relationshipName}]`,\n\t\t\t`[${relationshipName}] ${rightSideDirectionCode}${rightMemberCardinalityCode} [${rightMember.entity}]`\n\t\t].join('\\n');\n\n\t}\n\n}\n","import {Cardinality} from '@/erdiagram/parser/types/entity-relationship-model-types';\n\nexport default class NomnomlRelationshipCardinalityCodeGenerator {\n\n\tpublic generateCardinalityCode(cardinality: Cardinality): string {\n\t\tswitch (cardinality) {\n\t\t\tcase Cardinality.ZERO_OR_ONE:\n\t\t\t\treturn '0..1';\n\t\t\tcase Cardinality.ONE:\n\t\t\t\treturn '1';\n\t\t\tcase Cardinality.MANY:\n\t\t\t\treturn '*';\n\t\t}\n\t}\n\n}\n","import {RelationshipDescriptor} from '@/erdiagram/parser/types/entity-relationship-model-types';\nimport NomnomlRelationshipDirectionCodeGenerator\n\tfrom '@/erdiagram/converter/diagram/nomnoml/relationship/NomnomlRelationshipDirectionCodeGenerator';\nimport NomnomlRelationshipCardinalityCodeGenerator\n\tfrom '@/erdiagram/converter/diagram/nomnoml/relationship/NomnomlRelationshipCardinalityCodeGenerator';\nimport NomnomlUnnamedRelationshipCodeGenerator\n\tfrom '@/erdiagram/converter/diagram/nomnoml/relationship/NomnomlUnnamedRelationshipCodeGenerator';\nimport NomnomlNamedRelationshipCodeGenerator\n\tfrom '@/erdiagram/converter/diagram/nomnoml/relationship/NomnomlNamedRelationshipCodeGenerator';\n\nexport default class NomnomlRelationshipCodeGenerator {\n\n\tprivate readonly relationshipDirectionCodeGenerator = new NomnomlRelationshipDirectionCodeGenerator();\n\tprivate readonly relationshipCardinalityCodeGenerator = new NomnomlRelationshipCardinalityCodeGenerator();\n\n\tprivate readonly namedRelationshipCodeGenerator = new NomnomlNamedRelationshipCodeGenerator(\n\t\t\tthis.relationshipDirectionCodeGenerator,\n\t\t\tthis.relationshipCardinalityCodeGenerator\n\t);\n\n\tprivate readonly unnamedRelationshipCodeGenerator = new NomnomlUnnamedRelationshipCodeGenerator(\n\t\t\tthis.relationshipDirectionCodeGenerator,\n\t\t\tthis.relationshipCardinalityCodeGenerator\n\t);\n\n\tpublic generateRelationshipCode(relationship: RelationshipDescriptor): string {\n\t\tif (relationship.relationshipName) {\n\t\t\treturn this.namedRelationshipCodeGenerator.generateNamedRelationshipCode(relationship);\n\t\t} else {\n\t\t\treturn this.unnamedRelationshipCodeGenerator.generateUnnamedRelationshipCode(relationship);\n\t\t}\n\t}\n\n}\n","import {Direction} from '@/erdiagram/parser/types/entity-relationship-model-types';\n\nexport default class NomnomlRelationshipDirectionCodeGenerator {\n\n\tpublic generateDirectionCode(direction: Direction): string {\n\t\tswitch (direction) {\n\t\t\tcase Direction.LEFT_TO_RIGHT:\n\t\t\t\treturn '->';\n\t\t\tcase Direction.RIGHT_TO_LEFT:\n\t\t\t\treturn '<-';\n\t\t\tcase Direction.BIDIRECTIONAL:\n\t\t\t\treturn '<->';\n\t\t}\n\t}\n\n\tpublic generateLeftSideDirectionCode(direction: Direction): string {\n\t\treturn [Direction.RIGHT_TO_LEFT, Direction.BIDIRECTIONAL].includes(direction) ? '<-' : '-';\n\t}\n\n\tpublic generateRightSideDirectionCode(direction: Direction): string {\n\t\treturn [Direction.LEFT_TO_RIGHT, Direction.BIDIRECTIONAL].includes(direction) ? '->' : '-';\n\t}\n\n}\n","import {RelationshipDescriptor} from '@/erdiagram/parser/types/entity-relationship-model-types';\nimport NomnomlRelationshipDirectionCodeGenerator\n\tfrom '@/erdiagram/converter/diagram/nomnoml/relationship/NomnomlRelationshipDirectionCodeGenerator';\nimport NomnomlRelationshipCardinalityCodeGenerator\n\tfrom '@/erdiagram/converter/diagram/nomnoml/relationship/NomnomlRelationshipCardinalityCodeGenerator';\n\nexport default class NomnomlUnnamedRelationshipCodeGenerator {\n\n\tconstructor(\n\t\t\tprivate readonly relationshipDirectionCodeGenerator: NomnomlRelationshipDirectionCodeGenerator,\n\t\t\tprivate readonly relationshipCardinalityCodeGenerator: NomnomlRelationshipCardinalityCodeGenerator\n\t) {\n\n\t}\n\n\tpublic generateUnnamedRelationshipCode(relationship: RelationshipDescriptor): string {\n\n\t\tconst {\n\t\t\tleftMember,\n\t\t\trightMember,\n\t\t\tdirection\n\t\t} = relationship;\n\n\t\tconst leftMemberCardinalityCode = this.relationshipCardinalityCodeGenerator.generateCardinalityCode(leftMember.cardinality);\n\t\tconst rightMemberCardinalityCode = this.relationshipCardinalityCodeGenerator.generateCardinalityCode(rightMember.cardinality);\n\n\t\tconst directionCode = this.relationshipDirectionCodeGenerator.generateDirectionCode(direction);\n\t\treturn `[${leftMember.entity}] ${leftMemberCardinalityCode}${directionCode}${rightMemberCardinalityCode} [${rightMember.entity}]`;\n\n\t}\n\n}\n","import {EntityRelationshipModel} from '@/erdiagram/parser/types/entity-relationship-model-types';\nimport EntityRelationshipModelToCodeConverter from '@/erdiagram/converter/EntityRelationshipModelToCodeConverter';\nimport PlantUmlEntityCodeGenerator from '@/erdiagram/converter/diagram/plantuml/entity/PlantUmlEntityCodeGenerator';\nimport PlantUmlRelationshipCodeGenerator\n\tfrom '@/erdiagram/converter/diagram/plantuml/relationship/PlantUmlRelationshipCodeGenerator';\n\nexport default class PlantUmlEntityRelationshipModelToDiagramCodeConverter implements EntityRelationshipModelToCodeConverter {\n\n\tprivate readonly entityCodeGenerator = new PlantUmlEntityCodeGenerator();\n\tprivate readonly relationshipCodeGenerator = new PlantUmlRelationshipCodeGenerator();\n\n\tpublic convertToCode(model: EntityRelationshipModel): string {\n\t\treturn [\n\t\t\t'@startuml',\n\t\t\t...model.entities.map(entity => this.entityCodeGenerator.generateEntityCode(entity)),\n\t\t\t...model.relationships.map(relationship => this.relationshipCodeGenerator.generateRelationshipCode(relationship)),\n\t\t\t'@enduml'\n\t\t].join('\\n\\n');\n\t}\n\n}\n","import {EntityDescriptor} from '@/erdiagram/parser/types/entity-relationship-model-types';\nimport PlantUmlEntityIdentityPropertyCodeGenerator\n\tfrom '@/erdiagram/converter/diagram/plantuml/entity/PlantUmlEntityIdentityPropertyCodeGenerator';\nimport PlantUmlEntityPropertyCodeGenerator\n\tfrom '@/erdiagram/converter/diagram/plantuml/entity/PlantUmlEntityPropertyCodeGenerator';\nimport {indentLines} from '@/erdiagram/util/indent-utils';\n\nexport default class PlantUmlEntityCodeGenerator {\n\n\tprivate readonly entityIdentityPropertyCodeGenerator = new PlantUmlEntityIdentityPropertyCodeGenerator();\n\tprivate readonly entityPropertyCodeGenerator = new PlantUmlEntityPropertyCodeGenerator();\n\n\tpublic generateEntityCode(entity: EntityDescriptor): string {\n\n\t\tconst propertiesCode = this.generateEntityPropertiesCode(entity);\n\n\t\tif (!propertiesCode) {\n\t\t\treturn `class ${entity.name} {}`;\n\t\t}\n\n\t\treturn [\n\t\t\t`class ${entity.name} {`,\n\t\t\tpropertiesCode,\n\t\t\t'}'\n\t\t].join('\\n');\n\n\t}\n\n\tprivate generateEntityPropertiesCode(entity: EntityDescriptor): string {\n\n\t\tconst {\n\t\t\tidentityPropertyName,\n\t\t\tproperties\n\t\t} = entity;\n\n\t\tconst propertiesCode = properties.map(property => this.entityPropertyCodeGenerator.generateEntityPropertyCode(property));\n\n\t\tif (identityPropertyName) {\n\t\t\tpropertiesCode.unshift(this.entityIdentityPropertyCodeGenerator.generateEntityIdentityPropertyCode(identityPropertyName));\n\t\t}\n\n\t\treturn indentLines(propertiesCode).join('\\n');\n\n\t}\n\n}\n","import {EntityPropertyType} from '@/erdiagram/parser/types/entity-relationship-model-types';\n\nexport default class PlantUmlEntityIdentityPropertyCodeGenerator {\n\n\tpublic generateEntityIdentityPropertyCode(identityPropertyName: string): string {\n\t\treturn `{field} ${identityPropertyName}: ${EntityPropertyType.IDENTITY}`;\n\t}\n\n}\n","import {EntityPropertyDescriptor, EntityPropertyType} from '@/erdiagram/parser/types/entity-relationship-model-types';\n\nexport default class PlantUmlEntityPropertyCodeGenerator {\n\n\tpublic generateEntityPropertyCode(property: EntityPropertyDescriptor): string {\n\n\t\tconst {\n\t\t\tname,\n\t\t\ttype,\n\t\t\tlength,\n\t\t\toptional,\n\t\t\tunique\n\t\t} = property;\n\n\t\tconst typeWithLengthCode = this.getTypeWithLengthCode(type, length);\n\n\t\tconst modifiersCode = this.getModifiersCode(optional, unique);\n\n\t\treturn `{field} ${name}${modifiersCode}: ${typeWithLengthCode}`;\n\n\t}\n\n\tprivate getTypeWithLengthCode(type: EntityPropertyType, length: number[]): string {\n\n\t\tif (length.length === 0) {\n\t\t\treturn type;\n\t\t}\n\n\t\treturn `${type}(${length.join(', ')})`;\n\n\t}\n\n\tprivate getModifiersCode(optional: boolean, unique: boolean) {\n\n\t\tconst optionalModifierCode = optional ? '?' : '';\n\t\tconst uniqueModifierCode = unique ? '!' : '';\n\n\t\treturn optionalModifierCode + uniqueModifierCode;\n\n\t}\n\n}\n","import PlantUmlEntityRelationshipModelToDiagramCodeConverter\n\tfrom './PlantUmlEntityRelationshipModelToDiagramCodeConverter';\n\nexport {\n\tPlantUmlEntityRelationshipModelToDiagramCodeConverter\n};\n","import {Cardinality} from '@/erdiagram/parser/types/entity-relationship-model-types';\n\nexport default class PlantUmlRelationshipCardinalityCodeGenerator {\n\n\tpublic generateCardinalityCode(cardinality: Cardinality): string {\n\t\tswitch (cardinality) {\n\t\t\tcase Cardinality.ZERO_OR_ONE:\n\t\t\t\treturn '0..1';\n\t\t\tcase Cardinality.ONE:\n\t\t\t\treturn '1';\n\t\t\tcase Cardinality.MANY:\n\t\t\t\treturn '*';\n\t\t}\n\t}\n\n}\n","import {RelationshipDescriptor} from '@/erdiagram/parser/types/entity-relationship-model-types';\nimport PlantUmlRelationshipDirectionCodeGenerator\n\tfrom '@/erdiagram/converter/diagram/plantuml/relationship/PlantUmlRelationshipDirectionCodeGenerator';\nimport PlantUmlRelationshipCardinalityCodeGenerator\n\tfrom '@/erdiagram/converter/diagram/plantuml/relationship/PlantUmlRelationshipCardinalityCodeGenerator';\n\nexport default class PlantUmlRelationshipCodeGenerator {\n\n\tprivate readonly relationshipDirectionCodeGenerator = new PlantUmlRelationshipDirectionCodeGenerator();\n\tprivate readonly relationshipCardinalityCodeGenerator = new PlantUmlRelationshipCardinalityCodeGenerator();\n\n\tpublic generateRelationshipCode(relationship: RelationshipDescriptor): string {\n\n\t\tconst {\n\t\t\tleftMember,\n\t\t\trightMember,\n\t\t\tdirection\n\t\t} = relationship;\n\n\t\tconst leftMemberCardinalityCode = this.relationshipCardinalityCodeGenerator.generateCardinalityCode(leftMember.cardinality);\n\t\tconst rightMemberCardinalityCode = this.relationshipCardinalityCodeGenerator.generateCardinalityCode(rightMember.cardinality);\n\n\t\tconst directionCode = this.relationshipDirectionCodeGenerator.generateDirectionCode(direction);\n\n\t\tconst relationshipCode = `${leftMember.entity} \"${leftMemberCardinalityCode}\" ${directionCode} \"${rightMemberCardinalityCode}\" ${rightMember.entity}`;\n\n\t\tif (relationship.relationshipName) {\n\t\t\treturn `${relationshipCode} : ${relationship.relationshipName}`;\n\t\t} else {\n\t\t\treturn relationshipCode;\n\t\t}\n\n\t}\n\n}\n","import {Direction} from '@/erdiagram/parser/types/entity-relationship-model-types';\n\nexport default class PlantUmlRelationshipDirectionCodeGenerator {\n\n\tpublic generateDirectionCode(direction: Direction): string {\n\t\tswitch (direction) {\n\t\t\tcase Direction.LEFT_TO_RIGHT:\n\t\t\t\treturn '-->';\n\t\t\tcase Direction.RIGHT_TO_LEFT:\n\t\t\t\treturn '<--';\n\t\t\tcase Direction.BIDIRECTIONAL:\n\t\t\t\treturn '<-->';\n\t\t}\n\t}\n\n}\n","import EntityRelationshipModelToCodeConverter from './EntityRelationshipModelToCodeConverter';\n\nexport * from './common/exports';\nexport * from './database/exports';\nexport * from './oop/exports';\nexport * from './diagram/exports';\n\nexport {\n\tEntityRelationshipModelToCodeConverter\n};\n","import EntityRelationshipModelToCodeConverter from '@/erdiagram/converter/EntityRelationshipModelToCodeConverter';\nimport ClassModelToCodeConverter from '@/erdiagram/converter/oop/code-converter/ClassModelToCodeConverter';\nimport {EntityRelationshipModel} from '@/erdiagram/parser/types/entity-relationship-model-types';\nimport ClassModelGenerator from '@/erdiagram/converter/oop/model/ClassModelGenerator';\n\nexport default class EntityRelationshipModelToClassCodeConverter implements EntityRelationshipModelToCodeConverter {\n\n\tconstructor(\n\t\t\tprivate readonly classModelGenerator: ClassModelGenerator,\n\t\t\tprivate readonly classModelToCodeConverter: ClassModelToCodeConverter\n\t) {\n\n\t}\n\n\tpublic convertToCode(entityRelationshipModel: EntityRelationshipModel): string {\n\t\tconst classModel = this.classModelGenerator.generateClassModel(entityRelationshipModel);\n\t\treturn this.classModelToCodeConverter.convertToCode(classModel);\n\t}\n\n}\n","import ClassModelToCodeConverterConfig from './ClassModelToCodeConverterConfig';\nimport ClassModelToCodeConverterSerializableConfig from './ClassModelToCodeConverterSerializableConfig';\nimport ClassModelToCodeConverter from './ClassModelToCodeConverter';\nimport EntityRelationshipModelToClassCodeConverter from './EntityRelationshipModelToClassCodeConverter';\n\nexport * from './java/exports';\nexport * from './typescript/exports';\n\nexport {\n\tClassModelToCodeConverter,\n\tClassModelToCodeConverterConfig,\n\tClassModelToCodeConverterSerializableConfig,\n\tEntityRelationshipModelToClassCodeConverter\n};\n","import {capitalizeWord} from '@/erdiagram/util/string-utils';\nimport {ClassDescriptor, ClassFieldDescriptor, ClassModel} from '@/erdiagram/converter/oop/model/class-model-types';\nimport {indentLine, indentLines} from '@/erdiagram/util/indent-utils';\nimport JavaType from '@/erdiagram/converter/oop/code-converter/java/type/JavaType';\nimport ClassModelToCodeConverter from '@/erdiagram/converter/oop/code-converter/ClassModelToCodeConverter';\nimport JavaClassModelToCodeConverterConfig\n\tfrom '@/erdiagram/converter/oop/code-converter/java/config/JavaClassModelToCodeConverterConfig';\nimport javaClassModelToCodeConverterConfigManager\n\tfrom '@/erdiagram/converter/oop/code-converter/java/config/JavaClassModelToCodeConverterConfigManager';\nimport JavaFieldTypeResolver from '@/erdiagram/converter/oop/code-converter/java/type/JavaFieldTypeResolver';\nimport JavaImportStatementsGenerator\n\tfrom '@/erdiagram/converter/oop/code-converter/java/type/import/JavaImportStatementsGenerator';\nimport JavaValidationAnnotationsGenerator\n\tfrom '@/erdiagram/converter/oop/code-converter/java/annotation/validation/JavaValidationAnnotationsGenerator';\n\nconst EMPTY_STRING: string = '';\n\nexport default class JavaClassModelToCodeConverter implements ClassModelToCodeConverter {\n\n\tprivate readonly config: JavaClassModelToCodeConverterConfig;\n\tprivate readonly typeResolver: JavaFieldTypeResolver;\n\tprivate readonly validationAnnotationsGenerator: JavaValidationAnnotationsGenerator;\n\tprivate readonly importStatementsGenerator: JavaImportStatementsGenerator;\n\n\tconstructor(config?: Partial<JavaClassModelToCodeConverterConfig>) {\n\n\t\tthis.config = javaClassModelToCodeConverterConfigManager.mergeWithDefaultConfig(config);\n\n\t\tthis.typeResolver = new JavaFieldTypeResolver(this.config.typeBindings, this.config.generatedClassesPackage);\n\n\t\tthis.validationAnnotationsGenerator = new JavaValidationAnnotationsGenerator(\n\t\t\t\tthis.config.notNullTextValidationStrategy,\n\t\t\t\tthis.config.notNullBlobValidationStrategy\n\t\t);\n\n\t\tthis.importStatementsGenerator = new JavaImportStatementsGenerator(this.config.generatedClassesPackage);\n\n\t}\n\n\tpublic convertToCode(classModel: ClassModel): string {\n\t\treturn classModel.classes\n\t\t\t\t.map(classDescriptor => this.generateClass(classDescriptor))\n\t\t\t\t.join('\\n\\n');\n\t}\n\n\tprivate generateClass(classDescriptor: ClassDescriptor): string {\n\n\t\tconst className = capitalizeWord(classDescriptor.name);\n\n\t\tconst usedTypes: JavaType[] = [];\n\t\tconst fieldsLines: string[] = [];\n\t\tconst methodsLines: string[] = [];\n\n\t\tfor (const field of classDescriptor.fields) {\n\n\t\t\tconst {\n\t\t\t\tusedTypes: fieldUsedTypes,\n\t\t\t\tfieldLines,\n\t\t\t\tgetterLines,\n\t\t\t\tsetterLines\n\t\t\t} = this.createField(field);\n\n\t\t\tusedTypes.push(...fieldUsedTypes);\n\t\t\tfieldsLines.push(...fieldLines);\n\t\t\tmethodsLines.push(...getterLines, EMPTY_STRING, ...setterLines, EMPTY_STRING);\n\n\t\t}\n\n\t\tconst classOuterLines = [\n\t\t\t`/* ========== ${className} class ========== */`,\n\t\t\tEMPTY_STRING\n\t\t];\n\n\t\tif (this.config.generatedClassesPackage) {\n\t\t\tclassOuterLines.push(`package ${this.config.generatedClassesPackage};`, EMPTY_STRING);\n\t\t}\n\n\t\tconst importLines = this.importStatementsGenerator.generateImportStatements(usedTypes);\n\n\t\tif (importLines.length !== 0) {\n\t\t\tclassOuterLines.push(...importLines, EMPTY_STRING);\n\t\t}\n\n\t\tclassOuterLines.push(`public class ${className} {`);\n\n\t\tconst classContentLines: string[] = [\n\t\t\tEMPTY_STRING,\n\t\t\t...fieldsLines,\n\t\t\tEMPTY_STRING,\n\t\t\t...methodsLines\n\t\t];\n\n\t\tclassOuterLines.push(...indentLines(classContentLines));\n\n\t\tclassOuterLines.push(`}`);\n\n\t\treturn classOuterLines.join('\\n');\n\n\t}\n\n\tprivate createField(field: ClassFieldDescriptor) {\n\n\t\tconst fieldName = field.name;\n\t\tconst capitalizedFieldName = capitalizeWord(fieldName);\n\n\t\tconst fieldLines: string[] = [];\n\t\tconst usedTypes: JavaType[] = [];\n\n\t\tthis.addValidationAnnotationsIfApply(field, fieldLines, usedTypes);\n\n\t\tconst fieldType = this.typeResolver.resolveFieldType(field);\n\t\tusedTypes.push(fieldType);\n\n\t\tconst formattedJavaType = fieldType.formatSimple();\n\n\t\tfieldLines.push(`private ${formattedJavaType} ${fieldName};`);\n\n\t\tconst getterLines: string[] = [\n\t\t\t`public ${formattedJavaType} get${capitalizedFieldName}() {`,\n\t\t\tindentLine(`return ${fieldName};`),\n\t\t\t'}',\n\t\t];\n\n\t\tconst setterLines: string[] = [\n\t\t\t`public void set${capitalizedFieldName}(${formattedJavaType} ${fieldName}) {`,\n\t\t\tindentLine(`this.${fieldName} = ${fieldName};`),\n\t\t\t'}',\n\t\t];\n\n\t\treturn {\n\t\t\tusedTypes,\n\t\t\tfieldLines,\n\t\t\tgetterLines,\n\t\t\tsetterLines\n\t\t};\n\n\t}\n\n\tprivate addValidationAnnotationsIfApply(field: ClassFieldDescriptor, fieldLines: string[], usedTypes: JavaType[]) {\n\n\t\tif (!this.config.useValidationAnnotations) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.validationAnnotationsGenerator.getValidationAnnotations(field)\n\t\t\t\t.forEach(({annotationType, codeLine}) => {\n\t\t\t\t\tfieldLines.push(codeLine);\n\t\t\t\t\tusedTypes.push(annotationType);\n\t\t\t\t});\n\n\t}\n}\n","import {createJavaType} from '@/erdiagram/converter/oop/code-converter/java/type/JavaType';\n\nconst VALIDATION_ANNOTATIONS_PACKAGE = 'javax.validation.constraints';\n\nconst JavaValidationAnnotationTypes = {\n\tNotNull: createJavaType('NotNull', VALIDATION_ANNOTATIONS_PACKAGE),\n\tNotEmpty: createJavaType('NotEmpty', VALIDATION_ANNOTATIONS_PACKAGE),\n\tNotBlank: createJavaType('NotBlank', VALIDATION_ANNOTATIONS_PACKAGE),\n\tSize: createJavaType('Size', VALIDATION_ANNOTATIONS_PACKAGE)\n};\n\nexport default JavaValidationAnnotationTypes;\n","import {ClassFieldDescriptor} from '@/erdiagram/converter/oop/model/class-model-types';\nimport JavaType from '@/erdiagram/converter/oop/code-converter/java/type/JavaType';\nimport {EntityPropertyType} from '@/erdiagram/parser/types/entity-relationship-model-types';\nimport {ERDiagramSyntaxError} from '@/erdiagram/parser/types/parse-errors';\nimport NotNullTextValidationStrategy\n\tfrom '@/erdiagram/converter/oop/code-converter/java/annotation/validation/NotNullTextValidationStrategy';\nimport {removeNullableValues} from '@/erdiagram/util/array-utils';\nimport JavaValidationAnnotationTypes\n\tfrom '@/erdiagram/converter/oop/code-converter/java/annotation/validation/JavaValidationAnnotationTypes';\nimport NotNullBlobValidationStrategy\n\tfrom '@/erdiagram/converter/oop/code-converter/java/annotation/validation/NotNullBlobValidationStrategy';\n\nexport interface FieldAnnotation {\n\tcodeLine: string;\n\tannotationType: JavaType;\n}\n\nexport default class JavaValidationAnnotationsGenerator {\n\n\tconstructor(\n\t\t\tprivate readonly notNullTextValidationStrategy: NotNullTextValidationStrategy,\n\t\t\tprivate readonly notNullBlobValidationStrategy: NotNullBlobValidationStrategy,\n\t) {\n\n\t}\n\n\tpublic getValidationAnnotations(field: ClassFieldDescriptor): FieldAnnotation[] {\n\t\treturn removeNullableValues([\n\t\t\tthis.getNotNullAnnotation(field),\n\t\t\tthis.getSizeAnnotation(field)\n\t\t]);\n\t}\n\n\tprivate getNotNullAnnotation(field: ClassFieldDescriptor): FieldAnnotation | null {\n\n\t\tif (field.nullable) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst annotationType = this.getNotNullAnnotationForField(field);\n\n\t\treturn {\n\t\t\tannotationType,\n\t\t\tcodeLine: this.formatAnnotation(annotationType)\n\t\t};\n\n\t}\n\n\tprivate getSizeAnnotation(field: ClassFieldDescriptor): FieldAnnotation | null {\n\n\t\tconst {maxSize} = field;\n\n\t\tif (maxSize == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst annotationType = JavaValidationAnnotationTypes.Size;\n\n\t\treturn {\n\t\t\tannotationType,\n\t\t\tcodeLine: this.formatAnnotation(annotationType, {max: maxSize})\n\t\t};\n\n\t}\n\n\tprivate getNotNullAnnotationForField(field: ClassFieldDescriptor) {\n\t\tswitch (field.primitiveType) {\n\t\t\tcase EntityPropertyType.TEXT:\n\t\t\t\treturn this.getNotNullAnnotationForTextType();\n\t\t\tcase EntityPropertyType.BLOB:\n\t\t\t\treturn this.getNotNullAnnotationForBlobType();\n\t\t\tdefault:\n\t\t\t\treturn JavaValidationAnnotationTypes.NotNull;\n\t\t}\n\t}\n\n\tprivate getNotNullAnnotationForTextType() {\n\t\tswitch (this.notNullTextValidationStrategy) {\n\t\t\tcase NotNullTextValidationStrategy.NOT_NULL:\n\t\t\t\treturn JavaValidationAnnotationTypes.NotNull;\n\t\t\tcase NotNullTextValidationStrategy.NOT_EMPTY:\n\t\t\t\treturn JavaValidationAnnotationTypes.NotEmpty;\n\t\t\tcase NotNullTextValidationStrategy.NOT_BLANK:\n\t\t\t\treturn JavaValidationAnnotationTypes.NotBlank;\n\t\t\t\t/* istanbul ignore next */\n\t\t\tdefault:\n\t\t\t\t/* istanbul ignore next */\n\t\t\t\tthrow new ERDiagramSyntaxError(`Unknown statement type`);\n\t\t}\n\t}\n\n\tprivate getNotNullAnnotationForBlobType() {\n\t\tswitch (this.notNullBlobValidationStrategy) {\n\t\t\tcase NotNullBlobValidationStrategy.NOT_NULL:\n\t\t\t\treturn JavaValidationAnnotationTypes.NotNull;\n\t\t\tcase NotNullBlobValidationStrategy.NOT_EMPTY:\n\t\t\t\treturn JavaValidationAnnotationTypes.NotEmpty;\n\t\t\t\t/* istanbul ignore next */\n\t\t\tdefault:\n\t\t\t\t/* istanbul ignore next */\n\t\t\t\tthrow new ERDiagramSyntaxError(`Unknown statement type`);\n\t\t}\n\t}\n\n\tprivate formatAnnotation(type: JavaType, params: Record<string, any> = {}): string {\n\n\t\tconst simpleName = type.formatSimple();\n\t\tconst formattedParams = this.formatAnnotationParams(params);\n\n\t\treturn `@${simpleName}${formattedParams}`;\n\n\t}\n\n\tprivate formatAnnotationParams(annotationParams: Record<string, any>) {\n\n\t\tconst annotationParamsEntries = Object.entries(annotationParams);\n\n\t\tif (annotationParamsEntries.length === 0) {\n\t\t\treturn '';\n\t\t}\n\n\t\tconst formattedParams = annotationParamsEntries.map(([paramName, paramValue]) => `${paramName} = ${paramValue}`);\n\n\t\treturn `(${formattedParams.join(', ')})`;\n\n\t}\n\n}\n","enum NotNullBlobValidationStrategy {\n\tNOT_NULL = 'not_null',\n\tNOT_EMPTY = 'not_empty'\n}\n\nexport default NotNullBlobValidationStrategy;\n","enum NotNullTextValidationStrategy {\n\tNOT_NULL = 'not_null',\n\tNOT_EMPTY = 'not_empty',\n\tNOT_BLANK = 'not_blank'\n}\n\nexport default NotNullTextValidationStrategy;\n","import {EntityPropertyType} from '@/erdiagram/parser/types/entity-relationship-model-types';\nimport AbstractComponentConfigManager from '@/erdiagram/common/config/AbstractComponentConfigManager';\nimport JavaClassModelToCodeConverterConfig\n\tfrom '@/erdiagram/converter/oop/code-converter/java/config/JavaClassModelToCodeConverterConfig';\nimport parseJavaType from '@/erdiagram/converter/oop/code-converter/java/type/parseJavaType';\nimport {mapValues} from '@/erdiagram/util/record-utils';\nimport JavaClassModelToCodeConverterSerializableConfig\n\tfrom '@/erdiagram/converter/oop/code-converter/java/config/JavaClassModelToCodeConverterSerializableConfig';\nimport NotNullTextValidationStrategy\n\tfrom '@/erdiagram/converter/oop/code-converter/java/annotation/validation/NotNullTextValidationStrategy';\nimport NotNullBlobValidationStrategy\n\tfrom '@/erdiagram/converter/oop/code-converter/java/annotation/validation/NotNullBlobValidationStrategy';\n\nexport class JavaClassModelToCodeConverterConfigManager\n\t\textends AbstractComponentConfigManager<JavaClassModelToCodeConverterConfig, Partial<JavaClassModelToCodeConverterConfig>, JavaClassModelToCodeConverterSerializableConfig> {\n\n\tgetDefaultConfig(): JavaClassModelToCodeConverterConfig {\n\t\treturn {\n\t\t\ttypeBindings: {\n\t\t\t\t[EntityPropertyType.IDENTITY]: parseJavaType('java.lang.Long'),\n\t\t\t\t[EntityPropertyType.TEXT]: parseJavaType('java.lang.String'),\n\t\t\t\t[EntityPropertyType.LONG]: parseJavaType('java.lang.Long'),\n\t\t\t\t[EntityPropertyType.INT]: parseJavaType('java.lang.Integer'),\n\t\t\t\t[EntityPropertyType.SHORT]: parseJavaType('java.lang.Short'),\n\t\t\t\t[EntityPropertyType.DECIMAL]: parseJavaType('java.math.BigDecimal'),\n\t\t\t\t[EntityPropertyType.BOOLEAN]: parseJavaType('java.lang.Boolean'),\n\t\t\t\t[EntityPropertyType.DATE]: parseJavaType('java.time.LocalDate'),\n\t\t\t\t[EntityPropertyType.TIME]: parseJavaType('java.time.LocalTime'),\n\t\t\t\t[EntityPropertyType.DATETIME]: parseJavaType('java.time.LocalDateTime'),\n\t\t\t\t[EntityPropertyType.BLOB]: parseJavaType('byte[]')\n\t\t\t},\n\t\t\tuseValidationAnnotations: false,\n\t\t\tnotNullTextValidationStrategy: NotNullTextValidationStrategy.NOT_NULL,\n\t\t\tnotNullBlobValidationStrategy: NotNullBlobValidationStrategy.NOT_NULL\n\t\t};\n\t}\n\n\tmergeConfigs(fullConfig: JavaClassModelToCodeConverterConfig, partialConfig?: Partial<JavaClassModelToCodeConverterConfig>): JavaClassModelToCodeConverterConfig {\n\t\treturn {\n\t\t\t...fullConfig,\n\t\t\t...partialConfig,\n\t\t\ttypeBindings: {\n\t\t\t\t...fullConfig.typeBindings,\n\t\t\t\t...partialConfig?.typeBindings\n\t\t\t}\n\t\t};\n\t}\n\n\tconvertToSerializableObject(fullConfig: JavaClassModelToCodeConverterConfig): JavaClassModelToCodeConverterSerializableConfig {\n\t\treturn {\n\t\t\t...fullConfig,\n\t\t\ttypeBindings: mapValues(fullConfig.typeBindings, javaType => javaType!.formatCanonical()),\n\t\t};\n\t}\n\n\tconvertFromSerializableObject(serializableConfig: JavaClassModelToCodeConverterSerializableConfig): JavaClassModelToCodeConverterConfig {\n\t\treturn {\n\t\t\t...serializableConfig,\n\t\t\ttypeBindings: mapValues(serializableConfig.typeBindings, parseJavaType),\n\t\t};\n\t}\n\n}\n\nconst javaClassModelToCodeConverterConfigManager = new JavaClassModelToCodeConverterConfigManager();\nexport default javaClassModelToCodeConverterConfigManager;\n","import JavaClassModelToCodeConverterConfig from './JavaClassModelToCodeConverterConfig';\nimport JavaClassModelToCodeConverterSerializableConfig from './JavaClassModelToCodeConverterSerializableConfig';\nimport javaClassModelToCodeConverterConfigManager, {JavaClassModelToCodeConverterConfigManager} from './JavaClassModelToCodeConverterConfigManager';\n\nexport {\n\tJavaClassModelToCodeConverterConfig,\n\tJavaClassModelToCodeConverterSerializableConfig,\n\tJavaClassModelToCodeConverterConfigManager,\n\tjavaClassModelToCodeConverterConfigManager\n};\n","import JavaType, {createJavaType} from './type/JavaType';\nimport JavaParameterizedType, {\n\tcreateJavaArrayType,\n\tcreateJavaParameterizedType,\n\tisJavaParameterizedType\n} from './type/JavaParameterizedType';\nimport parseJavaType from './type/parseJavaType';\nimport JavaClassModelToCodeConverter from './JavaClassModelToCodeConverter';\n\nexport * from './config/exports';\n\nexport {\n\tJavaType,\n\tcreateJavaType,\n\tJavaParameterizedType,\n\tcreateJavaParameterizedType,\n\tcreateJavaArrayType,\n\tisJavaParameterizedType,\n\tparseJavaType,\n\tJavaClassModelToCodeConverter\n};\n","import {ClassFieldDescriptor} from '@/erdiagram/converter/oop/model/class-model-types';\nimport JavaType, {createJavaType} from '@/erdiagram/converter/oop/code-converter/java/type/JavaType';\nimport JavaParameterizedType, {createJavaParameterizedType} from '@/erdiagram/converter/oop/code-converter/java/type/JavaParameterizedType';\nimport {EntityPropertyType} from '@/erdiagram/parser/types/entity-relationship-model-types';\nimport FieldTypeResolver from '@/erdiagram/converter/oop/code-converter/common/type/FieldTypeResolver';\n\nexport default class JavaFieldTypeResolver implements FieldTypeResolver<JavaType> {\n\n\tconstructor(\n\t\t\tprivate readonly typeBindings: Partial<Record<EntityPropertyType, JavaType>>,\n\t\t\tprivate readonly generatedClassesPackage: string | undefined\n\t) {\n\n\t}\n\n\tpublic resolveFieldType(field: ClassFieldDescriptor): JavaType {\n\t\tif (field.list) {\n\t\t\treturn this.resolveListType(field);\n\t\t} else {\n\t\t\treturn this.resolveSingleType(field);\n\t\t}\n\t}\n\n\tprivate resolveListType(field: ClassFieldDescriptor): JavaParameterizedType {\n\t\treturn createJavaParameterizedType(\n\t\t\t\t'List',\n\t\t\t\t'java.util',\n\t\t\t\t[this.resolveSingleType(field)]\n\t\t);\n\t}\n\n\tprivate resolveSingleType(field: ClassFieldDescriptor): JavaType {\n\n\t\tconst {\n\t\t\tentityType,\n\t\t\tprimitiveType\n\t\t} = field;\n\n\t\tif (entityType) {\n\n\t\t\tif (primitiveType) {\n\t\t\t\tthrow new Error('Invalid field descriptor: provided both primitive and entity types');\n\t\t\t}\n\n\t\t\treturn createJavaType(entityType, this.generatedClassesPackage);\n\n\t\t}\n\n\t\tif (!primitiveType) {\n\t\t\tthrow new Error('Invalid field descriptor: missing type');\n\t\t}\n\n\t\t/* istanbul ignore next */\n\t\tif (!this.typeBindings.hasOwnProperty(primitiveType)) {\n\t\t\tthrow new Error('Unsupported type: ' + primitiveType);\n\t\t}\n\n\t\treturn this.typeBindings[primitiveType]!;\n\n\t}\n\n}\n","import JavaType from '@/erdiagram/converter/oop/code-converter/java/type/JavaType';\n\nexport default interface JavaParameterizedType extends JavaType {\n\tparameterTypes: JavaType[];\n}\n\nexport function createJavaParameterizedType(name: string, packageName: string | undefined, parameterTypes: JavaType[]): JavaParameterizedType {\n\n\tconst canonicalName = packageName ? `${packageName}.${name}` : name;\n\n\treturn {\n\t\tpackageName,\n\t\tname,\n\t\tparameterTypes,\n\t\tcanonicalName,\n\t\tformatSimple(canonical: boolean = false) {\n\t\t\tconst formattedParameterTypes = parameterTypes.map(t => t.formatSimple()).join(', ');\n\t\t\treturn `${name}<${formattedParameterTypes}>`;\n\t\t},\n\t\tformatCanonical(canonical: boolean = false) {\n\t\t\tconst formattedParameterTypes = parameterTypes.map(t => t.formatCanonical()).join(', ');\n\t\t\treturn `${canonicalName}<${formattedParameterTypes}>`;\n\t\t}\n\t};\n}\n\nexport function createJavaArrayType(parameterType: JavaType): JavaParameterizedType {\n\n\tconst name = `${parameterType.name}[]`;\n\n\treturn {\n\t\tname,\n\t\tparameterTypes: [parameterType],\n\t\tcanonicalName: name,\n\t\tformatSimple() {\n\t\t\treturn `${parameterType.formatSimple()}[]`;\n\t\t},\n\t\tformatCanonical() {\n\t\t\treturn `${parameterType.formatCanonical()}[]`;\n\t\t}\n\t};\n\n}\n\nexport function isJavaParameterizedType(javaType: JavaType): javaType is JavaParameterizedType {\n\treturn Array.isArray((javaType as JavaParameterizedType).parameterTypes);\n}\n","export default interface JavaType {\n\n\tpackageName?: string;\n\tname: string;\n\tcanonicalName: string;\n\n\tformatSimple(): string;\n\n\tformatCanonical(): string;\n\n}\n\nexport function createJavaType(name: string, packageName?: string): JavaType {\n\n\tconst canonicalName = packageName ? `${packageName}.${name}` : name;\n\n\treturn {\n\t\tpackageName,\n\t\tname,\n\t\tcanonicalName,\n\t\tformatSimple() {\n\t\t\treturn name;\n\t\t},\n\t\tformatCanonical() {\n\t\t\treturn canonicalName;\n\t\t}\n\t};\n\n}\n","import {isJavaParameterizedType} from '@/erdiagram/converter/oop/code-converter/java/type/JavaParameterizedType';\nimport JavaType from '@/erdiagram/converter/oop/code-converter/java/type/JavaType';\nimport {removeDuplicates} from '@/erdiagram/util/array-utils';\n\nexport default class JavaImportStatementsGenerator {\n\n\tconstructor(\n\t\t\tprivate readonly generatedClassesPackage?: string\n\t) {\n\n\t}\n\n\tpublic generateImportStatements(javaTypes: JavaType[]): string[] {\n\n\t\tconst importStatements = this.unrollTypesRecursively(javaTypes)\n\t\t\t\t.filter(javaType => this.isImportRequired(javaType))\n\t\t\t\t.map(javaType => `import ${javaType.canonicalName};`);\n\n\t\treturn removeDuplicates(importStatements).sort();\n\n\t}\n\n\tprivate unrollTypesRecursively(javaTypes: JavaType[], appendTo: JavaType[] = []): JavaType[] {\n\n\t\tfor (const javaType of javaTypes) {\n\n\t\t\tappendTo.push(javaType);\n\n\t\t\tif (isJavaParameterizedType(javaType)) {\n\t\t\t\tthis.unrollTypesRecursively(javaType.parameterTypes, appendTo);\n\t\t\t}\n\n\t\t}\n\n\t\treturn appendTo;\n\n\t}\n\n\tprivate isImportRequired(javaType: JavaType): boolean {\n\t\treturn !!javaType.packageName\n\t\t\t\t&& javaType.packageName !== 'java.lang'\n\t\t\t\t&& this.generatedClassesPackage !== javaType.packageName;\n\t}\n\n}\n","import {\n\tcreateJavaArrayType,\n\tcreateJavaParameterizedType\n} from '@/erdiagram/converter/oop/code-converter/java/type/JavaParameterizedType';\nimport JavaType, {createJavaType} from '@/erdiagram/converter/oop/code-converter/java/type/JavaType';\n\nconst RAW_TYPE_REGEX = /^(?:[a-zA-Z_$][a-zA-Z_$\\d]*\\.)*[a-zA-Z_$][a-zA-Z_$\\d]*$/;\nconst ARRAY_TYPE_REGEX = /^(.*)\\[\\s*]\\s*$/;\nconst PACKAGE_SEPARATOR = '.';\n\nexport default function parseJavaType(text: string): JavaType {\n\ttry {\n\t\treturn parseJavaTypeInternal(text);\n\t} catch (error) {\n\t\tthrow new Error('Malformed Java type: ' + text);\n\t}\n}\n\nfunction parseJavaTypeInternal(text: string): JavaType {\n\n\tconst trimmedText = text.trim();\n\n\tif (ARRAY_TYPE_REGEX.test(trimmedText)) {\n\t\tconst [fullMatch, rawTypeText] = ARRAY_TYPE_REGEX.exec(trimmedText)!;\n\t\treturn createJavaArrayType(parseJavaTypeInternal(rawTypeText));\n\t}\n\n\tconst startOfParameterTypes = trimmedText.indexOf('<');\n\n\tif (startOfParameterTypes === -1) {\n\t\treturn parseJavaRawType(trimmedText);\n\t}\n\n\tconst endOfParameterTypes = trimmedText.lastIndexOf('>');\n\n\tif (endOfParameterTypes === -1) {\n\t\tthrow new Error('Missing end character of parameter types (>)');\n\t}\n\n\tif (endOfParameterTypes !== trimmedText.length - 1) {\n\t\tthrow new Error('Unexpected characters found after parameter types');\n\t}\n\n\tconst rawType = parseJavaRawType(trimmedText.substring(0, startOfParameterTypes));\n\n\tconst parameterTypes = splitParameterTypes(trimmedText.substring(startOfParameterTypes + 1, endOfParameterTypes))\n\t\t\t.map(parameterType => parseJavaTypeInternal(parameterType));\n\n\treturn createJavaParameterizedType(rawType.name, rawType.packageName, parameterTypes);\n\n}\n\nfunction parseJavaRawType(text: string): JavaType {\n\n\tconst trimmedText = trimRawJavaTypeParts(text.trim());\n\n\tif (!RAW_TYPE_REGEX.test(trimmedText)) {\n\t\tthrow new Error(`Illegal Java type format: ${text}`);\n\t}\n\n\tconst lastDotIndex = trimmedText.lastIndexOf(PACKAGE_SEPARATOR);\n\n\tif (lastDotIndex === -1) {\n\t\treturn createJavaType(trimmedText);\n\t}\n\n\tconst packageName = trimmedText.substring(0, lastDotIndex);\n\tconst className = trimmedText.substring(lastDotIndex + 1);\n\n\treturn createJavaType(className, packageName);\n\n}\n\nfunction trimRawJavaTypeParts(packageName: string): string {\n\treturn packageName.split(PACKAGE_SEPARATOR).map(e => e.trim()).join(PACKAGE_SEPARATOR);\n}\n\nfunction splitParameterTypes(parameterTypesText: string): string[] {\n\n\tif (!parameterTypesText.includes(',')) {\n\t\treturn [parameterTypesText];\n\t}\n\n\tconst commaIndices: number[] = [];\n\n\tlet nestedLevelsCount = 0;\n\n\t[...parameterTypesText].forEach((character, index) => {\n\t\tswitch (character) {\n\t\t\tcase ',':\n\t\t\t\tif (nestedLevelsCount === 0) {\n\t\t\t\t\tcommaIndices.push(index);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase '<':\n\t\t\t\tnestedLevelsCount++;\n\t\t\t\tbreak;\n\t\t\tcase '>':\n\t\t\t\tif (nestedLevelsCount === 0) {\n\t\t\t\t\tthrow new Error('Unexpected character \">\"');\n\t\t\t\t}\n\t\t\t\tnestedLevelsCount--;\n\t\t\t\tbreak;\n\t\t}\n\t});\n\n\tconst splittedParameterTypes: string[] = [];\n\tlet startIndex = 0;\n\n\tfor (const commaIndex of commaIndices) {\n\t\tsplittedParameterTypes.push(parameterTypesText.substring(startIndex, commaIndex));\n\t\tstartIndex = commaIndex + 1;\n\t}\n\n\t// Text after the last comma\n\tsplittedParameterTypes.push(parameterTypesText.substring(startIndex));\n\n\treturn splittedParameterTypes;\n\n}\n","import {capitalizeWord} from '@/erdiagram/util/string-utils';\nimport {ClassDescriptor, ClassFieldDescriptor, ClassModel} from '@/erdiagram/converter/oop/model/class-model-types';\nimport {indentLines} from '@/erdiagram/util/indent-utils';\nimport ClassModelToCodeConverter from '@/erdiagram/converter/oop/code-converter/ClassModelToCodeConverter';\nimport TypeScriptClassModelToCodeConverterConfig\n\tfrom '@/erdiagram/converter/oop/code-converter/typescript/config/TypeScriptClassModelToCodeConverterConfig';\nimport typescriptClassModelToCodeConverterConfigManager\n\tfrom '@/erdiagram/converter/oop/code-converter/typescript/config/TypeScriptClassModelToCodeConverterConfigManager';\nimport TypeScriptTypeResolver from '@/erdiagram/converter/oop/code-converter/typescript/type/TypeScriptTypeResolver';\n\nexport default class TypeScriptClassModelToCodeConverter implements ClassModelToCodeConverter {\n\n\tprivate readonly config: TypeScriptClassModelToCodeConverterConfig;\n\tprivate readonly typeResolver: TypeScriptTypeResolver;\n\n\tconstructor(config?: Partial<TypeScriptClassModelToCodeConverterConfig>) {\n\t\tthis.config = typescriptClassModelToCodeConverterConfigManager.mergeWithDefaultConfig(config);\n\t\tthis.typeResolver = new TypeScriptTypeResolver(this.config.typeBindings);\n\t}\n\n\tpublic convertToCode(classModel: ClassModel): string {\n\t\treturn classModel.classes\n\t\t\t\t.map(classDescriptor => this.generateClass(classDescriptor))\n\t\t\t\t.join('\\n\\n');\n\t}\n\n\tprivate generateClass(classDescriptor: ClassDescriptor): string {\n\n\t\tconst interfaceName = capitalizeWord(classDescriptor.name);\n\n\t\tconst fieldsLines: string[] = classDescriptor.fields\n\t\t\t\t.map(field => this.createField(field));\n\n\t\tconst classOuterLines = [\n\t\t\t`interface ${interfaceName} {`\n\t\t];\n\n\t\tclassOuterLines.push(...indentLines(fieldsLines));\n\n\t\tclassOuterLines.push(`}`);\n\n\t\treturn classOuterLines.join('\\n');\n\n\t}\n\n\tprivate createField(field: ClassFieldDescriptor) {\n\n\t\tconst fieldName = field.name;\n\n\t\tconst typescriptType = this.typeResolver.resolveFieldType(field);\n\t\tconst formattedTypeScriptType = typescriptType.format();\n\t\tconst optionalIndicatorChar = field.nullable ? '?' : '';\n\n\t\treturn `${fieldName}${optionalIndicatorChar}: ${formattedTypeScriptType};`;\n\n\t}\n\n}\n","import {EntityPropertyType} from '@/erdiagram/parser/types/entity-relationship-model-types';\nimport AbstractComponentConfigManager from '@/erdiagram/common/config/AbstractComponentConfigManager';\nimport TypeScriptClassModelToCodeConverterConfig\n\tfrom '@/erdiagram/converter/oop/code-converter/typescript/config/TypeScriptClassModelToCodeConverterConfig';\nimport parseTypeScriptType from '@/erdiagram/converter/oop/code-converter/typescript/type/parseTypeScriptType';\nimport TypeScriptClassModelToCodeConverterSerializableConfig\n\tfrom '@/erdiagram/converter/oop/code-converter/typescript/config/TypeScriptClassModelToCodeConverterSerializableConfig';\nimport {mapValues} from '@/erdiagram/util/record-utils';\n\nexport class TypeScriptClassModelToCodeConverterConfigManager\n\t\textends AbstractComponentConfigManager<TypeScriptClassModelToCodeConverterConfig, Partial<TypeScriptClassModelToCodeConverterConfig>, TypeScriptClassModelToCodeConverterSerializableConfig> {\n\n\tgetDefaultConfig(): TypeScriptClassModelToCodeConverterConfig {\n\t\treturn {\n\t\t\ttypeBindings: {\n\t\t\t\t[EntityPropertyType.IDENTITY]: parseTypeScriptType('number'),\n\t\t\t\t[EntityPropertyType.TEXT]: parseTypeScriptType('string'),\n\t\t\t\t[EntityPropertyType.LONG]: parseTypeScriptType('number'),\n\t\t\t\t[EntityPropertyType.INT]: parseTypeScriptType('number'),\n\t\t\t\t[EntityPropertyType.SHORT]: parseTypeScriptType('number'),\n\t\t\t\t[EntityPropertyType.DECIMAL]: parseTypeScriptType('number'),\n\t\t\t\t[EntityPropertyType.BOOLEAN]: parseTypeScriptType('boolean'),\n\t\t\t\t[EntityPropertyType.DATE]: parseTypeScriptType('Date'),\n\t\t\t\t[EntityPropertyType.TIME]: parseTypeScriptType('Date'),\n\t\t\t\t[EntityPropertyType.DATETIME]: parseTypeScriptType('Date'),\n\t\t\t\t[EntityPropertyType.BLOB]: parseTypeScriptType('Uint8Array'),\n\t\t\t}\n\t\t};\n\t}\n\n\tmergeConfigs(fullConfig: TypeScriptClassModelToCodeConverterConfig, partialConfig?: Partial<TypeScriptClassModelToCodeConverterConfig>): TypeScriptClassModelToCodeConverterConfig {\n\t\treturn {\n\t\t\t...fullConfig,\n\t\t\t...partialConfig,\n\t\t\ttypeBindings: {\n\t\t\t\t...fullConfig.typeBindings,\n\t\t\t\t...partialConfig?.typeBindings\n\t\t\t}\n\t\t};\n\t}\n\n\tconvertToSerializableObject(fullConfig: TypeScriptClassModelToCodeConverterConfig): TypeScriptClassModelToCodeConverterSerializableConfig {\n\t\treturn {\n\t\t\t...fullConfig,\n\t\t\ttypeBindings: mapValues(fullConfig.typeBindings, typeScriptType => typeScriptType!.format()),\n\t\t};\n\t}\n\n\tconvertFromSerializableObject(serializableConfig: TypeScriptClassModelToCodeConverterSerializableConfig): TypeScriptClassModelToCodeConverterConfig {\n\t\treturn {\n\t\t\t...serializableConfig,\n\t\t\ttypeBindings: mapValues(serializableConfig.typeBindings, parseTypeScriptType),\n\t\t};\n\t}\n\n}\n\nconst typescriptClassModelToCodeConverterConfigManager = new TypeScriptClassModelToCodeConverterConfigManager();\nexport default typescriptClassModelToCodeConverterConfigManager;\n","import TypeScriptClassModelToCodeConverterConfig from './TypeScriptClassModelToCodeConverterConfig';\nimport TypeScriptClassModelToCodeConverterSerializableConfig\n\tfrom './TypeScriptClassModelToCodeConverterSerializableConfig';\nimport typescriptClassModelToCodeConverterConfigManager, {TypeScriptClassModelToCodeConverterConfigManager} from './TypeScriptClassModelToCodeConverterConfigManager';\n\nexport {\n\tTypeScriptClassModelToCodeConverterConfig,\n\tTypeScriptClassModelToCodeConverterSerializableConfig,\n\tTypeScriptClassModelToCodeConverterConfigManager,\n\ttypescriptClassModelToCodeConverterConfigManager\n};\n","import TypeScriptType, {createTypeScriptType} from './type/TypeScriptType';\nimport TypeScriptParameterizedType, {\n\tcreateTypeScriptArrayType,\n\tcreateTypeScriptParameterizedType,\n\tisTypeScriptParameterizedType\n} from './type/TypeScriptParameterizedType';\nimport parseTypeScriptType from './type/parseTypeScriptType';\nimport TypeScriptClassModelToCodeConverter from './TypeScriptClassModelToCodeConverter';\n\nexport * from './config/exports';\n\nexport {\n\tTypeScriptType,\n\tcreateTypeScriptType,\n\tTypeScriptParameterizedType,\n\tcreateTypeScriptParameterizedType,\n\tcreateTypeScriptArrayType,\n\tisTypeScriptParameterizedType,\n\tparseTypeScriptType,\n\tTypeScriptClassModelToCodeConverter\n};\n","import TypeScriptType from '@/erdiagram/converter/oop/code-converter/typescript/type/TypeScriptType';\n\nexport default interface TypeScriptParameterizedType extends TypeScriptType {\n\tparameterTypes: TypeScriptType[];\n}\n\nexport function createTypeScriptParameterizedType(name: string, parameterTypes: TypeScriptType[]): TypeScriptParameterizedType {\n\treturn {\n\t\tname,\n\t\tparameterTypes,\n\t\tformat: () => {\n\t\t\tconst formattedParameterTypes = parameterTypes.map(t => t.format()).join(', ');\n\t\t\treturn `${name}<${formattedParameterTypes}>`;\n\t\t}\n\t};\n}\n\nexport function createTypeScriptArrayType(parameterType: TypeScriptType): TypeScriptParameterizedType {\n\treturn {\n\t\tname: 'Array',\n\t\tparameterTypes: [parameterType],\n\t\tformat: () => `${parameterType.format()}[]`\n\t};\n}\n\nexport function isTypeScriptParameterizedType(javaType: TypeScriptType): javaType is TypeScriptParameterizedType {\n\treturn Array.isArray((javaType as TypeScriptParameterizedType).parameterTypes);\n}\n","export default interface TypeScriptType {\n\n\tname: string;\n\n\tformat(): string;\n\n}\n\nexport function createTypeScriptType(name: string): TypeScriptType {\n\treturn {\n\t\tname,\n\t\tformat: () => name\n\t};\n}\n","import {ClassFieldDescriptor} from '@/erdiagram/converter/oop/model/class-model-types';\nimport TypeScriptType, {createTypeScriptType} from '@/erdiagram/converter/oop/code-converter/typescript/type/TypeScriptType';\nimport TypeScriptParameterizedType, {createTypeScriptArrayType} from '@/erdiagram/converter/oop/code-converter/typescript/type/TypeScriptParameterizedType';\nimport {EntityPropertyType} from '@/erdiagram/parser/types/entity-relationship-model-types';\nimport FieldTypeResolver from '@/erdiagram/converter/oop/code-converter/common/type/FieldTypeResolver';\n\nexport default class TypeScriptTypeResolver implements FieldTypeResolver<TypeScriptType> {\n\n\tconstructor(\n\t\t\tprivate readonly typeBindings: Partial<Record<EntityPropertyType, TypeScriptType>>\n\t) {\n\n\t}\n\n\tpublic resolveFieldType(field: ClassFieldDescriptor): TypeScriptType {\n\t\tif (field.list) {\n\t\t\treturn this.resolveListType(field);\n\t\t} else {\n\t\t\treturn this.resolveSingleType(field);\n\t\t}\n\t}\n\n\tprivate resolveListType(field: ClassFieldDescriptor): TypeScriptParameterizedType {\n\t\treturn createTypeScriptArrayType(this.resolveSingleType(field));\n\t}\n\n\tprivate resolveSingleType(field: ClassFieldDescriptor): TypeScriptType {\n\n\t\tconst {\n\t\t\tentityType,\n\t\t\tprimitiveType\n\t\t} = field;\n\n\t\tif (entityType) {\n\n\t\t\tif (primitiveType) {\n\t\t\t\tthrow new Error('Invalid field descriptor: provided both primitive and entity types');\n\t\t\t}\n\n\t\t\treturn createTypeScriptType(entityType);\n\n\t\t}\n\n\t\tif (!primitiveType) {\n\t\t\tthrow new Error('Invalid field descriptor: missing type');\n\t\t}\n\n\t\t/* istanbul ignore next */\n\t\tif (!this.typeBindings.hasOwnProperty(primitiveType)) {\n\t\t\tthrow new Error('Unsupported type: ' + primitiveType);\n\t\t}\n\n\t\treturn this.typeBindings[primitiveType]!;\n\n\t}\n\n}","import TypeScriptType, {createTypeScriptType} from '@/erdiagram/converter/oop/code-converter/typescript/type/TypeScriptType';\nimport {\n\tcreateTypeScriptArrayType,\n\tcreateTypeScriptParameterizedType\n} from '@/erdiagram/converter/oop/code-converter/typescript/type/TypeScriptParameterizedType';\n\nconst RAW_TYPE_REGEX = /^[a-zA-Z_$][a-zA-Z_$\\d]*$/;\nconst ARRAY_TYPE_REGEX = /^(.*)\\[\\s*]\\s*$/;\n\nexport default function parseTypeScriptType(text: string): TypeScriptType {\n\ttry {\n\t\treturn parseTypeScriptTypeInternal(text);\n\t} catch (error) {\n\t\tthrow new Error('Malformed TypeScript type: ' + text);\n\t}\n}\n\nfunction parseTypeScriptTypeInternal(text: string): TypeScriptType {\n\n\tconst trimmedText = text.trim();\n\n\tif (ARRAY_TYPE_REGEX.test(trimmedText)) {\n\t\tconst [fullMatch, rawTypeText] = ARRAY_TYPE_REGEX.exec(trimmedText)!;\n\t\treturn createTypeScriptArrayType(parseTypeScriptTypeInternal(rawTypeText));\n\t}\n\n\tconst startOfParameterTypes = trimmedText.indexOf('<');\n\n\tif (startOfParameterTypes === -1) {\n\t\treturn parseTypeScriptRawType(trimmedText);\n\t}\n\n\tconst endOfParameterTypes = trimmedText.lastIndexOf('>');\n\n\tif (endOfParameterTypes === -1) {\n\t\tthrow new Error('Missing end character of parameter types (>)');\n\t}\n\n\tif (endOfParameterTypes !== trimmedText.length - 1) {\n\t\tthrow new Error('Unexpected characters found after parameter types');\n\t}\n\n\tconst rawType = parseTypeScriptRawType(trimmedText.substring(0, startOfParameterTypes));\n\n\tconst parameterTypes = splitParameterTypes(trimmedText.substring(startOfParameterTypes + 1, endOfParameterTypes))\n\t\t\t.map(parameterType => parseTypeScriptTypeInternal(parameterType));\n\n\treturn createTypeScriptParameterizedType(rawType.name, parameterTypes);\n\n}\n\nfunction parseTypeScriptRawType(text: string): TypeScriptType {\n\n\tconst trimmedText = text.trim();\n\n\tif (!RAW_TYPE_REGEX.test(trimmedText)) {\n\t\tthrow new Error(`Illegal TypeScript type format: ${text}`);\n\t}\n\n\treturn createTypeScriptType(trimmedText);\n\n}\n\nfunction splitParameterTypes(parameterTypesText: string): string[] {\n\n\tif (!parameterTypesText.includes(',')) {\n\t\treturn [parameterTypesText];\n\t}\n\n\tconst commaIndices: number[] = [];\n\n\tlet nestedLevelsCount = 0;\n\n\t[...parameterTypesText].forEach((character, index) => {\n\t\tswitch (character) {\n\t\t\tcase ',':\n\t\t\t\tif (nestedLevelsCount === 0) {\n\t\t\t\t\tcommaIndices.push(index);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase '<':\n\t\t\t\tnestedLevelsCount++;\n\t\t\t\tbreak;\n\t\t\tcase '>':\n\t\t\t\tif (nestedLevelsCount === 0) {\n\t\t\t\t\tthrow new Error('Unexpected character \">\"');\n\t\t\t\t}\n\t\t\t\tnestedLevelsCount--;\n\t\t\t\tbreak;\n\t\t}\n\t});\n\n\tconst splittedParameterTypes: string[] = [];\n\tlet startIndex = 0;\n\n\tfor (const commaIndex of commaIndices) {\n\t\tsplittedParameterTypes.push(parameterTypesText.substring(startIndex, commaIndex));\n\t\tstartIndex = commaIndex + 1;\n\t}\n\n\t// Text after the last comma\n\tsplittedParameterTypes.push(parameterTypesText.substring(startIndex));\n\n\treturn splittedParameterTypes;\n\n}\n","export * from './code-converter/exports';\nexport * from './model/exports';\n","import {ClassModel} from '@/erdiagram/converter/oop/model/class-model-types';\nimport {EntityRelationshipModel} from '@/erdiagram/parser/types/entity-relationship-model-types';\nimport ClassModelGeneratorConfig from '@/erdiagram/converter/oop/model/config/ClassModelGeneratorConfig';\nimport classModelGeneratorConfigManager from '@/erdiagram/converter/oop/model/config/ClassModelGeneratorConfigManager';\nimport EntityToClassMapper from '@/erdiagram/converter/oop/model/class/EntityToClassMapper';\n\nexport default class ClassModelGenerator {\n\n\tprivate readonly config: ClassModelGeneratorConfig;\n\tprivate readonly entityToClassMapper: EntityToClassMapper;\n\n\tconstructor(config?: Partial<ClassModelGeneratorConfig>) {\n\t\tthis.config = classModelGeneratorConfigManager.mergeWithDefaultConfig(config);\n\t\tthis.entityToClassMapper = new EntityToClassMapper(this.config);\n\t}\n\n\tgenerateClassModel(model: EntityRelationshipModel): ClassModel {\n\n\t\tconst {\n\t\t\tentities,\n\t\t\trelationships\n\t\t} = model;\n\n\t\tconst classes = entities.map(entity => this.entityToClassMapper.mapEntityToClass(entity, relationships));\n\n\t\treturn {\n\t\t\tclasses\n\t\t};\n\n\t}\n\n};\n","import {capitalizeWord} from '@/erdiagram/util/string-utils';\nimport {ClassDescriptor, ClassFieldDescriptor} from '@/erdiagram/converter/oop/model/class-model-types';\nimport {\n\tDirection,\n\tEntityDescriptor,\n\tRelationshipDescriptor\n} from '@/erdiagram/parser/types/entity-relationship-model-types';\nimport ClassModelGeneratorConfig from '@/erdiagram/converter/oop/model/config/ClassModelGeneratorConfig';\nimport RelationshipMemberToClassFieldMapper\n\tfrom '@/erdiagram/converter/oop/model/class/field/RelationshipMemberToClassFieldMapper';\nimport EntityPropertyToClassFieldMapper\n\tfrom '@/erdiagram/converter/oop/model/class/field/EntityPropertyToClassFieldMapper';\nimport EntityToIdClassFieldMapper from '@/erdiagram/converter/oop/model/class/field/EntityToIdClassFieldMapper';\n\nexport default class EntityToClassMapper {\n\n\tprivate readonly entityToIdClassFieldMapper: EntityToIdClassFieldMapper;\n\tprivate readonly entityPropertyToClassFieldMapper: EntityPropertyToClassFieldMapper;\n\tprivate readonly relationshipMemberToClassFieldMapper: RelationshipMemberToClassFieldMapper;\n\n\tconstructor(\n\t\t\tprivate readonly config: ClassModelGeneratorConfig\n\t) {\n\t\tthis.entityToIdClassFieldMapper = new EntityToIdClassFieldMapper(this.config.idNamingStrategy);\n\t\tthis.entityPropertyToClassFieldMapper = new EntityPropertyToClassFieldMapper();\n\t\tthis.relationshipMemberToClassFieldMapper = new RelationshipMemberToClassFieldMapper();\n\t}\n\n\tpublic mapEntityToClass(entity: EntityDescriptor, relationships: RelationshipDescriptor[]): ClassDescriptor {\n\n\t\tconst name = capitalizeWord(entity.name);\n\n\t\tconst fields: ClassFieldDescriptor[] = [\n\t\t\tthis.entityToIdClassFieldMapper.mapEntityToIdClassField(entity)\n\t\t];\n\n\t\tfor (const property of entity.properties) {\n\t\t\tfields.push(this.entityPropertyToClassFieldMapper.mapPropertyToField(property));\n\t\t}\n\n\t\tfor (const relationship of relationships) {\n\n\t\t\tconst {\n\t\t\t\tleftMember,\n\t\t\t\trightMember,\n\t\t\t\tdirection\n\t\t\t} = relationship;\n\n\t\t\tif (leftMember.entity === entity.name && [Direction.LEFT_TO_RIGHT, Direction.BIDIRECTIONAL].includes(direction)) {\n\t\t\t\tfields.push(this.relationshipMemberToClassFieldMapper.mapRelationshipMemberToField(rightMember));\n\t\t\t}\n\n\t\t\tif (rightMember.entity === entity.name && [Direction.RIGHT_TO_LEFT, Direction.BIDIRECTIONAL].includes(direction)) {\n\t\t\t\tfields.push(this.relationshipMemberToClassFieldMapper.mapRelationshipMemberToField(leftMember));\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\t\t\tname,\n\t\t\tfields\n\t\t};\n\n\t}\n\n};\n","import {ClassFieldDescriptor} from '@/erdiagram/converter/oop/model/class-model-types';\nimport {EntityPropertyDescriptor, EntityPropertyType} from '@/erdiagram/parser/types/entity-relationship-model-types';\n\nconst TYPES_WITH_MAX_SIZE_SUPPORT = [EntityPropertyType.TEXT, EntityPropertyType.BLOB];\n\nexport default class EntityPropertyToClassFieldMapper {\n\n\tpublic mapPropertyToField(property: EntityPropertyDescriptor): ClassFieldDescriptor {\n\n\t\tconst {\n\t\t\tname,\n\t\t\toptional,\n\t\t\ttype,\n\t\t\tlength\n\t\t} = property;\n\n\t\treturn {\n\t\t\tname,\n\t\t\tnullable: optional,\n\t\t\tprimitiveType: type,\n\t\t\tlist: false,\n\t\t\tmaxSize: TYPES_WITH_MAX_SIZE_SUPPORT.includes(type) ? length[0] : undefined\n\t\t};\n\n\t}\n\n};\n","import {ClassFieldDescriptor} from '@/erdiagram/converter/oop/model/class-model-types';\nimport {EntityDescriptor, EntityPropertyType} from '@/erdiagram/parser/types/entity-relationship-model-types';\nimport IdNamingStrategy from '@/erdiagram/converter/common/id-naming-strategy/IdNamingStrategy';\n\nexport default class EntityToIdClassFieldMapper {\n\n\tconstructor(\n\t\t\tprivate readonly idNamingStrategy: IdNamingStrategy\n\t) {\n\n\t}\n\n\tpublic mapEntityToIdClassField(entity: EntityDescriptor): ClassFieldDescriptor {\n\t\treturn {\n\t\t\tname: this.getIdentityFieldName(entity),\n\t\t\tprimitiveType: EntityPropertyType.IDENTITY,\n\t\t\t// ID field must be nullable, so NULL value can be used to represent an unsaved instance\n\t\t\tnullable: true,\n\t\t\tlist: false\n\t\t};\n\t}\n\n\tprivate getIdentityFieldName(entity: EntityDescriptor) {\n\n\t\tif (entity.identityPropertyName) {\n\t\t\treturn entity.identityPropertyName;\n\t\t}\n\n\t\tconst {idNamingStrategy} = this;\n\t\treturn idNamingStrategy(entity.name);\n\n\t}\n\n};\n","import {Cardinality, RelationshipMember} from '@/erdiagram/parser/types/entity-relationship-model-types';\nimport {ClassFieldDescriptor} from '@/erdiagram/converter/oop/model/class-model-types';\nimport pluralize from 'pluralize';\n\nexport default class RelationshipMemberToClassFieldMapper {\n\n\tpublic mapRelationshipMemberToField(toMember: RelationshipMember): ClassFieldDescriptor {\n\n\t\tconst list = toMember.cardinality === Cardinality.MANY;\n\t\tconst name = list ? pluralize(toMember.entityAlias) : toMember.entityAlias;\n\n\t\treturn {\n\t\t\tname,\n\t\t\tnullable: toMember.cardinality === Cardinality.ZERO_OR_ONE,\n\t\t\tentityType: toMember.entity,\n\t\t\tlist\n\t\t};\n\n\t}\n\n}\n","import AbstractComponentConfigManager from '@/erdiagram/common/config/AbstractComponentConfigManager';\nimport ClassModelGeneratorConfig from '@/erdiagram/converter/oop/model/config/ClassModelGeneratorConfig';\nimport StandardIdNamingStrategies from '@/erdiagram/converter/common/id-naming-strategy/StandardIdNamingStrategies';\nimport {findKeyFromValue, findValueFromNullableKey} from '@/erdiagram/util/record-utils';\nimport ClassModelGeneratorSerializableConfig\n\tfrom '@/erdiagram/converter/oop/model/config/ClassModelGeneratorSerializableConfig';\n\nexport class ClassModelGeneratorConfigManager\n\t\textends AbstractComponentConfigManager<ClassModelGeneratorConfig, Partial<ClassModelGeneratorConfig>, ClassModelGeneratorSerializableConfig> {\n\n\tgetDefaultConfig(): ClassModelGeneratorConfig {\n\t\treturn {\n\t\t\tidNamingStrategy: StandardIdNamingStrategies.DEFAULT\n\t\t};\n\t}\n\n\tmergeConfigs(fullConfig: ClassModelGeneratorConfig, partialConfig?: Partial<ClassModelGeneratorConfig>): ClassModelGeneratorConfig {\n\t\treturn {\n\t\t\t...fullConfig,\n\t\t\t...partialConfig\n\t\t};\n\t}\n\n\tconvertToSerializableObject(fullConfig: ClassModelGeneratorConfig): ClassModelGeneratorSerializableConfig {\n\t\treturn {\n\t\t\t...fullConfig,\n\t\t\tidNamingStrategy: findKeyFromValue(StandardIdNamingStrategies, fullConfig.idNamingStrategy)\n\t\t};\n\t}\n\n\tconvertFromSerializableObject(serializableConfig: ClassModelGeneratorSerializableConfig): ClassModelGeneratorConfig {\n\t\treturn {\n\t\t\t...serializableConfig,\n\t\t\tidNamingStrategy: findValueFromNullableKey(StandardIdNamingStrategies, serializableConfig.idNamingStrategy, StandardIdNamingStrategies.DEFAULT)\n\t\t};\n\t}\n\n}\n\nconst classModelGeneratorConfigManager = new ClassModelGeneratorConfigManager();\nexport default classModelGeneratorConfigManager;\n","import ClassModelGeneratorConfig from './ClassModelGeneratorConfig';\nimport ClassModelGeneratorSerializableConfig from './ClassModelGeneratorSerializableConfig';\nimport classModelGeneratorConfigManager, {ClassModelGeneratorConfigManager} from './ClassModelGeneratorConfigManager';\n\nexport {\n\tClassModelGeneratorConfig,\n\tClassModelGeneratorSerializableConfig,\n\tClassModelGeneratorConfigManager,\n\tclassModelGeneratorConfigManager\n};\n","import ClassModelGenerator from './ClassModelGenerator';\n\nexport * from './class-model-types';\nexport * from './config/exports';\n\nexport {\n\tClassModelGenerator\n};\n","export * from './common/exports';\nexport * from './converter/exports';\nexport * from './parser/exports';\n","import {EntityRelationshipModel} from '@/erdiagram/parser/types/entity-relationship-model-types';\nimport EntityRelationshipModelParserConfig from '@/erdiagram/parser/config/EntityRelationshipModelParserConfig';\nimport EntityRelationshipModelParseResultValidator\n\tfrom '@/erdiagram/parser/validator/EntityRelationshipModelParseResultValidator';\nimport entityRelationshipModelParserConfigManager\n\tfrom '@/erdiagram/parser/config/EntityRelationshipModelParserConfigManager';\nimport ParsedModelToPublicModelConverter from '@/erdiagram/parser/ParsedModelToPublicModelConverter';\nimport EntityRelationshipModelParserWithoutValidation\n\tfrom '@/erdiagram/parser/EntityRelationshipModelParserWithoutValidation';\n\nexport default class EntityRelationshipModelParser {\n\n\tprivate readonly config: EntityRelationshipModelParserConfig;\n\tprivate readonly entityRelationshipModelParserWithoutValidation: EntityRelationshipModelParserWithoutValidation;\n\tprivate readonly validator: EntityRelationshipModelParseResultValidator;\n\tprivate readonly parsedModelToPublicModelConverter: ParsedModelToPublicModelConverter;\n\n\tconstructor(config?: Partial<EntityRelationshipModelParserConfig>) {\n\t\tthis.config = entityRelationshipModelParserConfigManager.mergeWithDefaultConfig(config);\n\t\tthis.entityRelationshipModelParserWithoutValidation = new EntityRelationshipModelParserWithoutValidation();\n\t\tthis.validator = new EntityRelationshipModelParseResultValidator(this.config.allowUnknownEntities);\n\t\tthis.parsedModelToPublicModelConverter = new ParsedModelToPublicModelConverter();\n\t}\n\n\tpublic parseModel(code: string): EntityRelationshipModel {\n\n\t\tconst parseResult = this.entityRelationshipModelParserWithoutValidation.parseModelWithoutValidation(code);\n\n\t\tthis.validator.validateParseResult(parseResult);\n\n\t\treturn this.parsedModelToPublicModelConverter.convertParsedModelToPublicModel(parseResult.model);\n\n\t}\n\n}\n","import {\n\tEntityRelationshipModelParseResult,\n\tParsedStatementResult\n} from '@/erdiagram/parser/types/parsed-entity-relationship-model-types';\nimport EntityRelationshipModelLineParser from '@/erdiagram/parser/line/EntityRelationshipModelLineParser';\nimport ParseState from '@/erdiagram/parser/types/ParseState';\n\nconst LINE_SEPARATOR = '\\n';\n\nexport default class EntityRelationshipModelParserWithoutValidation {\n\n\tprivate readonly lineParser: EntityRelationshipModelLineParser;\n\n\tconstructor() {\n\t\tthis.lineParser = new EntityRelationshipModelLineParser();\n\t}\n\n\tpublic parseModelWithoutValidation(code: string): EntityRelationshipModelParseResult {\n\n\t\tconst state = this.createInitialParseState();\n\n\t\tthis.parseCode(code, state);\n\n\t\treturn this.mapParseStateToParseResult(state);\n\n\t}\n\n\tprivate createInitialParseState(): ParseState {\n\t\treturn {\n\t\t\tentities: [],\n\t\t\trelationships: [],\n\t\t\tentityBeingParsed: null,\n\t\t\tstatementResultToLineMap: new Map<ParsedStatementResult, number>()\n\t\t};\n\t}\n\n\tprivate parseCode(code: string, state: ParseState) {\n\t\tconst lines = code.split(LINE_SEPARATOR);\n\t\tthis.lineParser.parseLines(lines, state);\n\t}\n\n\tprivate mapParseStateToParseResult(state: ParseState): EntityRelationshipModelParseResult {\n\n\t\tconst {\n\t\t\tentities,\n\t\t\trelationships,\n\t\t\tstatementResultToLineMap\n\t\t} = state;\n\n\t\treturn {\n\t\t\tmodel: {\n\t\t\t\tentities,\n\t\t\t\trelationships\n\t\t\t},\n\t\t\tstatementResultToLineMap\n\t\t};\n\n\t}\n\n}\n","import {\n\tEntityDescriptor,\n\tEntityPropertyDescriptor,\n\tEntityPropertyType,\n\tEntityRelationshipModel\n} from '@/erdiagram/parser/types/entity-relationship-model-types';\nimport {\n\tParsedEntityDescriptor,\n\tParsedEntityRelationshipModel\n} from '@/erdiagram/parser/types/parsed-entity-relationship-model-types';\n\nexport default class ParsedModelToPublicModelConverter {\n\n\tpublic convertParsedModelToPublicModel(parsedModel: ParsedEntityRelationshipModel): EntityRelationshipModel {\n\t\treturn {\n\t\t\tentities: parsedModel.entities.map(parsedEntity => this.convertParsedEntityToPublicEntity(parsedEntity)),\n\t\t\trelationships: parsedModel.relationships\n\t\t};\n\t}\n\n\tprivate convertParsedEntityToPublicEntity(parsedEntity: ParsedEntityDescriptor): EntityDescriptor {\n\n\t\tconst identityProperty = this.getEntityIdentityProperty(parsedEntity);\n\n\t\treturn {\n\t\t\tname: parsedEntity.name,\n\t\t\tidentityPropertyName: identityProperty?.name,\n\t\t\tproperties: parsedEntity.properties.filter(property => property != identityProperty)\n\t\t};\n\n\t}\n\n\tprivate getEntityIdentityProperty(parsedEntity: ParsedEntityDescriptor): EntityPropertyDescriptor | undefined {\n\t\treturn parsedEntity.properties.find(property => property.type === EntityPropertyType.IDENTITY);\n\t}\n\n}\n","import AbstractComponentConfigManager from '@/erdiagram/common/config/AbstractComponentConfigManager';\nimport EntityRelationshipModelParserConfig from '@/erdiagram/parser/config/EntityRelationshipModelParserConfig';\nimport EntityRelationshipModelParserSerializableConfig\n\tfrom '@/erdiagram/parser/config/EntityRelationshipModelParserSerializableConfig';\n\nexport class EntityRelationshipModelParserConfigManager\n\t\textends AbstractComponentConfigManager<EntityRelationshipModelParserConfig, Partial<EntityRelationshipModelParserConfig>, EntityRelationshipModelParserSerializableConfig> {\n\n\tgetDefaultConfig(): EntityRelationshipModelParserConfig {\n\t\treturn {\n\t\t\tallowUnknownEntities: false\n\t\t};\n\t}\n\n\tmergeConfigs(fullConfig: EntityRelationshipModelParserConfig, partialConfig?: Partial<EntityRelationshipModelParserConfig>): EntityRelationshipModelParserConfig {\n\t\treturn {\n\t\t\t...fullConfig,\n\t\t\t...partialConfig\n\t\t};\n\t}\n\n\tconvertToSerializableObject(fullConfig: EntityRelationshipModelParserConfig): EntityRelationshipModelParserSerializableConfig {\n\t\treturn {\n\t\t\t...fullConfig\n\t\t};\n\t}\n\n\tconvertFromSerializableObject(serializableConfig: EntityRelationshipModelParserSerializableConfig): EntityRelationshipModelParserConfig {\n\t\treturn {\n\t\t\t...serializableConfig\n\t\t};\n\t}\n\n}\n\nconst entityRelationshipModelParserConfigManager = new EntityRelationshipModelParserConfigManager();\nexport default entityRelationshipModelParserConfigManager;\n","import EntityRelationshipModelParserConfig from './EntityRelationshipModelParserConfig';\nimport EntityRelationshipModelParserSerializableConfig from './EntityRelationshipModelParserSerializableConfig';\nimport entityRelationshipModelParserConfigManager, {EntityRelationshipModelParserConfigManager} from './EntityRelationshipModelParserConfigManager';\n\nexport {\n\tEntityRelationshipModelParserConfig,\n\tEntityRelationshipModelParserSerializableConfig,\n\tEntityRelationshipModelParserConfigManager,\n\tentityRelationshipModelParserConfigManager\n};\n","import EntityRelationshipModelParser from './EntityRelationshipModelParser';\n\nexport * from './config/exports';\nexport * from './types/exports';\n\nexport {\n\tEntityRelationshipModelParser\n};\n","import {\n\tparseEntityNameStatement,\n\tparseEntityPropertyStatement,\n\tparseRelationshipStatement\n} from '@/erdiagram/parser/statement/statement-types-parse-functions';\nimport {guessStatementType, StatementType} from '@/erdiagram/parser/statement/statement-type-guesser';\nimport {ERDiagramSyntaxError} from '@/erdiagram/parser/types/parse-errors';\nimport {ParsedEntityDescriptor} from '@/erdiagram/parser/types/parsed-entity-relationship-model-types';\nimport ParseState from '@/erdiagram/parser/types/ParseState';\nimport EntityRelationshipModelLineParserErrorHandler\n\tfrom '@/erdiagram/parser/line/EntityRelationshipModelLineParserErrorHandler';\n\nexport default class EntityRelationshipModelLineParser {\n\n\tprivate readonly errorHandler: EntityRelationshipModelLineParserErrorHandler;\n\n\tconstructor() {\n\t\tthis.errorHandler = new EntityRelationshipModelLineParserErrorHandler();\n\t}\n\n\tpublic parseLines(lines: string[], state: ParseState) {\n\t\tlines.forEach((line, lineIndex) => {\n\t\t\ttry {\n\t\t\t\tthis.parseLine(line, lineIndex, state);\n\t\t\t} catch (error) {\n\t\t\t\tthis.errorHandler.handleLineError(error, lineIndex);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate parseLine(line: string, lineIndex: number, state: ParseState) {\n\n\t\tconst statementType = guessStatementType(line);\n\n\t\tswitch (statementType) {\n\t\t\tcase StatementType.ENTITY_NAME:\n\t\t\t\tthis.parseEntityNameLine(line, state, lineIndex);\n\t\t\t\tbreak;\n\t\t\tcase StatementType.ENTITY_PROPERTY:\n\t\t\t\tthis.parseEntityPropertyLine(state, line, lineIndex);\n\t\t\t\tbreak;\n\t\t\tcase StatementType.RELATIONSHIP:\n\t\t\t\tthis.parseRelationshipLine(line, state, lineIndex);\n\t\t\t\tbreak;\n\t\t\tcase StatementType.BLANK_LINE:\n\t\t\t\t// Ignore\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new ERDiagramSyntaxError(`Unknown statement type`);\n\t\t}\n\n\t}\n\n\tprivate parseEntityNameLine(line: string, state: ParseState, lineIndex: number) {\n\n\t\tconst entityDescriptor: ParsedEntityDescriptor = {\n\t\t\tname: parseEntityNameStatement(line),\n\t\t\tproperties: []\n\t\t};\n\n\t\tstate.entities.push(entityDescriptor);\n\t\tstate.entityBeingParsed = entityDescriptor;\n\t\tstate.statementResultToLineMap.set(entityDescriptor, lineIndex);\n\n\t}\n\n\tprivate parseEntityPropertyLine(state: ParseState, line: string, lineIndex: number) {\n\n\t\tif (state.entityBeingParsed == null) {\n\t\t\tthrow new ERDiagramSyntaxError('Unexpected entity property statement');\n\t\t}\n\n\t\tconst entityPropertyDescriptor = parseEntityPropertyStatement(line);\n\n\t\tstate.entityBeingParsed.properties.push(entityPropertyDescriptor);\n\t\tstate.statementResultToLineMap.set(entityPropertyDescriptor, lineIndex);\n\n\t}\n\n\tprivate parseRelationshipLine(line: string, state: ParseState, lineIndex: number) {\n\n\t\tconst relationshipDescriptor = parseRelationshipStatement(line);\n\n\t\tstate.relationships.push(relationshipDescriptor);\n\t\tstate.entityBeingParsed = null;\n\t\tstate.statementResultToLineMap.set(relationshipDescriptor, lineIndex);\n\n\t}\n\n}\n","import {ERDiagramError, ERDiagramParseLineError} from '@/erdiagram/parser/types/parse-errors';\n\nexport default class EntityRelationshipModelLineParserErrorHandler {\n\n\tpublic handleLineError(error: Error, lineIndex: number): never {\n\n\t\t/* istanbul ignore else */\n\t\tif (error instanceof ERDiagramError) {\n\t\t\tthrow new ERDiagramParseLineError(error, lineIndex);\n\t\t}\n\n\t\t/* istanbul ignore next */\n\t\tthrow error;\n\n\t}\n\n}\n","import {\n\tENTITY_NAME_LINE_REGEX,\n\tENTITY_PROPERTY_LINE_REGEX,\n\tRELATIONSHIP_LINE_REGEX\n} from '@/erdiagram/parser/statement/statement-types-regexes';\n\nexport enum StatementType {\n\tENTITY_NAME = 'entityName',\n\tENTITY_PROPERTY = 'entityProperty',\n\tRELATIONSHIP = 'relationship',\n\tBLANK_LINE = 'blankLine',\n\tUNKNOWN = 'unknown'\n}\n\nexport function guessStatementType(line: string): StatementType {\n\tif (ENTITY_NAME_LINE_REGEX.test(line)) {\n\t\treturn StatementType.ENTITY_NAME;\n\t} else if (ENTITY_PROPERTY_LINE_REGEX.test(line)) {\n\t\treturn StatementType.ENTITY_PROPERTY;\n\t} else if (RELATIONSHIP_LINE_REGEX.test(line)) {\n\t\treturn StatementType.RELATIONSHIP;\n\t} else if (isBlankLine(line)) {\n\t\treturn StatementType.BLANK_LINE;\n\t} else {\n\t\treturn StatementType.UNKNOWN;\n\t}\n}\n\nfunction isBlankLine(line: string) {\n\treturn /^\\s*(#.*)?$/.test(line);\n}\n","import {capitalizeWord, uncapitalizeWord} from '@/erdiagram/util/string-utils';\nimport {\n\tENTITY_NAME_LINE_REGEX,\n\tENTITY_PROPERTY_LINE_REGEX,\n\tRELATIONSHIP_LINE_REGEX\n} from '@/erdiagram/parser/statement/statement-types-regexes';\nimport {Cardinality, Direction, EntityPropertyType} from '@/erdiagram/parser/types/entity-relationship-model-types';\nimport {\n\tParsedEntityPropertyDescriptor,\n\tParsedRelationshipDescriptor\n} from '@/erdiagram/parser/types/parsed-entity-relationship-model-types';\nimport {ERDiagramSyntaxError, ERDiagramUnknownTypeError} from '@/erdiagram/parser/types/parse-errors';\n\nexport function parseEntityNameStatement(line: string): string {\n\n\tconst result = ENTITY_NAME_LINE_REGEX.exec(line);\n\n\tif (result == null) {\n\t\tthrow new ERDiagramSyntaxError('Syntax error');\n\t}\n\n\tconst [\n\t\tfullMatch,\n\t\tentityName\n\t] = result;\n\n\treturn capitalizeWord(entityName);\n\n}\n\nexport function parseEntityPropertyStatement(line: string): ParsedEntityPropertyDescriptor {\n\n\tconst result = ENTITY_PROPERTY_LINE_REGEX.exec(line);\n\n\tif (result == null) {\n\t\tthrow new ERDiagramSyntaxError('Syntax error');\n\t}\n\n\tconst [\n\t\tfullMatch,\n\t\tname,\n\t\tmodifiers,\n\t\ttype,\n\t\tlength\n\t] = result;\n\n\tconst mappedType = type.toLowerCase() as EntityPropertyType;\n\n\tif (!Object.values(EntityPropertyType).includes(mappedType)) {\n\t\tthrow new ERDiagramUnknownTypeError('Unknown type: ' + type);\n\t}\n\n\treturn {\n\t\tname: uncapitalizeWord(name),\n\t\toptional: modifiers.includes('?'),\n\t\tunique: modifiers.includes('!'),\n\t\ttype: mappedType,\n\t\tlength: parsePropertyLength(length)\n\t};\n\n}\n\nfunction parsePropertyLength(length: string): number[] {\n\n\tif (!length) {\n\t\treturn [];\n\t}\n\n\treturn length.split(',')\n\t\t\t.map(lengthNumber => parseInt(lengthNumber.trim(), 10));\n\n}\n\nexport function parseRelationshipStatement(line: string): ParsedRelationshipDescriptor {\n\n\tconst result = RELATIONSHIP_LINE_REGEX.exec(line);\n\n\tif (result == null) {\n\t\tthrow new ERDiagramSyntaxError('Syntax error');\n\t}\n\n\tconst [\n\t\tfullMatch,\n\t\tleftEntity,\n\t\tleftEntityAlias = leftEntity,\n\t\tleftCardinalityCharacter,\n\t\tdirection,\n\t\trightCardinalityCharacter,\n\t\trightEntity,\n\t\trightEntityAlias = rightEntity,\n\t\trelationshipName\n\t] = result;\n\n\treturn {\n\t\trelationshipName: relationshipName ? capitalizeWord(relationshipName) : undefined,\n\t\tdirection: direction === '->' ? Direction.LEFT_TO_RIGHT : (direction === '<-' ? Direction.RIGHT_TO_LEFT : Direction.BIDIRECTIONAL),\n\t\tleftMember: {\n\t\t\tentity: capitalizeWord(leftEntity),\n\t\t\tentityAlias: uncapitalizeWord(leftEntityAlias),\n\t\t\tcardinality: parseRelationshipMemberCardinality(leftCardinalityCharacter)\n\t\t},\n\t\trightMember: {\n\t\t\tentity: capitalizeWord(rightEntity),\n\t\t\tentityAlias: uncapitalizeWord(rightEntityAlias),\n\t\t\tcardinality: parseRelationshipMemberCardinality(rightCardinalityCharacter)\n\t\t}\n\t};\n\n}\n\nfunction parseRelationshipMemberCardinality(leftCardinalityCharacter: string) {\n\tswitch (leftCardinalityCharacter) {\n\t\tcase '*':\n\t\t\treturn Cardinality.MANY;\n\t\tcase '?':\n\t\t\treturn Cardinality.ZERO_OR_ONE;\n\t\tdefault:\n\t\t\treturn Cardinality.ONE;\n\t}\n}\n","import {joinRegExps} from '@/erdiagram/util/regex-utils';\n\nconst IDENTITY_REGEX = /[a-zA-Z_][a-zA-Z_0-9]*/;\nconst OPTIONAL_TRAILING_SPACES_AND_COMMENT = /\\s*(#.*)?$/;\n\n// Entity name\n\nexport const ENTITY_NAME_LINE_REGEX = new RegExp(`^(${IDENTITY_REGEX.source})${OPTIONAL_TRAILING_SPACES_AND_COMMENT.source}`);\n\n// Entity property\n\nconst PROPERTY_NAME_REGEX = new RegExp(`(${IDENTITY_REGEX.source})`);\nconst PROPERTY_MODIFIERS_REGEX = new RegExp(`([?!]*)`);\n\nconst PROPERTY_TYPE_NAME_REGEX = new RegExp(`(${IDENTITY_REGEX.source})`);\nconst PROPERTY_TYPE_LENGTH_REGEX = new RegExp(`(?:\\\\((\\\\s*\\\\d+\\\\s*(?:,\\\\s*\\\\d+\\\\s*)*)\\\\))?`);\n\nconst ENTITY_PROPERTY_REGEX = joinRegExps(PROPERTY_NAME_REGEX, PROPERTY_MODIFIERS_REGEX, /\\s+/, PROPERTY_TYPE_NAME_REGEX, PROPERTY_TYPE_LENGTH_REGEX);\n\nexport const ENTITY_PROPERTY_LINE_REGEX = new RegExp(`^\\\\s+${ENTITY_PROPERTY_REGEX.source}${OPTIONAL_TRAILING_SPACES_AND_COMMENT.source}`);\n\n// Relationship\n\nconst RELATIONSHIP_DIRECTION_REGEX = /(<-|->|<->)/;\nconst RELATIONSHIP_CARDINALITY_REGEX = /([?1*])?/;\nconst DIRECTION_AND_CARDINALITY_REGEX = joinRegExps(RELATIONSHIP_CARDINALITY_REGEX, RELATIONSHIP_DIRECTION_REGEX, RELATIONSHIP_CARDINALITY_REGEX);\n\nconst ENTITY_AND_ALIAS_REGEX = new RegExp(`(${IDENTITY_REGEX.source})(?:\\\\s+(${IDENTITY_REGEX.source}))?`);\n\nexport const RELATIONSHIP_LINE_REGEX = new RegExp(`^${ENTITY_AND_ALIAS_REGEX.source}\\\\s*?${DIRECTION_AND_CARDINALITY_REGEX.source}\\\\s*?${ENTITY_AND_ALIAS_REGEX.source}(?:\\\\s+\\\\(\\\\s*(${IDENTITY_REGEX.source})\\\\s*\\\\))?${OPTIONAL_TRAILING_SPACES_AND_COMMENT.source}`);\n","export interface EntityRelationshipModel {\n\tentities: EntityDescriptor[];\n\trelationships: RelationshipDescriptor[];\n}\n\nexport interface EntityDescriptor {\n\tname: string;\n\tidentityPropertyName?: string;\n\tproperties: EntityPropertyDescriptor[];\n}\n\nexport interface EntityPropertyDescriptor {\n\tname: string;\n\toptional: boolean;\n\tunique: boolean;\n\ttype: EntityPropertyType;\n\tlength: number[];\n}\n\nexport enum EntityPropertyType {\n\tIDENTITY = 'identity',\n\tBOOLEAN = 'bool',\n\tSHORT = 'short',\n\tINT = 'int',\n\tLONG = 'long',\n\tDECIMAL = 'decimal',\n\tTEXT = 'text',\n\tDATE = 'date',\n\tTIME = 'time',\n\tDATETIME = 'datetime',\n\tBLOB = 'blob'\n}\n\nexport interface RelationshipDescriptor {\n\tleftMember: RelationshipMember;\n\trightMember: RelationshipMember;\n\tdirection: Direction;\n\trelationshipName?: string;\n}\n\nexport interface RelationshipMember {\n\tentity: string;\n\tentityAlias: string;\n\tcardinality: Cardinality;\n}\n\nexport enum Cardinality {\n\tMANY = 'many',\n\tONE = 'one',\n\tZERO_OR_ONE = 'zero_or_one'\n}\n\nexport enum Direction {\n\tLEFT_TO_RIGHT = 'left_to_right',\n\tRIGHT_TO_LEFT = 'right_to_left',\n\tBIDIRECTIONAL = 'bidirectional'\n}\n","export * from './entity-relationship-model-types';\nexport * from './parse-errors';\n","import {RelationshipMember} from '@/erdiagram/parser/types/entity-relationship-model-types';\nimport {\n\tParsedEntityDescriptor,\n\tParsedEntityPropertyDescriptor,\n\tParsedRelationshipDescriptor\n} from '@/erdiagram/parser/types/parsed-entity-relationship-model-types';\n\nexport class ERDiagramError extends Error {\n\n}\n\nexport class ERDiagramParseLineError extends ERDiagramError {\n\n\tconstructor(\n\t\t\tprivate readonly cause: ERDiagramError,\n\t\t\tpublic readonly lineIndex: number\n\t) {\n\t\tsuper(cause.message);\n\t}\n\n\tget lineNumber() {\n\t\treturn this.lineIndex + 1;\n\t}\n\n}\n\nexport class ERDiagramSyntaxError extends ERDiagramError {\n\n}\n\nexport class ERDiagramUnknownTypeError extends ERDiagramError {\n\n}\n\nexport class ERDiagramRelationshipError extends ERDiagramError {\n\n\tconstructor(\n\t\t\tmessage: string,\n\t\t\tpublic readonly relationship: ParsedRelationshipDescriptor\n\t) {\n\t\tsuper(message);\n\t}\n\n}\n\nexport class ERDiagramUnknownEntityError extends ERDiagramRelationshipError {\n\n\tconstructor(\n\t\t\tmessage: string,\n\t\t\trelationship: ParsedRelationshipDescriptor,\n\t\t\tpublic readonly member: RelationshipMember\n\t) {\n\t\tsuper(message, relationship);\n\t}\n\n}\n\nexport class ERDiagramEntityError extends ERDiagramError {\n\n\tconstructor(\n\t\t\tmessage: string,\n\t\t\tpublic readonly entity: ParsedEntityDescriptor\n\t) {\n\t\tsuper(message);\n\t}\n\n}\n\nexport class ERDiagramDuplicatedEntityNameError extends ERDiagramEntityError {\n\n}\n\nexport class ERDiagramEntityPropertyError extends ERDiagramEntityError {\n\n\tconstructor(\n\t\t\tmessage: string,\n\t\t\tentity: ParsedEntityDescriptor,\n\t\t\tpublic readonly property: ParsedEntityPropertyDescriptor\n\t) {\n\t\tsuper(message, entity);\n\t}\n\n}\n\nexport class ERDiagramMultipleIdentitiesError extends ERDiagramEntityPropertyError {\n\n\tpublic readonly identityProperties: ParsedEntityPropertyDescriptor[];\n\n\tconstructor(\n\t\t\tmessage: string,\n\t\t\tentity: ParsedEntityDescriptor,\n\t\t\tidentityProperties: ParsedEntityPropertyDescriptor[]\n\t) {\n\t\tconst firstDuplicateApparition = identityProperties[1];\n\t\tsuper(message, entity, firstDuplicateApparition);\n\t\tthis.identityProperties = identityProperties;\n\t}\n\n}\n\nexport class ERDiagramInvalidIdentityDefinitionError extends ERDiagramEntityPropertyError {\n\n}\n\nexport class ERDiagramDuplicatedPropertyNameError extends ERDiagramEntityPropertyError {\n\n}\n","import {EntityPropertyType} from '@/erdiagram/parser/types/entity-relationship-model-types';\nimport {\n\tERDiagramDuplicatedEntityNameError,\n\tERDiagramDuplicatedPropertyNameError,\n\tERDiagramInvalidIdentityDefinitionError,\n\tERDiagramMultipleIdentitiesError,\n\tERDiagramUnknownEntityError\n} from '@/erdiagram/parser/types/parse-errors';\nimport {\n\tEntityRelationshipModelParseResult,\n\tParsedEntityRelationshipModel\n} from '@/erdiagram/parser/types/parsed-entity-relationship-model-types';\nimport EntityRelationshipModelParseResultValidatorErrorHandler\n\tfrom '@/erdiagram/parser/validator/EntityRelationshipModelParseResultValidatorErrorHandler';\n\nexport default class EntityRelationshipModelParseResultValidator {\n\n\tprivate readonly errorHandler: EntityRelationshipModelParseResultValidatorErrorHandler;\n\n\tconstructor(\n\t\t\tprivate readonly allowUnknownEntities: boolean\n\t) {\n\t\tthis.errorHandler = new EntityRelationshipModelParseResultValidatorErrorHandler();\n\t}\n\n\tpublic validateParseResult(parseResult: EntityRelationshipModelParseResult) {\n\n\t\tconst {\n\t\t\tmodel,\n\t\t\tstatementResultToLineMap\n\t\t} = parseResult;\n\n\t\ttry {\n\t\t\tthis.validateParsedModel(model);\n\t\t} catch (error) {\n\t\t\tthis.errorHandler.handleValidationError(error, statementResultToLineMap);\n\t\t}\n\n\t}\n\n\tprivate validateParsedModel(model: ParsedEntityRelationshipModel) {\n\n\t\tthis.validateNonRepeatedEntityNames(model);\n\t\tthis.validateNonRepeatedPropertyNames(model);\n\t\tthis.validateIdentityProperties(model);\n\n\t\tif (!this.allowUnknownEntities) {\n\t\t\tthis.validateRelationshipsHaveNoUnknownEntities(model);\n\t\t}\n\n\t}\n\n\tprivate validateNonRepeatedEntityNames(model: ParsedEntityRelationshipModel) {\n\n\t\tconst entityNames = new Set<string>();\n\n\t\tmodel.entities.forEach(entity => {\n\n\t\t\tconst entityName = entity.name;\n\n\t\t\tif (entityNames.has(entityName)) {\n\t\t\t\tthrow new ERDiagramDuplicatedEntityNameError(\n\t\t\t\t\t\t`Repeated entity \"${entityName}\"`,\n\t\t\t\t\t\tentity\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tentityNames.add(entityName);\n\n\t\t});\n\n\t}\n\n\tprivate validateNonRepeatedPropertyNames(model: ParsedEntityRelationshipModel) {\n\n\t\tmodel.entities.forEach(entity => {\n\n\t\t\tconst entityPropertyNames = new Set<string>();\n\n\t\t\tentity.properties.forEach(property => {\n\n\t\t\t\tconst propertyName = property.name;\n\n\t\t\t\tif (entityPropertyNames.has(propertyName)) {\n\t\t\t\t\tthrow new ERDiagramDuplicatedPropertyNameError(\n\t\t\t\t\t\t\t`Repeated property \"${propertyName}\" in \"${entity.name}\" entity`,\n\t\t\t\t\t\t\tentity,\n\t\t\t\t\t\t\tproperty\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tentityPropertyNames.add(propertyName);\n\n\t\t\t});\n\n\t\t});\n\n\t}\n\n\tprivate validateIdentityProperties(model: ParsedEntityRelationshipModel) {\n\n\t\tmodel.entities.forEach(entity => {\n\n\t\t\tconst identityProperties = entity.properties.filter(property => property.type === EntityPropertyType.IDENTITY);\n\n\t\t\tif (identityProperties.length > 1) {\n\t\t\t\tthrow new ERDiagramMultipleIdentitiesError(\n\t\t\t\t\t\t`Entity ${entity.name} has more than one identity property`,\n\t\t\t\t\t\tentity,\n\t\t\t\t\t\tidentityProperties\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst identityProperty = identityProperties[0];\n\n\t\t\tif (identityProperty != null) {\n\n\t\t\t\tif (identityProperty.optional) {\n\t\t\t\t\tthrow new ERDiagramInvalidIdentityDefinitionError(\n\t\t\t\t\t\t\t'Optional modifier (?) cannot be used in identity properties',\n\t\t\t\t\t\t\tentity,\n\t\t\t\t\t\t\tidentityProperty\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (identityProperty.unique) {\n\t\t\t\t\tthrow new ERDiagramInvalidIdentityDefinitionError(\n\t\t\t\t\t\t\t'Unique modifier (!) cannot be used in identity properties',\n\t\t\t\t\t\t\tentity,\n\t\t\t\t\t\t\tidentityProperty\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (identityProperty.length.length > 0) {\n\t\t\t\t\tthrow new ERDiagramInvalidIdentityDefinitionError(\n\t\t\t\t\t\t\t'Identity properties cannot have a length',\n\t\t\t\t\t\t\tentity,\n\t\t\t\t\t\t\tidentityProperty\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t});\n\n\t}\n\n\tprivate validateRelationshipsHaveNoUnknownEntities(model: ParsedEntityRelationshipModel) {\n\n\t\tconst entityNames = model.entities.map(e => e.name);\n\n\t\tmodel.relationships.forEach(relationship => {\n\t\t\tif (!entityNames.includes(relationship.leftMember.entity)) {\n\t\t\t\tthrow new ERDiagramUnknownEntityError(\n\t\t\t\t\t\t`Uknown entity \"${relationship.leftMember.entity}\" in relationship's left member`,\n\t\t\t\t\t\trelationship,\n\t\t\t\t\t\trelationship.leftMember\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (!entityNames.includes(relationship.rightMember.entity)) {\n\t\t\t\tthrow new ERDiagramUnknownEntityError(\n\t\t\t\t\t\t`Uknown entity \"${relationship.rightMember.entity}\" in relationship's right member`,\n\t\t\t\t\t\trelationship,\n\t\t\t\t\t\trelationship.rightMember\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\n\t}\n\n}\n","import {\n\tERDiagramEntityError,\n\tERDiagramEntityPropertyError,\n\tERDiagramParseLineError,\n\tERDiagramRelationshipError\n} from '@/erdiagram/parser/types/parse-errors';\nimport {ParsedStatementResult} from '@/erdiagram/parser/types/parsed-entity-relationship-model-types';\n\nexport default class EntityRelationshipModelParseResultValidatorErrorHandler {\n\n\tpublic handleValidationError(error: Error, statementResultToLineMap: Map<ParsedStatementResult, number>): never {\n\n\t\tif (error instanceof ERDiagramEntityPropertyError) {\n\t\t\tthrow new ERDiagramParseLineError(error, statementResultToLineMap.get(error.property)!);\n\t\t}\n\n\t\tif (error instanceof ERDiagramEntityError) {\n\t\t\tthrow new ERDiagramParseLineError(error, statementResultToLineMap.get(error.entity)!);\n\t\t}\n\n\t\t/* istanbul ignore else */\n\t\tif (error instanceof ERDiagramRelationshipError) {\n\t\t\tthrow new ERDiagramParseLineError(error, statementResultToLineMap.get(error.relationship)!);\n\t\t}\n\n\t\t/* istanbul ignore next */\n\t\tthrow error;\n\n\t}\n\n}\n","export function removeDuplicates<T>(array: T[]): T[] {\n\treturn [...new Set<T>(array)];\n}\n\nexport function removeNullableValues<T>(array: (T | null | undefined)[]): T[] {\n\treturn array.filter(e => e != null) as T[];\n}\n","const DEFAULT_INDENT = '    ';\n\nexport function indentLines(lines: string[], indent?: string | number) {\n\treturn lines.map(line => indentLineUsingIndentText(line, generateIndentText(indent)));\n}\n\nexport function indentLine(line: string, indent?: string | number) {\n\treturn indentLineUsingIndentText(line, generateIndentText(indent));\n}\n\nfunction generateIndentText(indent: string | number = DEFAULT_INDENT): string {\n\n\tif (typeof indent !== 'number') {\n\t\treturn indent;\n\t}\n\n\treturn ''.padEnd(indent, ' ');\n\n}\n\nfunction indentLineUsingIndentText(line: string, indentText: string) {\n\tif (line.trim().length === 0) {\n\t\treturn line;\n\t} else {\n\t\treturn indentText + line;\n\t}\n}\n","export function classifyBy<T, K, V>(objects: T[], keyMapper: (object: T) => K, valueMapper: (object: T) => V): Map<K, V> {\n\n\tconst map = new Map<K, V>();\n\n\tobjects.forEach(object => {\n\n\t\tconst key = keyMapper(object);\n\t\tconst value = valueMapper(object);\n\n\t\tmap.set(key, value);\n\n\t});\n\n\treturn map;\n\n}\n","export function mapValues<T, U>(record: Record<string, T>, mapper: (value: T) => U): Record<string, U> {\n\treturn Object.fromEntries(Object.entries(record).map(([key, value]) => [key, mapper(value)]));\n}\n\nexport function findKeyFromValue<T>(record: Record<string, T>, value: T): string | undefined {\n\tconst entry = Object.entries(record).find(entry => value === entry[1]);\n\treturn entry?.[0];\n}\n\nexport function findValueFromNullableKey<T>(record: Record<string, T>, key: string | undefined): T | undefined\nexport function findValueFromNullableKey<T>(record: Record<string, T>, key: string | undefined, defaultValue: T): T\nexport function findValueFromNullableKey<T>(record: Record<string, T>, key: string | undefined, defaultValue?: T): T | undefined {\n\treturn key == null ? defaultValue : record[key];\n}\n","export function escapeRegExpSpecialChars(text: string): string {\n\treturn text.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}\n\nexport function joinRegExps(...regexes: (RegExp | string)[]): RegExp {\n\n\tconst source = regexes\n\t\t\t.map((e): string => {\n\t\t\t\tif (typeof e === 'string') {\n\t\t\t\t\treturn escapeRegExpSpecialChars(e);\n\t\t\t\t} else {\n\t\t\t\t\treturn e.source;\n\t\t\t\t}\n\t\t\t})\n\t\t\t.join('');\n\n\treturn new RegExp(source);\n\n}\n","export function capitalizeWord(text: string) {\n\treturn text[0].toUpperCase() + text.substring(1);\n}\n\nexport function uncapitalizeWord(text: string) {\n\treturn text[0].toLowerCase() + text.substring(1);\n}\n\nexport function removeNonEmptyStrings(strings: string[]) {\n\treturn strings.filter(chunk => chunk.length > 0);\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export * from './erdiagram/exports';\n"],"sourceRoot":""}