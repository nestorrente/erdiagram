{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///./node_modules/pluralize/pluralize.js","webpack:///./src/main/erdiagram/common/config/AbstractComponentConfigManager.ts","webpack:///./src/main/erdiagram/common/config/exports.ts","webpack:///./src/main/erdiagram/common/exports.ts","webpack:///./src/main/erdiagram/exports.ts","webpack:///./src/main/erdiagram/generator/common/case-format/AbstractCamelCaseFormat.ts","webpack:///./src/main/erdiagram/generator/common/case-format/AbstractUnderscoreCaseFormat.ts","webpack:///./src/main/erdiagram/generator/common/case-format/CapitalizedUnderscoreCaseFormat.ts","webpack:///./src/main/erdiagram/generator/common/case-format/CaseConverter.ts","webpack:///./src/main/erdiagram/generator/common/case-format/CaseInsensitiveUnderscoreCaseFormat.ts","webpack:///./src/main/erdiagram/generator/common/case-format/LowerCamelCaseFormat.ts","webpack:///./src/main/erdiagram/generator/common/case-format/LowerUnderscoreCaseFormat.ts","webpack:///./src/main/erdiagram/generator/common/case-format/StandardCaseFormats.ts","webpack:///./src/main/erdiagram/generator/common/case-format/UpperCamelCaseFormat.ts","webpack:///./src/main/erdiagram/generator/common/case-format/UpperUnderscoreCaseFormat.ts","webpack:///./src/main/erdiagram/generator/common/case-format/exports.ts","webpack:///./src/main/erdiagram/generator/common/exports.ts","webpack:///./src/main/erdiagram/generator/common/id-naming-strategy/StandardIdNamingStrategies.ts","webpack:///./src/main/erdiagram/generator/common/id-naming-strategy/exports.ts","webpack:///./src/main/erdiagram/generator/database/code-converter/EntityRelationshipModelToDatabaseCodeConverter.ts","webpack:///./src/main/erdiagram/generator/database/code-converter/exports.ts","webpack:///./src/main/erdiagram/generator/database/code-converter/mysql/MySqlDatabaseModelToCodeConverter.ts","webpack:///./src/main/erdiagram/generator/database/code-converter/mysql/column/MySqlColumnCodeGenerator.ts","webpack:///./src/main/erdiagram/generator/database/code-converter/mysql/column/MySqlForeignColumnCodeGenerator.ts","webpack:///./src/main/erdiagram/generator/database/code-converter/mysql/column/MySqlIdColumnCodeGenerator.ts","webpack:///./src/main/erdiagram/generator/database/code-converter/mysql/config/MysqlDatabaseModelToCodeConverterConfigManager.ts","webpack:///./src/main/erdiagram/generator/database/code-converter/mysql/config/exports.ts","webpack:///./src/main/erdiagram/generator/database/code-converter/mysql/exports.ts","webpack:///./src/main/erdiagram/generator/database/code-converter/mysql/type/MySqlTypeResolver.ts","webpack:///./src/main/erdiagram/generator/database/code-converter/oracle/OracleDatabaseModelToCodeConverter.ts","webpack:///./src/main/erdiagram/generator/database/code-converter/oracle/column/OracleColumnCodeGenerator.ts","webpack:///./src/main/erdiagram/generator/database/code-converter/oracle/column/OracleForeignColumnCodeGenerator.ts","webpack:///./src/main/erdiagram/generator/database/code-converter/oracle/column/OracleIdColumnCodeGenerator.ts","webpack:///./src/main/erdiagram/generator/database/code-converter/oracle/config/OracleDatabaseModelToCodeConverterConfigManager.ts","webpack:///./src/main/erdiagram/generator/database/code-converter/oracle/config/exports.ts","webpack:///./src/main/erdiagram/generator/database/code-converter/oracle/exports.ts","webpack:///./src/main/erdiagram/generator/database/code-converter/oracle/type/OracleTypeResolver.ts","webpack:///./src/main/erdiagram/generator/database/code-converter/sqlserver/SqlServerDatabaseModelToCodeConverter.ts","webpack:///./src/main/erdiagram/generator/database/code-converter/sqlserver/column/SqlServerColumnCodeGenerator.ts","webpack:///./src/main/erdiagram/generator/database/code-converter/sqlserver/column/SqlServerForeignColumnCodeGenerator.ts","webpack:///./src/main/erdiagram/generator/database/code-converter/sqlserver/column/SqlServerIdColumnCodeGenerator.ts","webpack:///./src/main/erdiagram/generator/database/code-converter/sqlserver/config/SqlServerDatabaseModelToCodeConverterConfigManager.ts","webpack:///./src/main/erdiagram/generator/database/code-converter/sqlserver/config/exports.ts","webpack:///./src/main/erdiagram/generator/database/code-converter/sqlserver/exports.ts","webpack:///./src/main/erdiagram/generator/database/code-converter/sqlserver/type/SqlServerTypeResolver.ts","webpack:///./src/main/erdiagram/generator/database/exports.ts","webpack:///./src/main/erdiagram/generator/database/model/DatabaseModelGenerator.ts","webpack:///./src/main/erdiagram/generator/database/model/config/DatabaseModelGeneratorConfigManager.ts","webpack:///./src/main/erdiagram/generator/database/model/config/exports.ts","webpack:///./src/main/erdiagram/generator/database/model/exports.ts","webpack:///./src/main/erdiagram/generator/exports.ts","webpack:///./src/main/erdiagram/generator/oop/code-converter/EntityRelationshipModelToClassCodeConverter.ts","webpack:///./src/main/erdiagram/generator/oop/code-converter/exports.ts","webpack:///./src/main/erdiagram/generator/oop/code-converter/java/JavaClassModelToCodeConverter.ts","webpack:///./src/main/erdiagram/generator/oop/code-converter/java/config/JavaClassModelToCodeConverterConfigManager.ts","webpack:///./src/main/erdiagram/generator/oop/code-converter/java/config/exports.ts","webpack:///./src/main/erdiagram/generator/oop/code-converter/java/exports.ts","webpack:///./src/main/erdiagram/generator/oop/code-converter/java/type/JavaParameterizedType.ts","webpack:///./src/main/erdiagram/generator/oop/code-converter/java/type/JavaType.ts","webpack:///./src/main/erdiagram/generator/oop/code-converter/java/type/parseJavaType.ts","webpack:///./src/main/erdiagram/generator/oop/code-converter/typescript/TypeScriptClassModelToCodeConverter.ts","webpack:///./src/main/erdiagram/generator/oop/code-converter/typescript/config/TypeScriptClassModelToCodeConverterConfigManager.ts","webpack:///./src/main/erdiagram/generator/oop/code-converter/typescript/config/exports.ts","webpack:///./src/main/erdiagram/generator/oop/code-converter/typescript/exports.ts","webpack:///./src/main/erdiagram/generator/oop/code-converter/typescript/type/TypeScriptParameterizedType.ts","webpack:///./src/main/erdiagram/generator/oop/code-converter/typescript/type/TypeScriptType.ts","webpack:///./src/main/erdiagram/generator/oop/code-converter/typescript/type/parseTypeScriptType.ts","webpack:///./src/main/erdiagram/generator/oop/exports.ts","webpack:///./src/main/erdiagram/generator/oop/model/ClassModelGenerator.ts","webpack:///./src/main/erdiagram/generator/oop/model/config/ClassModelGeneratorConfigManager.ts","webpack:///./src/main/erdiagram/generator/oop/model/config/exports.ts","webpack:///./src/main/erdiagram/generator/oop/model/exports.ts","webpack:///./src/main/erdiagram/parser/EntityRelationshipModelParser.ts","webpack:///./src/main/erdiagram/parser/ParsedModelToPublicModelConverter.ts","webpack:///./src/main/erdiagram/parser/config/EntityRelationshipModelParserConfigManager.ts","webpack:///./src/main/erdiagram/parser/config/exports.ts","webpack:///./src/main/erdiagram/parser/entity-relationship-model-types.ts","webpack:///./src/main/erdiagram/parser/exports.ts","webpack:///./src/main/erdiagram/parser/parse-errors.ts","webpack:///./src/main/erdiagram/parser/statement/statement-type-guesser.ts","webpack:///./src/main/erdiagram/parser/statement/statement-types-parse-functions.ts","webpack:///./src/main/erdiagram/parser/statement/statement-types-regexes.ts","webpack:///./src/main/erdiagram/parser/validator/ParsedEntityRelationshipModelValidator.ts","webpack:///./src/main/erdiagram/util/array-utils.ts","webpack:///./src/main/erdiagram/util/indent-utils.ts","webpack:///./src/main/erdiagram/util/map-utils.ts","webpack:///./src/main/erdiagram/util/record-utils.ts","webpack:///./src/main/erdiagram/util/regex-utils.ts","webpack:///./src/main/erdiagram/util/string-utils.ts","webpack:///./src/main/module-entry.ts"],"names":[],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;QCVA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;AClFA;;AAEA;AACA;AACA,MAAM,IAA0F;AAChG;AACA;AACA,GAAG,MAAM,EAQN;AACH,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,gBAAgB;AAC9B,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,MAAM;AACpB,cAAc;AACd;AACA;AACA,8BAA8B,IAAI;AAClC;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,MAAM;AACpB,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,MAAM;AACpB,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,MAAM;AACpB,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,QAAQ;AACtB,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,gBAAgB;AAC7B,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,gBAAgB;AAC7B,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,gBAAgB;AAC7B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;;;;;;;;;;;;;ACpfD;AAAA;AAAe,MAAe,8BAA8B;IAO3D,sBAAsB,CAAC,aAAiB;QACvC,OAAO,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,gBAAgB,EAAE,EAAE,aAAa,CAAC,CAAC;IAClE,CAAC;IAED,WAAW,CAAC,UAAa;QACxB,OAAO,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;IACtC,CAAC;CAMD;;;;;;;;;;;;;ACpBD;AAAA;AAAA;AAAA;AAAsG;AAKpG;;;;;;;;;;;;;ACNF;AAAA;AAAA;AAAA;AAAiC;;;;;;;;;;;;;ACAjC;AAAA;AAA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","file":"erdiagram.esm.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/main/module-entry.ts\");\n","/* global define */\n\n(function (root, pluralize) {\n  /* istanbul ignore else */\n  if (typeof require === 'function' && typeof exports === 'object' && typeof module === 'object') {\n    // Node.\n    module.exports = pluralize();\n  } else if (typeof define === 'function' && define.amd) {\n    // AMD, registers as an anonymous module.\n    define(function () {\n      return pluralize();\n    });\n  } else {\n    // Browser global.\n    root.pluralize = pluralize();\n  }\n})(this, function () {\n  // Rule storage - pluralize and singularize need to be run sequentially,\n  // while other rules can be optimized using an object for instant lookups.\n  var pluralRules = [];\n  var singularRules = [];\n  var uncountables = {};\n  var irregularPlurals = {};\n  var irregularSingles = {};\n\n  /**\n   * Sanitize a pluralization rule to a usable regular expression.\n   *\n   * @param  {(RegExp|string)} rule\n   * @return {RegExp}\n   */\n  function sanitizeRule (rule) {\n    if (typeof rule === 'string') {\n      return new RegExp('^' + rule + '$', 'i');\n    }\n\n    return rule;\n  }\n\n  /**\n   * Pass in a word token to produce a function that can replicate the case on\n   * another word.\n   *\n   * @param  {string}   word\n   * @param  {string}   token\n   * @return {Function}\n   */\n  function restoreCase (word, token) {\n    // Tokens are an exact match.\n    if (word === token) return token;\n\n    // Lower cased words. E.g. \"hello\".\n    if (word === word.toLowerCase()) return token.toLowerCase();\n\n    // Upper cased words. E.g. \"WHISKY\".\n    if (word === word.toUpperCase()) return token.toUpperCase();\n\n    // Title cased words. E.g. \"Title\".\n    if (word[0] === word[0].toUpperCase()) {\n      return token.charAt(0).toUpperCase() + token.substr(1).toLowerCase();\n    }\n\n    // Lower cased words. E.g. \"test\".\n    return token.toLowerCase();\n  }\n\n  /**\n   * Interpolate a regexp string.\n   *\n   * @param  {string} str\n   * @param  {Array}  args\n   * @return {string}\n   */\n  function interpolate (str, args) {\n    return str.replace(/\\$(\\d{1,2})/g, function (match, index) {\n      return args[index] || '';\n    });\n  }\n\n  /**\n   * Replace a word using a rule.\n   *\n   * @param  {string} word\n   * @param  {Array}  rule\n   * @return {string}\n   */\n  function replace (word, rule) {\n    return word.replace(rule[0], function (match, index) {\n      var result = interpolate(rule[1], arguments);\n\n      if (match === '') {\n        return restoreCase(word[index - 1], result);\n      }\n\n      return restoreCase(match, result);\n    });\n  }\n\n  /**\n   * Sanitize a word by passing in the word and sanitization rules.\n   *\n   * @param  {string}   token\n   * @param  {string}   word\n   * @param  {Array}    rules\n   * @return {string}\n   */\n  function sanitizeWord (token, word, rules) {\n    // Empty string or doesn't need fixing.\n    if (!token.length || uncountables.hasOwnProperty(token)) {\n      return word;\n    }\n\n    var len = rules.length;\n\n    // Iterate over the sanitization rules and use the first one to match.\n    while (len--) {\n      var rule = rules[len];\n\n      if (rule[0].test(word)) return replace(word, rule);\n    }\n\n    return word;\n  }\n\n  /**\n   * Replace a word with the updated word.\n   *\n   * @param  {Object}   replaceMap\n   * @param  {Object}   keepMap\n   * @param  {Array}    rules\n   * @return {Function}\n   */\n  function replaceWord (replaceMap, keepMap, rules) {\n    return function (word) {\n      // Get the correct token and case restoration functions.\n      var token = word.toLowerCase();\n\n      // Check against the keep object map.\n      if (keepMap.hasOwnProperty(token)) {\n        return restoreCase(word, token);\n      }\n\n      // Check against the replacement map for a direct word replacement.\n      if (replaceMap.hasOwnProperty(token)) {\n        return restoreCase(word, replaceMap[token]);\n      }\n\n      // Run all the rules against the word.\n      return sanitizeWord(token, word, rules);\n    };\n  }\n\n  /**\n   * Check if a word is part of the map.\n   */\n  function checkWord (replaceMap, keepMap, rules, bool) {\n    return function (word) {\n      var token = word.toLowerCase();\n\n      if (keepMap.hasOwnProperty(token)) return true;\n      if (replaceMap.hasOwnProperty(token)) return false;\n\n      return sanitizeWord(token, token, rules) === token;\n    };\n  }\n\n  /**\n   * Pluralize or singularize a word based on the passed in count.\n   *\n   * @param  {string}  word      The word to pluralize\n   * @param  {number}  count     How many of the word exist\n   * @param  {boolean} inclusive Whether to prefix with the number (e.g. 3 ducks)\n   * @return {string}\n   */\n  function pluralize (word, count, inclusive) {\n    var pluralized = count === 1\n      ? pluralize.singular(word) : pluralize.plural(word);\n\n    return (inclusive ? count + ' ' : '') + pluralized;\n  }\n\n  /**\n   * Pluralize a word.\n   *\n   * @type {Function}\n   */\n  pluralize.plural = replaceWord(\n    irregularSingles, irregularPlurals, pluralRules\n  );\n\n  /**\n   * Check if a word is plural.\n   *\n   * @type {Function}\n   */\n  pluralize.isPlural = checkWord(\n    irregularSingles, irregularPlurals, pluralRules\n  );\n\n  /**\n   * Singularize a word.\n   *\n   * @type {Function}\n   */\n  pluralize.singular = replaceWord(\n    irregularPlurals, irregularSingles, singularRules\n  );\n\n  /**\n   * Check if a word is singular.\n   *\n   * @type {Function}\n   */\n  pluralize.isSingular = checkWord(\n    irregularPlurals, irregularSingles, singularRules\n  );\n\n  /**\n   * Add a pluralization rule to the collection.\n   *\n   * @param {(string|RegExp)} rule\n   * @param {string}          replacement\n   */\n  pluralize.addPluralRule = function (rule, replacement) {\n    pluralRules.push([sanitizeRule(rule), replacement]);\n  };\n\n  /**\n   * Add a singularization rule to the collection.\n   *\n   * @param {(string|RegExp)} rule\n   * @param {string}          replacement\n   */\n  pluralize.addSingularRule = function (rule, replacement) {\n    singularRules.push([sanitizeRule(rule), replacement]);\n  };\n\n  /**\n   * Add an uncountable word rule.\n   *\n   * @param {(string|RegExp)} word\n   */\n  pluralize.addUncountableRule = function (word) {\n    if (typeof word === 'string') {\n      uncountables[word.toLowerCase()] = true;\n      return;\n    }\n\n    // Set singular and plural references for the word.\n    pluralize.addPluralRule(word, '$0');\n    pluralize.addSingularRule(word, '$0');\n  };\n\n  /**\n   * Add an irregular word definition.\n   *\n   * @param {string} single\n   * @param {string} plural\n   */\n  pluralize.addIrregularRule = function (single, plural) {\n    plural = plural.toLowerCase();\n    single = single.toLowerCase();\n\n    irregularSingles[single] = plural;\n    irregularPlurals[plural] = single;\n  };\n\n  /**\n   * Irregular rules.\n   */\n  [\n    // Pronouns.\n    ['I', 'we'],\n    ['me', 'us'],\n    ['he', 'they'],\n    ['she', 'they'],\n    ['them', 'them'],\n    ['myself', 'ourselves'],\n    ['yourself', 'yourselves'],\n    ['itself', 'themselves'],\n    ['herself', 'themselves'],\n    ['himself', 'themselves'],\n    ['themself', 'themselves'],\n    ['is', 'are'],\n    ['was', 'were'],\n    ['has', 'have'],\n    ['this', 'these'],\n    ['that', 'those'],\n    // Words ending in with a consonant and `o`.\n    ['echo', 'echoes'],\n    ['dingo', 'dingoes'],\n    ['volcano', 'volcanoes'],\n    ['tornado', 'tornadoes'],\n    ['torpedo', 'torpedoes'],\n    // Ends with `us`.\n    ['genus', 'genera'],\n    ['viscus', 'viscera'],\n    // Ends with `ma`.\n    ['stigma', 'stigmata'],\n    ['stoma', 'stomata'],\n    ['dogma', 'dogmata'],\n    ['lemma', 'lemmata'],\n    ['schema', 'schemata'],\n    ['anathema', 'anathemata'],\n    // Other irregular rules.\n    ['ox', 'oxen'],\n    ['axe', 'axes'],\n    ['die', 'dice'],\n    ['yes', 'yeses'],\n    ['foot', 'feet'],\n    ['eave', 'eaves'],\n    ['goose', 'geese'],\n    ['tooth', 'teeth'],\n    ['quiz', 'quizzes'],\n    ['human', 'humans'],\n    ['proof', 'proofs'],\n    ['carve', 'carves'],\n    ['valve', 'valves'],\n    ['looey', 'looies'],\n    ['thief', 'thieves'],\n    ['groove', 'grooves'],\n    ['pickaxe', 'pickaxes'],\n    ['passerby', 'passersby']\n  ].forEach(function (rule) {\n    return pluralize.addIrregularRule(rule[0], rule[1]);\n  });\n\n  /**\n   * Pluralization rules.\n   */\n  [\n    [/s?$/i, 's'],\n    [/[^\\u0000-\\u007F]$/i, '$0'],\n    [/([^aeiou]ese)$/i, '$1'],\n    [/(ax|test)is$/i, '$1es'],\n    [/(alias|[^aou]us|t[lm]as|gas|ris)$/i, '$1es'],\n    [/(e[mn]u)s?$/i, '$1s'],\n    [/([^l]ias|[aeiou]las|[ejzr]as|[iu]am)$/i, '$1'],\n    [/(alumn|syllab|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, '$1i'],\n    [/(alumn|alg|vertebr)(?:a|ae)$/i, '$1ae'],\n    [/(seraph|cherub)(?:im)?$/i, '$1im'],\n    [/(her|at|gr)o$/i, '$1oes'],\n    [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|automat|quor)(?:a|um)$/i, '$1a'],\n    [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)(?:a|on)$/i, '$1a'],\n    [/sis$/i, 'ses'],\n    [/(?:(kni|wi|li)fe|(ar|l|ea|eo|oa|hoo)f)$/i, '$1$2ves'],\n    [/([^aeiouy]|qu)y$/i, '$1ies'],\n    [/([^ch][ieo][ln])ey$/i, '$1ies'],\n    [/(x|ch|ss|sh|zz)$/i, '$1es'],\n    [/(matr|cod|mur|sil|vert|ind|append)(?:ix|ex)$/i, '$1ices'],\n    [/\\b((?:tit)?m|l)(?:ice|ouse)$/i, '$1ice'],\n    [/(pe)(?:rson|ople)$/i, '$1ople'],\n    [/(child)(?:ren)?$/i, '$1ren'],\n    [/eaux$/i, '$0'],\n    [/m[ae]n$/i, 'men'],\n    ['thou', 'you']\n  ].forEach(function (rule) {\n    return pluralize.addPluralRule(rule[0], rule[1]);\n  });\n\n  /**\n   * Singularization rules.\n   */\n  [\n    [/s$/i, ''],\n    [/(ss)$/i, '$1'],\n    [/(wi|kni|(?:after|half|high|low|mid|non|night|[^\\w]|^)li)ves$/i, '$1fe'],\n    [/(ar|(?:wo|[ae])l|[eo][ao])ves$/i, '$1f'],\n    [/ies$/i, 'y'],\n    [/\\b([pl]|zomb|(?:neck|cross)?t|coll|faer|food|gen|goon|group|lass|talk|goal|cut)ies$/i, '$1ie'],\n    [/\\b(mon|smil)ies$/i, '$1ey'],\n    [/\\b((?:tit)?m|l)ice$/i, '$1ouse'],\n    [/(seraph|cherub)im$/i, '$1'],\n    [/(x|ch|ss|sh|zz|tto|go|cho|alias|[^aou]us|t[lm]as|gas|(?:her|at|gr)o|[aeiou]ris)(?:es)?$/i, '$1'],\n    [/(analy|diagno|parenthe|progno|synop|the|empha|cri|ne)(?:sis|ses)$/i, '$1sis'],\n    [/(movie|twelve|abuse|e[mn]u)s$/i, '$1'],\n    [/(test)(?:is|es)$/i, '$1is'],\n    [/(alumn|syllab|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, '$1us'],\n    [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|quor)a$/i, '$1um'],\n    [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)a$/i, '$1on'],\n    [/(alumn|alg|vertebr)ae$/i, '$1a'],\n    [/(cod|mur|sil|vert|ind)ices$/i, '$1ex'],\n    [/(matr|append)ices$/i, '$1ix'],\n    [/(pe)(rson|ople)$/i, '$1rson'],\n    [/(child)ren$/i, '$1'],\n    [/(eau)x?$/i, '$1'],\n    [/men$/i, 'man']\n  ].forEach(function (rule) {\n    return pluralize.addSingularRule(rule[0], rule[1]);\n  });\n\n  /**\n   * Uncountable rules.\n   */\n  [\n    // Singular words with no plurals.\n    'adulthood',\n    'advice',\n    'agenda',\n    'aid',\n    'aircraft',\n    'alcohol',\n    'ammo',\n    'analytics',\n    'anime',\n    'athletics',\n    'audio',\n    'bison',\n    'blood',\n    'bream',\n    'buffalo',\n    'butter',\n    'carp',\n    'cash',\n    'chassis',\n    'chess',\n    'clothing',\n    'cod',\n    'commerce',\n    'cooperation',\n    'corps',\n    'debris',\n    'diabetes',\n    'digestion',\n    'elk',\n    'energy',\n    'equipment',\n    'excretion',\n    'expertise',\n    'firmware',\n    'flounder',\n    'fun',\n    'gallows',\n    'garbage',\n    'graffiti',\n    'hardware',\n    'headquarters',\n    'health',\n    'herpes',\n    'highjinks',\n    'homework',\n    'housework',\n    'information',\n    'jeans',\n    'justice',\n    'kudos',\n    'labour',\n    'literature',\n    'machinery',\n    'mackerel',\n    'mail',\n    'media',\n    'mews',\n    'moose',\n    'music',\n    'mud',\n    'manga',\n    'news',\n    'only',\n    'personnel',\n    'pike',\n    'plankton',\n    'pliers',\n    'police',\n    'pollution',\n    'premises',\n    'rain',\n    'research',\n    'rice',\n    'salmon',\n    'scissors',\n    'series',\n    'sewage',\n    'shambles',\n    'shrimp',\n    'software',\n    'species',\n    'staff',\n    'swine',\n    'tennis',\n    'traffic',\n    'transportation',\n    'trout',\n    'tuna',\n    'wealth',\n    'welfare',\n    'whiting',\n    'wildebeest',\n    'wildlife',\n    'you',\n    /pok[eé]mon$/i,\n    // Regexes.\n    /[^aeiou]ese$/i, // \"chinese\", \"japanese\"\n    /deer$/i, // \"deer\", \"reindeer\"\n    /fish$/i, // \"fish\", \"blowfish\", \"angelfish\"\n    /measles$/i,\n    /o[iu]s$/i, // \"carnivorous\"\n    /pox$/i, // \"chickpox\", \"smallpox\"\n    /sheep$/i\n  ].forEach(pluralize.addUncountableRule);\n\n  return pluralize;\n});\n","import ComponentConfigManager from '@/erdiagram/common/config/ComponentConfigManager';\n\nexport default abstract class AbstractComponentConfigManager<C, P = Partial<C>, S = C>\n\t\timplements ComponentConfigManager<C, P, S> {\n\n\tabstract getDefaultConfig(): C;\n\n\tabstract mergeConfigs(fullConfig: C, partialConfig?: P): C;\n\n\tmergeWithDefaultConfig(partialConfig?: P): C {\n\t\treturn this.mergeConfigs(this.getDefaultConfig(), partialConfig);\n\t}\n\n\tcloneConfig(fullConfig: C): C {\n\t\treturn this.mergeConfigs(fullConfig);\n\t}\n\n\tabstract convertToSerializableObject(fullConfig: C): S;\n\n\tabstract convertFromSerializableObject(serializableConfig: S): C;\n\n}\n","import ComponentConfigManager from '@/erdiagram/common/config/ComponentConfigManager';\nimport AbstractComponentConfigManager from '@/erdiagram/common/config/AbstractComponentConfigManager';\n\nexport {\n\tComponentConfigManager,\n\tAbstractComponentConfigManager\n};\n","export * from './config/exports';\n","export * from './common/exports';\nexport * from './generator/exports';\nexport * from './parser/exports';\n","import CaseFormat from '@/erdiagram/generator/common/case-format/CaseFormat';\n\nconst CAMEL_CASE_WORD_BOUNDARIES_REGEX = /((?<=[^A-Z])(?=[A-Z])|(?=[A-Z][a-z]))/;\n\nexport default abstract class AbstractCamelCaseFormat implements CaseFormat {\n\n\tabstract joinWords(words: string[]): string;\n\n\tpublic splitWords(text: string): string[] {\n\t\treturn text.split(CAMEL_CASE_WORD_BOUNDARIES_REGEX)\n\t\t\t\t.filter(chunk => chunk.length > 0);\n\t}\n\n}\n","import CaseFormat from '@/erdiagram/generator/common/case-format/CaseFormat';\n\nexport default abstract class AbstractUnderscoreCaseFormat implements CaseFormat {\n\n\tabstract joinWords(words: string[]): string;\n\n\tpublic splitWords(text: string): string[] {\n\t\treturn text.split('_');\n\t}\n\n}\n","import AbstractUnderscoreCaseFormat from '@/erdiagram/generator/common/case-format/AbstractUnderscoreCaseFormat';\nimport {capitalizeWord} from '@/erdiagram/util/string-utils';\n\nexport default class CapitalizedUnderscoreCaseFormat extends AbstractUnderscoreCaseFormat {\n\n\tpublic joinWords(words: string[]): string {\n\t\treturn words\n\t\t\t\t.map(word => word.toLowerCase())\n\t\t\t\t.map(capitalizeWord)\n\t\t\t\t.join('_');\n\t}\n\n}\n","import CaseFormat from '@/erdiagram/generator/common/case-format/CaseFormat';\n\nexport default class CaseConverter {\n\n\tconstructor(\n\t\t\tprivate readonly originCaseFormat: CaseFormat,\n\t\t\tprivate readonly targetCaseFormat: CaseFormat\n\t) {\n\n\t}\n\n\tpublic convertCase(text: string) {\n\t\tconst words = this.originCaseFormat.splitWords(text);\n\t\treturn this.targetCaseFormat.joinWords(words);\n\t}\n\n}\n","import AbstractUnderscoreCaseFormat from '@/erdiagram/generator/common/case-format/AbstractUnderscoreCaseFormat';\n\nexport default class CaseInsensitiveUnderscoreCaseFormat extends AbstractUnderscoreCaseFormat {\n\n\tpublic joinWords(words: string[]): string {\n\t\treturn words.join('_');\n\t}\n\n}\n","import AbstractCamelCaseFormat from '@/erdiagram/generator/common/case-format/AbstractCamelCaseFormat';\nimport {capitalizeWord} from '@/erdiagram/util/string-utils';\n\nexport default class LowerCamelCaseFormat extends AbstractCamelCaseFormat {\n\n\tpublic joinWords(words: string[]): string {\n\n\t\tif (words.length === 0) {\n\t\t\treturn '';\n\t\t}\n\n\t\tconst [firstWord, ...otherWords] = words;\n\n\t\tconst lowerCaseFirstWord = firstWord.toLowerCase();\n\n\t\tconst capitalizedOtherWords = otherWords\n\t\t\t\t.map(word => word.toLowerCase())\n\t\t\t\t.map(capitalizeWord);\n\n\t\treturn lowerCaseFirstWord + capitalizedOtherWords.join('');\n\n\t}\n\n}\n","import AbstractUnderscoreCaseFormat from '@/erdiagram/generator/common/case-format/AbstractUnderscoreCaseFormat';\n\nexport default class LowerUnderscoreCaseFormat extends AbstractUnderscoreCaseFormat {\n\n\tpublic joinWords(words: string[]): string {\n\t\treturn words\n\t\t\t\t.map(word => word.toLowerCase())\n\t\t\t\t.join('_');\n\t}\n\n}\n","import LowerCamelCaseFormat from '@/erdiagram/generator/common/case-format/LowerCamelCaseFormat';\nimport UpperCamelCaseFormat from '@/erdiagram/generator/common/case-format/UpperCamelCaseFormat';\nimport LowerUnderscoreCaseFormat from '@/erdiagram/generator/common/case-format/LowerUnderscoreCaseFormat';\nimport CapitalizedUnderscoreCaseFormat from '@/erdiagram/generator/common/case-format/CapitalizedUnderscoreCaseFormat';\nimport UpperUnderscoreCaseFormat from '@/erdiagram/generator/common/case-format/UpperUnderscoreCaseFormat';\nimport CaseInsensitiveUnderscoreCaseFormat\n\tfrom '@/erdiagram/generator/common/case-format/CaseInsensitiveUnderscoreCaseFormat';\nimport CaseFormat from '@/erdiagram/generator/common/case-format/CaseFormat';\n\nconst StandardCaseFormats = {\n\tLOWER_CAMEL: new LowerCamelCaseFormat() as CaseFormat,\n\tUPPER_CAMEL: new UpperCamelCaseFormat() as CaseFormat,\n\tLOWER_UNDERSCORE: new LowerUnderscoreCaseFormat() as CaseFormat,\n\tCAPITALIZED_UNDERSCORE: new CapitalizedUnderscoreCaseFormat() as CaseFormat,\n\tUPPER_UNDERSCORE: new UpperUnderscoreCaseFormat() as CaseFormat,\n\tCASE_INSENSITIVE_UNDERSCORE: new CaseInsensitiveUnderscoreCaseFormat() as CaseFormat,\n};\n\nexport default StandardCaseFormats;\n","import AbstractCamelCaseFormat from '@/erdiagram/generator/common/case-format/AbstractCamelCaseFormat';\nimport {capitalizeWord} from '@/erdiagram/util/string-utils';\n\nexport default class UpperCamelCaseFormat extends AbstractCamelCaseFormat {\n\n\tpublic joinWords(words: string[]): string {\n\t\treturn words\n\t\t\t\t.map(word => word.toLowerCase())\n\t\t\t\t.map(capitalizeWord)\n\t\t\t\t.join('');\n\t}\n\n}\n","import AbstractUnderscoreCaseFormat from '@/erdiagram/generator/common/case-format/AbstractUnderscoreCaseFormat';\n\nexport default class UpperUnderscoreCaseFormat extends AbstractUnderscoreCaseFormat {\n\n\tpublic joinWords(words: string[]): string {\n\t\treturn words\n\t\t\t\t.map(word => word.toUpperCase())\n\t\t\t\t.join('_');\n\t}\n\n}\n","import CaseConverter from './CaseConverter';\nimport CaseFormat from './CaseFormat';\nimport StandardCaseFormats from './StandardCaseFormats';\n\nexport {\n\tCaseFormat,\n\tStandardCaseFormats,\n\tCaseConverter\n};\n","export * from './case-format/exports';\nexport * from './id-naming-strategy/exports';\n","import {uncapitalizeWord} from '@/erdiagram/util/string-utils';\nimport IdNamingStrategy from '@/erdiagram/generator/common/id-naming-strategy/IdNamingStrategy';\n\nconst defaultIdNamingStrategy: IdNamingStrategy = () => 'id';\nconst entityNamePrefixIdNamingStrategy: IdNamingStrategy = entityName => `${uncapitalizeWord(entityName)}Id`;\n\nconst StandardIdNamingStrategies = {\n\tDEFAULT: defaultIdNamingStrategy,\n\tENTITY_NAME_PREFIX: entityNamePrefixIdNamingStrategy\n};\n\nexport default StandardIdNamingStrategies;\n","import StandardIdNamingStrategies from './StandardIdNamingStrategies';\nimport IdNamingStrategy from './IdNamingStrategy';\n\nexport {\n\tIdNamingStrategy,\n\tStandardIdNamingStrategies\n};\n","import DatabaseModelGenerator from '@/erdiagram/generator/database/model/DatabaseModelGenerator';\nimport DatabaseModelToCodeConverter from '@/erdiagram/generator/database/code-converter/DatabaseModelToCodeConverter';\nimport EntityRelationshipModelToCodeConverter from '@/erdiagram/generator/EntityRelationshipModelToCodeConverter';\nimport {EntityRelationshipModel} from '@/erdiagram/parser/entity-relationship-model-types';\n\nexport default class EntityRelationshipModelToDatabaseCodeConverter implements EntityRelationshipModelToCodeConverter {\n\n\tprivate readonly databaseModelGenerator: DatabaseModelGenerator;\n\tprivate readonly databaseModelToCodeConverter: DatabaseModelToCodeConverter;\n\n\tconstructor(\n\t\t\tdatabaseModelGenerator: DatabaseModelGenerator,\n\t\t\tdatabaseModelToCodeConverter: DatabaseModelToCodeConverter\n\t) {\n\t\tthis.databaseModelGenerator = databaseModelGenerator;\n\t\tthis.databaseModelToCodeConverter = databaseModelToCodeConverter;\n\t}\n\n\tpublic generateCode(entityRelationshipModel: EntityRelationshipModel): string {\n\t\tconst databaseModel = this.databaseModelGenerator.generateDatabaseModel(entityRelationshipModel);\n\t\treturn this.databaseModelToCodeConverter.generateCode(databaseModel);\n\t}\n\n}\n","import DatabaseModelToCodeConverter from './DatabaseModelToCodeConverter';\nimport DatabaseModelToCodeConverterConfig from './DatabaseModelToCodeConverterConfig';\nimport DatabaseModelToCodeConverterSerializableConfig from './DatabaseModelToCodeConverterSerializableConfig';\nimport EntityRelationshipModelToDatabaseCodeConverter from './EntityRelationshipModelToDatabaseCodeConverter';\n\nexport * from './mysql/exports';\nexport * from './oracle/exports';\nexport * from './sqlserver/exports';\n\nexport {\n\tDatabaseModelToCodeConverter,\n\tDatabaseModelToCodeConverterConfig,\n\tDatabaseModelToCodeConverterSerializableConfig,\n\tEntityRelationshipModelToDatabaseCodeConverter\n};\n","import {\n\tDatabaseModel,\n\tTableColumnDescriptor,\n\tTableDescriptor,\n\tTableReferenceDescriptor\n} from '@/erdiagram/generator/database/model/database-model-types';\nimport MySqlDatabaseModelToCodeConverterConfig\n\tfrom '@/erdiagram/generator/database/code-converter/mysql/config/MySqlDatabaseModelToCodeConverterConfig';\nimport DatabaseModelToCodeConverter from '@/erdiagram/generator/database/code-converter/DatabaseModelToCodeConverter';\nimport TableCreationStatements\n\tfrom '@/erdiagram/generator/database/code-converter/mysql/column/types/TableCreationStatements';\nimport MySqlColumnCodeGenerator\n\tfrom '@/erdiagram/generator/database/code-converter/mysql/column/MySqlColumnCodeGenerator';\nimport MySqlTypeResolver from '@/erdiagram/generator/database/code-converter/mysql/type/MySqlTypeResolver';\nimport MySqlIdColumnCodeGenerator\n\tfrom '@/erdiagram/generator/database/code-converter/mysql/column/MySqlIdColumnCodeGenerator';\nimport MySqlForeignColumnCodeGenerator\n\tfrom '@/erdiagram/generator/database/code-converter/mysql/column/MySqlForeignColumnCodeGenerator';\nimport {indentLines} from '@/erdiagram/util/indent-utils';\nimport StandardCaseFormats from '@/erdiagram/generator/common/case-format/StandardCaseFormats';\nimport CaseConverter from '@/erdiagram/generator/common/case-format/CaseConverter';\nimport mysqlDatabaseModelToCodeConverterConfigManager\n\tfrom '@/erdiagram/generator/database/code-converter/mysql/config/MysqlDatabaseModelToCodeConverterConfigManager';\n\nexport default class MySqlDatabaseModelToCodeConverter implements DatabaseModelToCodeConverter {\n\n\tprivate readonly config: MySqlDatabaseModelToCodeConverterConfig;\n\n\tprivate readonly tableNameCaseConverter: CaseConverter;\n\n\tprivate readonly columnCodeGenerator: MySqlColumnCodeGenerator;\n\tprivate readonly idColumnCodeGenerator: MySqlIdColumnCodeGenerator;\n\tprivate readonly foreignColumnCodeGenerator: MySqlForeignColumnCodeGenerator;\n\n\tconstructor(config?: Partial<MySqlDatabaseModelToCodeConverterConfig>) {\n\n\t\tthis.config = mysqlDatabaseModelToCodeConverterConfigManager.mergeWithDefaultConfig(config);\n\n\t\tthis.tableNameCaseConverter = new CaseConverter(\n\t\t\t\tStandardCaseFormats.LOWER_CAMEL,\n\t\t\t\tthis.config.tableNameCaseFormat\n\t\t);\n\n\t\tconst columnNameCaseConverter = new CaseConverter(\n\t\t\t\tStandardCaseFormats.LOWER_CAMEL,\n\t\t\t\tthis.config.columnNameCaseFormat\n\t\t);\n\n\t\tthis.columnCodeGenerator = new MySqlColumnCodeGenerator(\n\t\t\t\tnew MySqlTypeResolver(this.config.typeBindings),\n\t\t\t\tcolumnNameCaseConverter\n\t\t);\n\n\t\tthis.idColumnCodeGenerator = new MySqlIdColumnCodeGenerator(\n\t\t\t\tthis.columnCodeGenerator,\n\t\t\t\tcolumnNameCaseConverter\n\t\t);\n\n\t\tthis.foreignColumnCodeGenerator = new MySqlForeignColumnCodeGenerator(\n\t\t\t\tthis.columnCodeGenerator,\n\t\t\t\tthis.tableNameCaseConverter,\n\t\t\t\tcolumnNameCaseConverter\n\t\t);\n\n\t}\n\n\tpublic generateCode(databaseModel: DatabaseModel): string {\n\n\t\tconst allCreateTableStatements: string[] = [];\n\t\tconst allAlterTableStatements: string[] = [];\n\n\t\tdatabaseModel.tables\n\t\t\t\t.map(table => this.generateTableCode(table))\n\t\t\t\t.forEach(({createTableStatement, alterTableStatements}) => {\n\n\t\t\t\t\tallCreateTableStatements.push(createTableStatement);\n\n\t\t\t\t\tif (alterTableStatements) {\n\t\t\t\t\t\tallAlterTableStatements.push(alterTableStatements);\n\t\t\t\t\t}\n\n\t\t\t\t});\n\n\t\treturn allCreateTableStatements.join('\\n\\n')\n\t\t\t\t+ '\\n\\n'\n\t\t\t\t+ allAlterTableStatements.join('\\n\\n');\n\n\t}\n\n\t// FIXME split this method\n\tprivate generateTableCode(table: TableDescriptor): TableCreationStatements {\n\n\t\tconst columnLines: string[] = [];\n\t\tconst fkConstraintLines: string[] = [];\n\t\tconst otherConstraintLines: string[] = [];\n\n\t\tconst outputTableName = this.tableNameCaseConverter.convertCase(table.name);\n\n\t\tconst {\n\t\t\tcolumnLine: idColumnLine,\n\t\t\tpkConstraintLine\n\t\t} = this.idColumnCodeGenerator.generateIdColumnCode(outputTableName, table.identifierColumnName);\n\n\t\tcolumnLines.push(idColumnLine);\n\t\totherConstraintLines.push(pkConstraintLine);\n\n\t\tthis.processColumns(outputTableName, table.columns, columnLines, otherConstraintLines);\n\t\tthis.processReferences(outputTableName, table.references, columnLines, fkConstraintLines, otherConstraintLines);\n\n\t\tconst createTableInnerLines = [\n\t\t\t...columnLines,\n\t\t\t...otherConstraintLines\n\t\t];\n\n\t\tconst createTableLines = [\n\t\t\t`CREATE TABLE \\`${outputTableName}\\` (`,\n\t\t\tindentLines(createTableInnerLines).join(',\\n'),\n\t\t\t');'\n\t\t];\n\n\t\tconst createTableStatement = createTableLines.join('\\n');\n\t\tconst alterTableStatements = fkConstraintLines.map(fkConstraintLine => {\n\t\t\treturn `ALTER TABLE \\`${outputTableName}\\` ADD ${fkConstraintLine};`;\n\t\t}).join('\\n');\n\n\t\treturn {\n\t\t\tcreateTableStatement,\n\t\t\talterTableStatements\n\t\t};\n\n\t}\n\n\tprivate processReferences(outputTableName: string, references: TableReferenceDescriptor[], columnLines: string[], fkConstraintLines: string[], otherConstraintLines: string[]) {\n\n\t\tfor (const reference of references) {\n\n\t\t\tconst {\n\t\t\t\tcolumnLine,\n\t\t\t\tuniqueConstraintLine,\n\t\t\t\tfkConstraintLine\n\t\t\t} = this.foreignColumnCodeGenerator.generateForeignColumnCode(outputTableName, reference);\n\n\t\t\tcolumnLines.push(columnLine);\n\t\t\tfkConstraintLines.push(fkConstraintLine);\n\n\t\t\tif (uniqueConstraintLine) {\n\t\t\t\totherConstraintLines.push(uniqueConstraintLine);\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tprivate processColumns(outputTableName: string, columns: TableColumnDescriptor[], columnLines: string[], otherConstraintLines: string[]) {\n\n\t\tfor (const column of columns) {\n\n\t\t\tconst {\n\t\t\t\tcolumnLine,\n\t\t\t\tuniqueConstraintLine\n\t\t\t} = this.columnCodeGenerator.generateColumnCode(outputTableName, column);\n\n\t\t\tcolumnLines.push(columnLine);\n\n\t\t\tif (uniqueConstraintLine) {\n\t\t\t\totherConstraintLines.push(uniqueConstraintLine);\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n","import {EntityPropertyType} from '@/erdiagram/parser/entity-relationship-model-types';\nimport {TableColumnDescriptor} from '@/erdiagram/generator/database/model/database-model-types';\nimport RegularColumnCode from '@/erdiagram/generator/database/code-converter/mysql/column/types/RegularColumnCode';\nimport MySqlTypeResolver from '@/erdiagram/generator/database/code-converter/mysql/type/MySqlTypeResolver';\nimport CaseConverter from '@/erdiagram/generator/common/case-format/CaseConverter';\n\nexport default class MySqlColumnCodeGenerator {\n\n\tconstructor(\n\t\t\tprivate readonly typeResolver: MySqlTypeResolver,\n\t\t\tprivate readonly columnNameCaseConverter: CaseConverter\n\t) {\n\n\t}\n\n\tpublic generateColumnCode(outputTableName: string, column: TableColumnDescriptor): RegularColumnCode {\n\n\t\tconst outputColumnName = this.columnNameCaseConverter.convertCase(column.name);\n\n\t\treturn {\n\t\t\tcolumnLine: this.generateColumnDeclarationLine(outputColumnName, column),\n\t\t\tuniqueConstraintLine: column.unique ? this.generateUniqueConstraintLine(outputTableName, outputColumnName) : undefined\n\t\t};\n\n\t}\n\n\tprivate generateColumnDeclarationLine(outputColumnName: string, column: TableColumnDescriptor): string {\n\n\t\tconst {\n\t\t\tnotNull,\n\t\t\tautoincremental,\n\t\t\ttype,\n\t\t\tlength\n\t\t} = column;\n\n\t\tconst lineParts: string[] = [\n\t\t\t`\\`${outputColumnName}\\``,\n\t\t\tthis.generateMySqlTypeDeclaration(type, length)\n\t\t];\n\n\t\tif (notNull) {\n\t\t\tlineParts.push('NOT NULL');\n\t\t}\n\n\t\tif (autoincremental) {\n\t\t\tlineParts.push('AUTO_INCREMENT');\n\t\t}\n\n\t\treturn lineParts.join(' ');\n\n\t}\n\n\tprivate generateMySqlTypeDeclaration(type: EntityPropertyType, length: number[]) {\n\n\t\tconst mysqlType = this.typeResolver.resolveMySqlType(type);\n\t\tconst lengthCode = this.generateLengthCode(length);\n\n\t\treturn mysqlType + lengthCode;\n\n\t}\n\n\tprivate generateLengthCode(length: number[]): string {\n\n\t\tif (length.length === 0) {\n\t\t\treturn '';\n\t\t}\n\n\t\treturn `(${length.join(', ')})`;\n\n\t}\n\n\tprivate generateUniqueConstraintLine(outputTableName: string, outputColumnName: string) {\n\t\treturn `CONSTRAINT \\`${outputTableName}_${outputColumnName}_unique\\` UNIQUE (\\`${outputColumnName}\\`)`;\n\t}\n\n}\n","import {EntityPropertyType} from '@/erdiagram/parser/entity-relationship-model-types';\nimport {\n\tTableColumnDescriptor,\n\tTableReferenceDescriptor\n} from '@/erdiagram/generator/database/model/database-model-types';\nimport ForeignKeyColumnCode\n\tfrom '@/erdiagram/generator/database/code-converter/mysql/column/types/ForeignKeyColumnCode';\nimport MySqlColumnCodeGenerator\n\tfrom '@/erdiagram/generator/database/code-converter/mysql/column/MySqlColumnCodeGenerator';\nimport CaseConverter from '@/erdiagram/generator/common/case-format/CaseConverter';\n\nexport default class MySqlForeignColumnCodeGenerator {\n\n\tconstructor(\n\t\t\tprivate readonly columnCodeGenerator: MySqlColumnCodeGenerator,\n\t\t\tprivate readonly tableNameCaseConverter: CaseConverter,\n\t\t\tprivate readonly columnNameCaseConverter: CaseConverter\n\t) {\n\n\t}\n\n\tpublic generateForeignColumnCode(outputTableName: string, reference: TableReferenceDescriptor): ForeignKeyColumnCode {\n\n\t\tconst columnDescriptor = this.createForeignKeyColumnDescriptor(reference);\n\n\t\tconst {\n\t\t\tcolumnLine,\n\t\t\tuniqueConstraintLine\n\t\t} = this.columnCodeGenerator.generateColumnCode(outputTableName, columnDescriptor);\n\n\t\treturn {\n\t\t\tcolumnLine,\n\t\t\tuniqueConstraintLine,\n\t\t\tfkConstraintLine: this.createForeignKeyConstraint(outputTableName, reference)\n\t\t};\n\n\t}\n\n\tprivate createForeignKeyColumnDescriptor(reference: TableReferenceDescriptor): TableColumnDescriptor {\n\n\t\tconst {\n\t\t\tcolumnName,\n\t\t\tnotNull,\n\t\t\tunique\n\t\t} = reference;\n\n\t\treturn {\n\t\t\tname: columnName,\n\t\t\ttype: EntityPropertyType.IDENTIFIER,\n\t\t\tlength: [],\n\t\t\tnotNull,\n\t\t\tunique,\n\t\t\tautoincremental: false\n\t\t};\n\n\t}\n\n\tprivate createForeignKeyConstraint(outputTableName: string, reference: TableReferenceDescriptor) {\n\n\t\tconst outputColumnName = this.columnNameCaseConverter.convertCase(reference.columnName);\n\n\t\tconst outputTargetTableName = this.tableNameCaseConverter.convertCase(reference.targetTableName);\n\t\tconst outputTargetColumnName = this.columnNameCaseConverter.convertCase(reference.targetTableIdentifierColumnName);\n\n\t\treturn `CONSTRAINT \\`${outputTableName}_${outputColumnName}_fk\\` FOREIGN KEY (\\`${outputColumnName}\\`)`\n\t\t\t\t+ ` REFERENCES \\`${outputTargetTableName}\\` (\\`${outputTargetColumnName}\\`)`;\n\n\t}\n\n}\n","import {EntityPropertyType} from '@/erdiagram/parser/entity-relationship-model-types';\nimport {TableColumnDescriptor} from '@/erdiagram/generator/database/model/database-model-types';\nimport IdColumnCode from '@/erdiagram/generator/database/code-converter/mysql/column/types/IdColumnCode';\nimport MySqlColumnCodeGenerator\n\tfrom '@/erdiagram/generator/database/code-converter/mysql/column/MySqlColumnCodeGenerator';\nimport CaseConverter from '@/erdiagram/generator/common/case-format/CaseConverter';\n\nexport default class MySqlIdColumnCodeGenerator {\n\n\tconstructor(\n\t\t\tprivate readonly columnCodeGenerator: MySqlColumnCodeGenerator,\n\t\t\tprivate readonly columnNameCaseConverter: CaseConverter\n\t) {\n\n\t}\n\n\tpublic generateIdColumnCode(outputTableName: string, identifierColumnName: string): IdColumnCode {\n\n\t\tconst column = this.createIdColumnDescriptor(identifierColumnName);\n\n\t\tconst {\n\t\t\tcolumnLine\n\t\t} = this.columnCodeGenerator.generateColumnCode(outputTableName, column);\n\n\t\tconst pkConstraintLine = this.createPrimaryKeyConstraint(outputTableName, column);\n\n\t\treturn {\n\t\t\tcolumnLine,\n\t\t\tpkConstraintLine\n\t\t};\n\n\t}\n\n\tprivate createIdColumnDescriptor(identifierColumnName: string): TableColumnDescriptor {\n\t\treturn {\n\t\t\tname: identifierColumnName,\n\t\t\ttype: EntityPropertyType.IDENTIFIER,\n\t\t\tlength: [],\n\t\t\tnotNull: true,\n\t\t\tautoincremental: true,\n\t\t\t// As primary keys are unique by default, we don't\n\t\t\t// need to manually define an UNIQUE KEY constraint\n\t\t\tunique: false\n\t\t};\n\t}\n\n\tprivate createPrimaryKeyConstraint(outputTableName: string, column: TableColumnDescriptor) {\n\t\tconst columnName = this.columnNameCaseConverter.convertCase(column.name);\n\t\treturn `CONSTRAINT \\`${outputTableName}_pk\\` PRIMARY KEY (\\`${columnName}\\`)`;\n\t}\n\n}\n","import {EntityPropertyType} from '@/erdiagram/parser/entity-relationship-model-types';\nimport StandardCaseFormats from '@/erdiagram/generator/common/case-format/StandardCaseFormats';\nimport AbstractComponentConfigManager from '@/erdiagram/common/config/AbstractComponentConfigManager';\nimport MySqlDatabaseModelToCodeConverterConfig\n\tfrom '@/erdiagram/generator/database/code-converter/mysql/config/MySqlDatabaseModelToCodeConverterConfig';\nimport {findKeyFromValue, findValueFromNullableKey} from '@/erdiagram/util/record-utils';\nimport MySqlDatabaseModelToCodeConverterSerializableConfig\n\tfrom '@/erdiagram/generator/database/code-converter/mysql/config/MySqlDatabaseModelToCodeConverterSerializableConfig';\n\nexport class MySqlDatabaseModelToCodeConverterConfigManager\n\t\textends AbstractComponentConfigManager<MySqlDatabaseModelToCodeConverterConfig, Partial<MySqlDatabaseModelToCodeConverterConfig>, MySqlDatabaseModelToCodeConverterSerializableConfig> {\n\n\tgetDefaultConfig(): MySqlDatabaseModelToCodeConverterConfig {\n\t\treturn {\n\t\t\ttypeBindings: {\n\t\t\t\t[EntityPropertyType.IDENTIFIER]: 'BIGINT',\n\t\t\t\t[EntityPropertyType.TEXT]: 'VARCHAR',\n\t\t\t\t[EntityPropertyType.LONG]: 'BIGINT',\n\t\t\t\t[EntityPropertyType.INT]: 'INT',\n\t\t\t\t[EntityPropertyType.SHORT]: 'SHORT',\n\t\t\t\t[EntityPropertyType.DECIMAL]: 'DECIMAL',\n\t\t\t\t[EntityPropertyType.BOOLEAN]: 'BOOLEAN',\n\t\t\t\t[EntityPropertyType.DATE]: 'DATE',\n\t\t\t\t[EntityPropertyType.TIME]: 'TIME',\n\t\t\t\t[EntityPropertyType.DATETIME]: 'TIMESTAMP',\n\t\t\t\t[EntityPropertyType.BLOB]: 'BLOB'\n\t\t\t},\n\t\t\ttableNameCaseFormat: StandardCaseFormats.UPPER_CAMEL,\n\t\t\tcolumnNameCaseFormat: StandardCaseFormats.LOWER_CAMEL,\n\t\t};\n\t}\n\n\tmergeConfigs(fullConfig: MySqlDatabaseModelToCodeConverterConfig, partialConfig?: Partial<MySqlDatabaseModelToCodeConverterConfig>): MySqlDatabaseModelToCodeConverterConfig {\n\t\treturn {\n\t\t\t...fullConfig,\n\t\t\t...partialConfig,\n\t\t\ttypeBindings: {\n\t\t\t\t...fullConfig.typeBindings,\n\t\t\t\t...partialConfig?.typeBindings\n\t\t\t}\n\t\t};\n\t}\n\n\tconvertToSerializableObject(fullConfig: MySqlDatabaseModelToCodeConverterConfig): MySqlDatabaseModelToCodeConverterSerializableConfig {\n\t\treturn {\n\t\t\t...fullConfig,\n\t\t\ttableNameCaseFormat: findKeyFromValue(StandardCaseFormats, fullConfig.tableNameCaseFormat),\n\t\t\tcolumnNameCaseFormat: findKeyFromValue(StandardCaseFormats, fullConfig.columnNameCaseFormat),\n\t\t};\n\t}\n\n\tconvertFromSerializableObject(serializableConfig: MySqlDatabaseModelToCodeConverterSerializableConfig): MySqlDatabaseModelToCodeConverterConfig {\n\t\treturn {\n\t\t\t...serializableConfig,\n\t\t\ttableNameCaseFormat: findValueFromNullableKey(StandardCaseFormats, serializableConfig.tableNameCaseFormat, StandardCaseFormats.UPPER_CAMEL),\n\t\t\tcolumnNameCaseFormat: findValueFromNullableKey(StandardCaseFormats, serializableConfig.columnNameCaseFormat, StandardCaseFormats.UPPER_CAMEL),\n\t\t};\n\t}\n\n}\n\nconst mysqlDatabaseModelToCodeConverterConfigManager = new MySqlDatabaseModelToCodeConverterConfigManager();\nexport default mysqlDatabaseModelToCodeConverterConfigManager;\n","import MySqlDatabaseModelToCodeConverterConfig from './MySqlDatabaseModelToCodeConverterConfig';\nimport MySqlDatabaseModelToCodeConverterSerializableConfig from './MySqlDatabaseModelToCodeConverterSerializableConfig';\nimport mysqlDatabaseModelToCodeConverterConfigManager, {MySqlDatabaseModelToCodeConverterConfigManager} from './MysqlDatabaseModelToCodeConverterConfigManager';\n\nexport {\n\tMySqlDatabaseModelToCodeConverterConfig,\n\tMySqlDatabaseModelToCodeConverterSerializableConfig,\n\tMySqlDatabaseModelToCodeConverterConfigManager,\n\tmysqlDatabaseModelToCodeConverterConfigManager\n};\n","import MySqlDatabaseModelToCodeConverter from './MySqlDatabaseModelToCodeConverter';\n\nexport * from './config/exports';\n\nexport {\n\tMySqlDatabaseModelToCodeConverter\n};\n","import {EntityPropertyType} from '@/erdiagram/parser/entity-relationship-model-types';\n\nexport default class MySqlTypeResolver {\n\n\tprivate readonly typeBindings: Partial<Record<EntityPropertyType, string>>;\n\n\tconstructor(typeBindings: Partial<Record<EntityPropertyType, string>>) {\n\t\tthis.typeBindings = typeBindings;\n\t}\n\n\tpublic resolveMySqlType(type: EntityPropertyType): string {\n\n\t\tif (!this.typeBindings.hasOwnProperty(type)) {\n\t\t\tthrow new Error('Unsupported type: ' + type);\n\t\t}\n\n\t\treturn this.typeBindings[type]!;\n\n\t}\n\n}\n","import {\n\tDatabaseModel,\n\tTableColumnDescriptor,\n\tTableDescriptor,\n\tTableReferenceDescriptor\n} from '@/erdiagram/generator/database/model/database-model-types';\nimport OracleDatabaseModelToCodeConverterConfig\n\tfrom '@/erdiagram/generator/database/code-converter/oracle/config/OracleDatabaseModelToCodeConverterConfig';\nimport DatabaseModelToCodeConverter from '@/erdiagram/generator/database/code-converter/DatabaseModelToCodeConverter';\nimport TableCreationStatements\n\tfrom '@/erdiagram/generator/database/code-converter/oracle/column/types/TableCreationStatements';\nimport OracleColumnCodeGenerator\n\tfrom '@/erdiagram/generator/database/code-converter/oracle/column/OracleColumnCodeGenerator';\nimport OracleTypeResolver from '@/erdiagram/generator/database/code-converter/oracle/type/OracleTypeResolver';\nimport OracleIdColumnCodeGenerator\n\tfrom '@/erdiagram/generator/database/code-converter/oracle/column/OracleIdColumnCodeGenerator';\nimport OracleForeignColumnCodeGenerator\n\tfrom '@/erdiagram/generator/database/code-converter/oracle/column/OracleForeignColumnCodeGenerator';\nimport {indentLines} from '@/erdiagram/util/indent-utils';\nimport StandardCaseFormats from '@/erdiagram/generator/common/case-format/StandardCaseFormats';\nimport CaseConverter from '@/erdiagram/generator/common/case-format/CaseConverter';\nimport oracleDatabaseModelToCodeConverterConfigManager\n\tfrom '@/erdiagram/generator/database/code-converter/oracle/config/OracleDatabaseModelToCodeConverterConfigManager';\n\nexport default class OracleDatabaseModelToCodeConverter implements DatabaseModelToCodeConverter {\n\n\tprivate readonly config: OracleDatabaseModelToCodeConverterConfig;\n\n\tprivate readonly tableNameCaseConverter: CaseConverter;\n\n\tprivate readonly columnCodeGenerator: OracleColumnCodeGenerator;\n\tprivate readonly idColumnCodeGenerator: OracleIdColumnCodeGenerator;\n\tprivate readonly foreignColumnCodeGenerator: OracleForeignColumnCodeGenerator;\n\n\tconstructor(config?: Partial<OracleDatabaseModelToCodeConverterConfig>) {\n\n\t\tthis.config = oracleDatabaseModelToCodeConverterConfigManager.mergeWithDefaultConfig(config);\n\n\t\tthis.tableNameCaseConverter = new CaseConverter(\n\t\t\t\tStandardCaseFormats.LOWER_CAMEL,\n\t\t\t\tthis.config.tableNameCaseFormat\n\t\t);\n\n\t\tconst columnNameCaseConverter = new CaseConverter(\n\t\t\t\tStandardCaseFormats.LOWER_CAMEL,\n\t\t\t\tthis.config.columnNameCaseFormat\n\t\t);\n\n\t\tthis.columnCodeGenerator = new OracleColumnCodeGenerator(\n\t\t\t\tnew OracleTypeResolver(this.config.typeBindings),\n\t\t\t\tcolumnNameCaseConverter\n\t\t);\n\n\t\tthis.idColumnCodeGenerator = new OracleIdColumnCodeGenerator(\n\t\t\t\tthis.columnCodeGenerator,\n\t\t\t\tcolumnNameCaseConverter\n\t\t);\n\n\t\tthis.foreignColumnCodeGenerator = new OracleForeignColumnCodeGenerator(\n\t\t\t\tthis.columnCodeGenerator,\n\t\t\t\tthis.tableNameCaseConverter,\n\t\t\t\tcolumnNameCaseConverter\n\t\t);\n\n\t}\n\n\tpublic generateCode(databaseModel: DatabaseModel): string {\n\n\t\tconst allCreateTableStatements: string[] = [];\n\t\tconst allAlterTableStatements: string[] = [];\n\n\t\tdatabaseModel.tables\n\t\t\t\t.map(table => this.generateTableCode(table))\n\t\t\t\t.forEach(({createTableStatement, alterTableStatements}) => {\n\n\t\t\t\t\tallCreateTableStatements.push(createTableStatement);\n\n\t\t\t\t\tif (alterTableStatements) {\n\t\t\t\t\t\tallAlterTableStatements.push(alterTableStatements);\n\t\t\t\t\t}\n\n\t\t\t\t});\n\n\t\treturn allCreateTableStatements.join('\\n\\n')\n\t\t\t\t+ '\\n\\n'\n\t\t\t\t+ allAlterTableStatements.join('\\n\\n');\n\n\t}\n\n\t// FIXME split this method\n\tprivate generateTableCode(table: TableDescriptor): TableCreationStatements {\n\n\t\tconst columnLines: string[] = [];\n\t\tconst createSequenceLines: string[] = [];\n\t\tconst fkConstraintLines: string[] = [];\n\t\tconst otherConstraintLines: string[] = [];\n\n\t\tconst outputTableName = this.tableNameCaseConverter.convertCase(table.name);\n\n\t\tconst {\n\t\t\tcreateSequenceLine: idCreateSequenceLine,\n\t\t\tcolumnLine: idColumnLine,\n\t\t\tpkConstraintLine\n\t\t} = this.idColumnCodeGenerator.generateIdColumnCode(outputTableName, table.identifierColumnName);\n\n\t\tcreateSequenceLines.push(idCreateSequenceLine);\n\t\tcolumnLines.push(idColumnLine);\n\t\totherConstraintLines.push(pkConstraintLine);\n\n\t\tthis.processColumns(outputTableName, table.columns, columnLines, createSequenceLines, otherConstraintLines);\n\t\tthis.processReferences(outputTableName, table.references, columnLines, fkConstraintLines, otherConstraintLines);\n\n\t\tconst createTableInnerLines = [\n\t\t\t...columnLines,\n\t\t\t...otherConstraintLines\n\t\t];\n\n\t\tconst createTableLines = [\n\t\t\t...createSequenceLines,\n\t\t\t`CREATE TABLE \"${outputTableName}\" (`,\n\t\t\tindentLines(createTableInnerLines).join(',\\n'),\n\t\t\t');'\n\t\t];\n\n\t\tconst createTableStatement = createTableLines.join('\\n');\n\t\tconst alterTableStatements = fkConstraintLines.map(fkConstraintLine => {\n\t\t\treturn `ALTER TABLE \"${outputTableName}\" ADD ${fkConstraintLine};`;\n\t\t}).join('\\n');\n\n\t\treturn {\n\t\t\tcreateTableStatement,\n\t\t\talterTableStatements\n\t\t};\n\n\t}\n\n\tprivate processReferences(outputTableName: string, references: TableReferenceDescriptor[], columnLines: string[], fkConstraintLines: string[], otherConstraintLines: string[]) {\n\n\t\tfor (const reference of references) {\n\n\t\t\tconst {\n\t\t\t\tcolumnLine,\n\t\t\t\tuniqueConstraintLine,\n\t\t\t\tfkConstraintLine\n\t\t\t} = this.foreignColumnCodeGenerator.generateForeignColumnCode(outputTableName, reference);\n\n\t\t\tcolumnLines.push(columnLine);\n\t\t\tfkConstraintLines.push(fkConstraintLine);\n\n\t\t\tif (uniqueConstraintLine) {\n\t\t\t\totherConstraintLines.push(uniqueConstraintLine);\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tprivate processColumns(\n\t\t\toutputTableName: string,\n\t\t\tcolumns: TableColumnDescriptor[],\n\t\t\tcolumnLines: string[],\n\t\t\tcreateSequenceLines: string[],\n\t\t\totherConstraintLines: string[]\n\t) {\n\n\t\tfor (const column of columns) {\n\n\t\t\tconst {\n\t\t\t\tcolumnLine,\n\t\t\t\tcreateSequenceLine,\n\t\t\t\tuniqueConstraintLine\n\t\t\t} = this.columnCodeGenerator.generateColumnCode(outputTableName, column);\n\n\t\t\tcolumnLines.push(columnLine);\n\n\t\t\tif (createSequenceLine) {\n\t\t\t\tcreateSequenceLines.push(createSequenceLine);\n\t\t\t}\n\n\t\t\tif (uniqueConstraintLine) {\n\t\t\t\totherConstraintLines.push(uniqueConstraintLine);\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n","import {EntityPropertyType} from '@/erdiagram/parser/entity-relationship-model-types';\nimport {TableColumnDescriptor} from '@/erdiagram/generator/database/model/database-model-types';\nimport RegularColumnCode from '@/erdiagram/generator/database/code-converter/oracle/column/types/RegularColumnCode';\nimport OracleTypeResolver from '@/erdiagram/generator/database/code-converter/oracle/type/OracleTypeResolver';\nimport CaseConverter from '@/erdiagram/generator/common/case-format/CaseConverter';\n\nexport default class OracleColumnCodeGenerator {\n\n\tconstructor(\n\t\t\tprivate readonly typeResolver: OracleTypeResolver,\n\t\t\tprivate readonly columnNameCaseConverter: CaseConverter\n\t) {\n\n\t}\n\n\tpublic generateColumnCode(outputTableName: string, column: TableColumnDescriptor): RegularColumnCode {\n\n\t\tconst outputColumnName = this.columnNameCaseConverter.convertCase(column.name);\n\t\tconst autoincrementalSequenceName = this.getAutoincrementalSequenceName(outputTableName, outputColumnName);\n\n\t\treturn {\n\t\t\tcreateSequenceLine: column.autoincremental ? this.generateCreateSequenceLine(autoincrementalSequenceName) : undefined,\n\t\t\tcolumnLine: this.generateColumnDeclarationLine(outputColumnName, column, autoincrementalSequenceName),\n\t\t\tuniqueConstraintLine: column.unique ? this.generateUniqueConstraintLine(outputTableName, outputColumnName) : undefined\n\t\t};\n\n\t}\n\n\tprivate getAutoincrementalSequenceName(outputTableName: string, outputColumnName: string): string {\n\t\treturn `${outputTableName}_${outputColumnName}_SEQ`;\n\t}\n\n\tprivate generateCreateSequenceLine(autoincrementalSequenceName: string): string {\n\t\treturn `CREATE SEQUENCE \"${autoincrementalSequenceName}\" START WITH 1;`;\n\t}\n\n\t// FIXME refactor this methods - it receives too much arguments\n\tprivate generateColumnDeclarationLine(outputColumnName: string, column: TableColumnDescriptor, autoincrementalSequenceName: string): string {\n\n\t\tconst {\n\t\t\tnotNull,\n\t\t\tautoincremental,\n\t\t\ttype,\n\t\t\tlength\n\t\t} = column;\n\n\t\tconst lineParts: string[] = [\n\t\t\t`\"${outputColumnName}\"`,\n\t\t\tthis.generateOracleTypeDeclaration(type, length)\n\t\t];\n\n\t\tif (notNull) {\n\t\t\tlineParts.push('NOT NULL');\n\t\t}\n\n\t\tif (autoincremental) {\n\t\t\tlineParts.push(`DEFAULT \"${autoincrementalSequenceName}\".nextval`);\n\t\t}\n\n\t\treturn lineParts.join(' ');\n\n\t}\n\n\tprivate generateOracleTypeDeclaration(type: EntityPropertyType, length: number[]) {\n\n\t\tconst oracleType = this.typeResolver.resolveOracleType(type);\n\t\tconst lengthCode = this.generateLengthCode(length);\n\n\t\treturn oracleType + lengthCode;\n\n\t}\n\n\tprivate generateLengthCode(length: number[]): string {\n\n\t\tif (length.length === 0) {\n\t\t\treturn '';\n\t\t}\n\n\t\treturn `(${length.join(', ')})`;\n\n\t}\n\n\tprivate generateUniqueConstraintLine(outputTableName: string, outputColumnName: string) {\n\t\treturn `CONSTRAINT \"${outputTableName}_${outputColumnName}_UNIQUE\" UNIQUE (\"${outputColumnName}\")`;\n\t}\n\n}\n","import {EntityPropertyType} from '@/erdiagram/parser/entity-relationship-model-types';\nimport {\n\tTableColumnDescriptor,\n\tTableReferenceDescriptor\n} from '@/erdiagram/generator/database/model/database-model-types';\nimport ForeignKeyColumnCode\n\tfrom '@/erdiagram/generator/database/code-converter/oracle/column/types/ForeignKeyColumnCode';\nimport OracleColumnCodeGenerator\n\tfrom '@/erdiagram/generator/database/code-converter/oracle/column/OracleColumnCodeGenerator';\nimport CaseConverter from '@/erdiagram/generator/common/case-format/CaseConverter';\n\nexport default class OracleForeignColumnCodeGenerator {\n\n\tconstructor(\n\t\t\tprivate readonly columnCodeGenerator: OracleColumnCodeGenerator,\n\t\t\tprivate readonly tableNameCaseConverter: CaseConverter,\n\t\t\tprivate readonly columnNameCaseConverter: CaseConverter\n\t) {\n\n\t}\n\n\tpublic generateForeignColumnCode(outputTableName: string, reference: TableReferenceDescriptor): ForeignKeyColumnCode {\n\n\t\tconst columnDescriptor = this.createForeignKeyColumnDescriptor(reference);\n\n\t\tconst {\n\t\t\tcolumnLine,\n\t\t\tuniqueConstraintLine\n\t\t} = this.columnCodeGenerator.generateColumnCode(outputTableName, columnDescriptor);\n\n\t\treturn {\n\t\t\tcolumnLine,\n\t\t\tuniqueConstraintLine,\n\t\t\tfkConstraintLine: this.createForeignKeyConstraint(outputTableName, reference)\n\t\t};\n\n\t}\n\n\tprivate createForeignKeyColumnDescriptor(reference: TableReferenceDescriptor): TableColumnDescriptor {\n\n\t\tconst {\n\t\t\tcolumnName,\n\t\t\tnotNull,\n\t\t\tunique\n\t\t} = reference;\n\n\t\treturn {\n\t\t\tname: columnName,\n\t\t\ttype: EntityPropertyType.IDENTIFIER,\n\t\t\tlength: [],\n\t\t\tnotNull,\n\t\t\tunique,\n\t\t\tautoincremental: false\n\t\t};\n\n\t}\n\n\tprivate createForeignKeyConstraint(outputTableName: string, reference: TableReferenceDescriptor) {\n\n\t\tconst outputColumnName = this.columnNameCaseConverter.convertCase(reference.columnName);\n\n\t\tconst outputTargetTableName = this.tableNameCaseConverter.convertCase(reference.targetTableName);\n\t\tconst outputTargetColumnName = this.columnNameCaseConverter.convertCase(reference.targetTableIdentifierColumnName);\n\n\t\treturn `CONSTRAINT \"${outputTableName}_${outputColumnName}_FK\" FOREIGN KEY (\"${outputColumnName}\")`\n\t\t\t\t+ ` REFERENCES \"${outputTargetTableName}\" (\"${outputTargetColumnName}\")`;\n\n\t}\n\n}\n","import {EntityPropertyType} from '@/erdiagram/parser/entity-relationship-model-types';\nimport {TableColumnDescriptor} from '@/erdiagram/generator/database/model/database-model-types';\nimport IdColumnCode from '@/erdiagram/generator/database/code-converter/oracle/column/types/IdColumnCode';\nimport OracleColumnCodeGenerator\n\tfrom '@/erdiagram/generator/database/code-converter/oracle/column/OracleColumnCodeGenerator';\nimport CaseConverter from '@/erdiagram/generator/common/case-format/CaseConverter';\n\nexport default class OracleIdColumnCodeGenerator {\n\n\tconstructor(\n\t\t\tprivate readonly columnCodeGenerator: OracleColumnCodeGenerator,\n\t\t\tprivate readonly columnNameCaseConverter: CaseConverter\n\t) {\n\n\t}\n\n\tpublic generateIdColumnCode(outputTableName: string, identifierColumnName: string): IdColumnCode {\n\n\t\tconst column = this.createIdColumnDescriptor(identifierColumnName);\n\n\t\tconst {\n\t\t\tcreateSequenceLine,\n\t\t\tcolumnLine\n\t\t} = this.columnCodeGenerator.generateColumnCode(outputTableName, column);\n\n\t\tif (createSequenceLine == null) {\n\t\t\tthrow new Error('Unexpected error: missing sequence for primary key column');\n\t\t}\n\n\t\tconst pkConstraintLine = this.createPrimaryKeyConstraint(outputTableName, column);\n\n\t\treturn {\n\t\t\tcreateSequenceLine,\n\t\t\tcolumnLine,\n\t\t\tpkConstraintLine\n\t\t};\n\n\t}\n\n\tprivate createIdColumnDescriptor(identifierColumnName: string): TableColumnDescriptor {\n\t\treturn {\n\t\t\tname: identifierColumnName,\n\t\t\ttype: EntityPropertyType.IDENTIFIER,\n\t\t\tlength: [],\n\t\t\tnotNull: true,\n\t\t\t// FIXME when different IDENTITY strategies are supported, we must\n\t\t\t//  change this to false and manage the IDENTITY generation manually.\n\t\t\tautoincremental: true,\n\t\t\t// As primary keys are unique by default, we don't\n\t\t\t// need to manually define an UNIQUE KEY constraint\n\t\t\tunique: false\n\t\t};\n\t}\n\n\tprivate createPrimaryKeyConstraint(outputTableName: string, column: TableColumnDescriptor) {\n\t\tconst columnName = this.columnNameCaseConverter.convertCase(column.name);\n\t\treturn `CONSTRAINT \"${outputTableName}_PK\" PRIMARY KEY (\"${columnName}\")`;\n\t}\n\n}\n","import {EntityPropertyType} from '@/erdiagram/parser/entity-relationship-model-types';\nimport StandardCaseFormats from '@/erdiagram/generator/common/case-format/StandardCaseFormats';\nimport AbstractComponentConfigManager from '@/erdiagram/common/config/AbstractComponentConfigManager';\nimport OracleDatabaseModelToCodeConverterConfig\n\tfrom '@/erdiagram/generator/database/code-converter/oracle/config/OracleDatabaseModelToCodeConverterConfig';\nimport OracleDatabaseModelToCodeConverterSerializableConfig\n\tfrom '@/erdiagram/generator/database/code-converter/oracle/config/OracleDatabaseModelToCodeConverterSerializableConfig';\nimport {findKeyFromValue, findValueFromNullableKey} from '@/erdiagram/util/record-utils';\n\nexport class OracleDatabaseModelToCodeConverterConfigManager\n\t\textends AbstractComponentConfigManager<OracleDatabaseModelToCodeConverterConfig, Partial<OracleDatabaseModelToCodeConverterConfig>, OracleDatabaseModelToCodeConverterSerializableConfig> {\n\n\tgetDefaultConfig(): OracleDatabaseModelToCodeConverterConfig {\n\t\treturn {\n\t\t\ttypeBindings: {\n\t\t\t\t[EntityPropertyType.IDENTIFIER]: 'NUMBER',\n\t\t\t\t[EntityPropertyType.TEXT]: 'VARCHAR2',\n\t\t\t\t[EntityPropertyType.LONG]: 'NUMBER',\n\t\t\t\t[EntityPropertyType.INT]: 'NUMBER',\n\t\t\t\t[EntityPropertyType.SHORT]: 'NUMBER',\n\t\t\t\t[EntityPropertyType.DECIMAL]: 'NUMBER',\n\t\t\t\t[EntityPropertyType.BOOLEAN]: 'NUMBER(1, 0)',\n\t\t\t\t[EntityPropertyType.DATE]: 'DATE',\n\t\t\t\t[EntityPropertyType.TIME]: 'TIMESTAMP',\n\t\t\t\t[EntityPropertyType.DATETIME]: 'TIMESTAMP',\n\t\t\t\t[EntityPropertyType.BLOB]: 'BLOB'\n\t\t\t},\n\t\t\ttableNameCaseFormat: StandardCaseFormats.UPPER_UNDERSCORE,\n\t\t\tcolumnNameCaseFormat: StandardCaseFormats.UPPER_UNDERSCORE,\n\t\t};\n\t}\n\n\tmergeConfigs(fullConfig: OracleDatabaseModelToCodeConverterConfig, partialConfig?: Partial<OracleDatabaseModelToCodeConverterConfig>): OracleDatabaseModelToCodeConverterConfig {\n\t\treturn {\n\t\t\t...fullConfig,\n\t\t\t...partialConfig,\n\t\t\ttypeBindings: {\n\t\t\t\t...fullConfig.typeBindings,\n\t\t\t\t...partialConfig?.typeBindings\n\t\t\t}\n\t\t};\n\t}\n\n\tconvertToSerializableObject(fullConfig: OracleDatabaseModelToCodeConverterConfig): OracleDatabaseModelToCodeConverterSerializableConfig {\n\t\treturn {\n\t\t\t...fullConfig,\n\t\t\ttableNameCaseFormat: findKeyFromValue(StandardCaseFormats, fullConfig.tableNameCaseFormat),\n\t\t\tcolumnNameCaseFormat: findKeyFromValue(StandardCaseFormats, fullConfig.columnNameCaseFormat),\n\t\t};\n\t}\n\n\tconvertFromSerializableObject(serializableConfig: OracleDatabaseModelToCodeConverterSerializableConfig): OracleDatabaseModelToCodeConverterConfig {\n\t\treturn {\n\t\t\t...serializableConfig,\n\t\t\ttableNameCaseFormat: findValueFromNullableKey(StandardCaseFormats, serializableConfig.tableNameCaseFormat, StandardCaseFormats.UPPER_CAMEL),\n\t\t\tcolumnNameCaseFormat: findValueFromNullableKey(StandardCaseFormats, serializableConfig.columnNameCaseFormat, StandardCaseFormats.UPPER_CAMEL),\n\t\t};\n\t}\n\n}\n\nconst oracleDatabaseModelToCodeConverterConfigManager = new OracleDatabaseModelToCodeConverterConfigManager();\nexport default oracleDatabaseModelToCodeConverterConfigManager;\n","import OracleDatabaseModelToCodeConverterConfig from './OracleDatabaseModelToCodeConverterConfig';\nimport OracleDatabaseModelToCodeConverterSerializableConfig\n\tfrom './OracleDatabaseModelToCodeConverterSerializableConfig';\nimport oracleDatabaseModelToCodeConverterConfigManager, {OracleDatabaseModelToCodeConverterConfigManager} from './OracleDatabaseModelToCodeConverterConfigManager';\n\nexport {\n\tOracleDatabaseModelToCodeConverterConfig,\n\tOracleDatabaseModelToCodeConverterSerializableConfig,\n\tOracleDatabaseModelToCodeConverterConfigManager,\n\toracleDatabaseModelToCodeConverterConfigManager\n};\n","import OracleDatabaseModelToCodeConverter from './OracleDatabaseModelToCodeConverter';\n\nexport * from './config/exports';\n\nexport {\n\tOracleDatabaseModelToCodeConverter\n};\n","import {EntityPropertyType} from '@/erdiagram/parser/entity-relationship-model-types';\n\nexport default class OracleTypeResolver {\n\n\tprivate readonly typeBindings: Partial<Record<EntityPropertyType, string>>;\n\n\tconstructor(typeBindings: Partial<Record<EntityPropertyType, string>>) {\n\t\tthis.typeBindings = typeBindings;\n\t}\n\n\tpublic resolveOracleType(type: EntityPropertyType): string {\n\n\t\tif (!this.typeBindings.hasOwnProperty(type)) {\n\t\t\tthrow new Error('Unsupported type: ' + type);\n\t\t}\n\n\t\treturn this.typeBindings[type]!;\n\n\t}\n\n}\n","import {\n\tDatabaseModel,\n\tTableColumnDescriptor,\n\tTableDescriptor,\n\tTableReferenceDescriptor\n} from '@/erdiagram/generator/database/model/database-model-types';\nimport SqlServerDatabaseModelToCodeConverterConfig\n\tfrom '@/erdiagram/generator/database/code-converter/sqlserver/config/SqlServerDatabaseModelToCodeConverterConfig';\nimport DatabaseModelToCodeConverter from '@/erdiagram/generator/database/code-converter/DatabaseModelToCodeConverter';\nimport TableCreationStatements\n\tfrom '@/erdiagram/generator/database/code-converter/sqlserver/column/types/TableCreationStatements';\nimport SqlServerColumnCodeGenerator\n\tfrom '@/erdiagram/generator/database/code-converter/sqlserver/column/SqlServerColumnCodeGenerator';\nimport SqlServerTypeResolver from '@/erdiagram/generator/database/code-converter/sqlserver/type/SqlServerTypeResolver';\nimport SqlServerIdColumnCodeGenerator\n\tfrom '@/erdiagram/generator/database/code-converter/sqlserver/column/SqlServerIdColumnCodeGenerator';\nimport SqlServerForeignColumnCodeGenerator\n\tfrom '@/erdiagram/generator/database/code-converter/sqlserver/column/SqlServerForeignColumnCodeGenerator';\nimport {indentLines} from '@/erdiagram/util/indent-utils';\nimport StandardCaseFormats from '@/erdiagram/generator/common/case-format/StandardCaseFormats';\nimport CaseConverter from '@/erdiagram/generator/common/case-format/CaseConverter';\nimport sqlServerDatabaseModelToCodeConverterConfigManager\n\tfrom '@/erdiagram/generator/database/code-converter/sqlserver/config/SqlServerDatabaseModelToCodeConverterConfigManager';\n\nexport default class SqlServerDatabaseModelToCodeConverter implements DatabaseModelToCodeConverter {\n\n\tprivate readonly config: SqlServerDatabaseModelToCodeConverterConfig;\n\n\tprivate readonly tableNameCaseConverter: CaseConverter;\n\n\tprivate readonly columnCodeGenerator: SqlServerColumnCodeGenerator;\n\tprivate readonly idColumnCodeGenerator: SqlServerIdColumnCodeGenerator;\n\tprivate readonly foreignColumnCodeGenerator: SqlServerForeignColumnCodeGenerator;\n\n\tconstructor(config?: Partial<SqlServerDatabaseModelToCodeConverterConfig>) {\n\n\t\tthis.config = sqlServerDatabaseModelToCodeConverterConfigManager.mergeWithDefaultConfig(config);\n\n\t\tthis.tableNameCaseConverter = new CaseConverter(\n\t\t\t\tStandardCaseFormats.LOWER_CAMEL,\n\t\t\t\tthis.config.tableNameCaseFormat\n\t\t);\n\n\t\tconst columnNameCaseConverter = new CaseConverter(\n\t\t\t\tStandardCaseFormats.LOWER_CAMEL,\n\t\t\t\tthis.config.columnNameCaseFormat\n\t\t);\n\n\t\tthis.columnCodeGenerator = new SqlServerColumnCodeGenerator(\n\t\t\t\tnew SqlServerTypeResolver(this.config.typeBindings),\n\t\t\t\tcolumnNameCaseConverter\n\t\t);\n\n\t\tthis.idColumnCodeGenerator = new SqlServerIdColumnCodeGenerator(\n\t\t\t\tthis.columnCodeGenerator,\n\t\t\t\tcolumnNameCaseConverter\n\t\t);\n\n\t\tthis.foreignColumnCodeGenerator = new SqlServerForeignColumnCodeGenerator(\n\t\t\t\tthis.columnCodeGenerator,\n\t\t\t\tthis.tableNameCaseConverter,\n\t\t\t\tcolumnNameCaseConverter\n\t\t);\n\n\t}\n\n\tpublic generateCode(databaseModel: DatabaseModel): string {\n\n\t\tconst allCreateTableStatements: string[] = [];\n\t\tconst allAlterTableStatements: string[] = [];\n\n\t\tdatabaseModel.tables\n\t\t\t\t.map(table => this.generateTableCode(table))\n\t\t\t\t.forEach(({createTableStatement, alterTableStatements}) => {\n\n\t\t\t\t\tallCreateTableStatements.push(createTableStatement);\n\n\t\t\t\t\tif (alterTableStatements) {\n\t\t\t\t\t\tallAlterTableStatements.push(alterTableStatements);\n\t\t\t\t\t}\n\n\t\t\t\t});\n\n\t\treturn allCreateTableStatements.join('\\n\\n')\n\t\t\t\t+ '\\n\\n'\n\t\t\t\t+ allAlterTableStatements.join('\\n\\n');\n\n\t}\n\n\t// FIXME split this method\n\tprivate generateTableCode(table: TableDescriptor): TableCreationStatements {\n\n\t\tconst columnLines: string[] = [];\n\t\tconst createSequenceLines: string[] = [];\n\t\tconst fkConstraintLines: string[] = [];\n\t\tconst otherConstraintLines: string[] = [];\n\n\t\tconst outputTableName = this.tableNameCaseConverter.convertCase(table.name);\n\n\t\tconst {\n\t\t\tcolumnLine: idColumnLine,\n\t\t\tpkConstraintLine\n\t\t} = this.idColumnCodeGenerator.generateIdColumnCode(outputTableName, table.identifierColumnName);\n\n\t\tcolumnLines.push(idColumnLine);\n\t\totherConstraintLines.push(pkConstraintLine);\n\n\t\tthis.processColumns(outputTableName, table.columns, columnLines, createSequenceLines, otherConstraintLines);\n\t\tthis.processReferences(outputTableName, table.references, columnLines, fkConstraintLines, otherConstraintLines);\n\n\t\tconst createTableInnerLines = [\n\t\t\t...columnLines,\n\t\t\t...otherConstraintLines\n\t\t];\n\n\t\tconst createTableLines = [\n\t\t\t...createSequenceLines,\n\t\t\t`CREATE TABLE \"${outputTableName}\" (`,\n\t\t\tindentLines(createTableInnerLines).join(',\\n'),\n\t\t\t');'\n\t\t];\n\n\t\tconst createTableStatement = createTableLines.join('\\n');\n\t\tconst alterTableStatements = fkConstraintLines.map(fkConstraintLine => {\n\t\t\treturn `ALTER TABLE \"${outputTableName}\" ADD ${fkConstraintLine};`;\n\t\t}).join('\\n');\n\n\t\treturn {\n\t\t\tcreateTableStatement,\n\t\t\talterTableStatements\n\t\t};\n\n\t}\n\n\tprivate processReferences(outputTableName: string, references: TableReferenceDescriptor[], columnLines: string[], fkConstraintLines: string[], otherConstraintLines: string[]) {\n\n\t\tfor (const reference of references) {\n\n\t\t\tconst {\n\t\t\t\tcolumnLine,\n\t\t\t\tuniqueConstraintLine,\n\t\t\t\tfkConstraintLine\n\t\t\t} = this.foreignColumnCodeGenerator.generateForeignColumnCode(outputTableName, reference);\n\n\t\t\tcolumnLines.push(columnLine);\n\t\t\tfkConstraintLines.push(fkConstraintLine);\n\n\t\t\tif (uniqueConstraintLine) {\n\t\t\t\totherConstraintLines.push(uniqueConstraintLine);\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tprivate processColumns(\n\t\t\toutputTableName: string,\n\t\t\tcolumns: TableColumnDescriptor[],\n\t\t\tcolumnLines: string[],\n\t\t\tcreateSequenceLines: string[],\n\t\t\totherConstraintLines: string[]\n\t) {\n\n\t\tfor (const column of columns) {\n\n\t\t\tconst {\n\t\t\t\tcolumnLine,\n\t\t\t\tcreateSequenceLine,\n\t\t\t\tuniqueConstraintLine\n\t\t\t} = this.columnCodeGenerator.generateColumnCode(outputTableName, column);\n\n\t\t\tcolumnLines.push(columnLine);\n\n\t\t\tif (createSequenceLine) {\n\t\t\t\tcreateSequenceLines.push(createSequenceLine);\n\t\t\t}\n\n\t\t\tif (uniqueConstraintLine) {\n\t\t\t\totherConstraintLines.push(uniqueConstraintLine);\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n","import {EntityPropertyType} from '@/erdiagram/parser/entity-relationship-model-types';\nimport {TableColumnDescriptor} from '@/erdiagram/generator/database/model/database-model-types';\nimport RegularColumnCode from '@/erdiagram/generator/database/code-converter/sqlserver/column/types/RegularColumnCode';\nimport SqlServerTypeResolver from '@/erdiagram/generator/database/code-converter/sqlserver/type/SqlServerTypeResolver';\nimport CaseConverter from '@/erdiagram/generator/common/case-format/CaseConverter';\n\nexport default class SqlServerColumnCodeGenerator {\n\n\tconstructor(\n\t\t\tprivate readonly typeResolver: SqlServerTypeResolver,\n\t\t\tprivate readonly columnNameCaseConverter: CaseConverter\n\t) {\n\n\t}\n\n\t// FIXME refactor the way \"identity\" flag is used\n\tpublic generateColumnCode(outputTableName: string, column: TableColumnDescriptor, identity: boolean = false): RegularColumnCode {\n\n\t\tconst outputColumnName = this.columnNameCaseConverter.convertCase(column.name);\n\t\tconst autoincrementalSequenceName = this.getAutoincrementalSequenceName(outputTableName, outputColumnName);\n\n\t\treturn {\n\t\t\tcreateSequenceLine: column.autoincremental ? this.generateCreateSequenceLine(autoincrementalSequenceName) : undefined,\n\t\t\tcolumnLine: this.generateColumnDeclarationLine(outputColumnName, column, identity, autoincrementalSequenceName),\n\t\t\tuniqueConstraintLine: column.unique ? this.generateUniqueConstraintLine(outputTableName, outputColumnName) : undefined\n\t\t};\n\n\t}\n\n\tprivate getAutoincrementalSequenceName(outputTableName: string, outputColumnName: string): string {\n\t\treturn `${outputTableName}_${outputColumnName}_seq`;\n\t}\n\n\tprivate generateCreateSequenceLine(autoincrementalSequenceName: string): string {\n\t\treturn `CREATE SEQUENCE \"${autoincrementalSequenceName}\" START WITH 1;`;\n\t}\n\n\t// FIXME refactor this methods - it receives too much arguments\n\tprivate generateColumnDeclarationLine(outputColumnName: string, column: TableColumnDescriptor, identity: boolean, autoincrementalSequenceName: string): string {\n\n\t\tconst {\n\t\t\tnotNull,\n\t\t\tautoincremental,\n\t\t\ttype,\n\t\t\tlength\n\t\t} = column;\n\n\t\tconst lineParts: string[] = [\n\t\t\t`\"${outputColumnName}\"`,\n\t\t\tthis.generateSqlServerTypeDeclaration(type, length)\n\t\t];\n\n\t\tif (notNull) {\n\t\t\tlineParts.push('NOT NULL');\n\t\t}\n\n\t\tif (identity) {\n\t\t\tlineParts.push('IDENTITY(1, 1)');\n\t\t}\n\n\t\tif (autoincremental) {\n\t\t\tlineParts.push(`DEFAULT NEXT VALUE FOR \"${autoincrementalSequenceName}\"`);\n\t\t}\n\n\t\treturn lineParts.join(' ');\n\n\t}\n\n\tprivate generateSqlServerTypeDeclaration(type: EntityPropertyType, length: number[]) {\n\n\t\tconst sqlServerType = this.typeResolver.resolveSqlServerType(type);\n\t\tconst lengthCode = this.generateLengthCode(length);\n\n\t\treturn sqlServerType + lengthCode;\n\n\t}\n\n\tprivate generateLengthCode(length: number[]): string {\n\n\t\tif (length.length === 0) {\n\t\t\treturn '';\n\t\t}\n\n\t\treturn `(${length.join(', ')})`;\n\n\t}\n\n\tprivate generateUniqueConstraintLine(outputTableName: string, outputColumnName: string) {\n\t\treturn `CONSTRAINT \"${outputTableName}_${outputColumnName}_unique\" UNIQUE (\"${outputColumnName}\")`;\n\t}\n\n}\n","import {EntityPropertyType} from '@/erdiagram/parser/entity-relationship-model-types';\nimport {\n\tTableColumnDescriptor,\n\tTableReferenceDescriptor\n} from '@/erdiagram/generator/database/model/database-model-types';\nimport ForeignKeyColumnCode\n\tfrom '@/erdiagram/generator/database/code-converter/sqlserver/column/types/ForeignKeyColumnCode';\nimport SqlServerColumnCodeGenerator\n\tfrom '@/erdiagram/generator/database/code-converter/sqlserver/column/SqlServerColumnCodeGenerator';\nimport CaseConverter from '@/erdiagram/generator/common/case-format/CaseConverter';\n\nexport default class SqlServerForeignColumnCodeGenerator {\n\n\tconstructor(\n\t\t\tprivate readonly columnCodeGenerator: SqlServerColumnCodeGenerator,\n\t\t\tprivate readonly tableNameCaseConverter: CaseConverter,\n\t\t\tprivate readonly columnNameCaseConverter: CaseConverter\n\t) {\n\n\t}\n\n\tpublic generateForeignColumnCode(outputTableName: string, reference: TableReferenceDescriptor): ForeignKeyColumnCode {\n\n\t\tconst columnDescriptor = this.createForeignKeyColumnDescriptor(reference);\n\n\t\tconst {\n\t\t\tcolumnLine,\n\t\t\tuniqueConstraintLine\n\t\t} = this.columnCodeGenerator.generateColumnCode(outputTableName, columnDescriptor);\n\n\t\treturn {\n\t\t\tcolumnLine,\n\t\t\tuniqueConstraintLine,\n\t\t\tfkConstraintLine: this.createForeignKeyConstraint(outputTableName, reference)\n\t\t};\n\n\t}\n\n\tprivate createForeignKeyColumnDescriptor(reference: TableReferenceDescriptor): TableColumnDescriptor {\n\n\t\tconst {\n\t\t\tcolumnName,\n\t\t\tnotNull,\n\t\t\tunique\n\t\t} = reference;\n\n\t\treturn {\n\t\t\tname: columnName,\n\t\t\ttype: EntityPropertyType.IDENTIFIER,\n\t\t\tlength: [],\n\t\t\tnotNull,\n\t\t\tunique,\n\t\t\tautoincremental: false\n\t\t};\n\n\t}\n\n\tprivate createForeignKeyConstraint(outputTableName: string, reference: TableReferenceDescriptor) {\n\n\t\tconst outputColumnName = this.columnNameCaseConverter.convertCase(reference.columnName);\n\n\t\tconst outputTargetTableName = this.tableNameCaseConverter.convertCase(reference.targetTableName);\n\t\tconst outputTargetColumnName = this.columnNameCaseConverter.convertCase(reference.targetTableIdentifierColumnName);\n\n\t\treturn `CONSTRAINT \"${outputTableName}_${outputColumnName}_fk\" FOREIGN KEY (\"${outputColumnName}\")`\n\t\t\t\t+ ` REFERENCES \"${outputTargetTableName}\" (\"${outputTargetColumnName}\")`;\n\n\t}\n\n}\n","import {EntityPropertyType} from '@/erdiagram/parser/entity-relationship-model-types';\nimport {TableColumnDescriptor} from '@/erdiagram/generator/database/model/database-model-types';\nimport IdColumnCode from '@/erdiagram/generator/database/code-converter/sqlserver/column/types/IdColumnCode';\nimport SqlServerColumnCodeGenerator\n\tfrom '@/erdiagram/generator/database/code-converter/sqlserver/column/SqlServerColumnCodeGenerator';\nimport CaseConverter from '@/erdiagram/generator/common/case-format/CaseConverter';\n\nexport default class SqlServerIdColumnCodeGenerator {\n\n\tconstructor(\n\t\t\tprivate readonly columnCodeGenerator: SqlServerColumnCodeGenerator,\n\t\t\tprivate readonly columnNameCaseConverter: CaseConverter\n\t) {\n\n\t}\n\n\tpublic generateIdColumnCode(outputTableName: string, identifierColumnName: string): IdColumnCode {\n\n\t\tconst column = this.createIdColumnDescriptor(identifierColumnName);\n\n\t\tconst {\n\t\t\tcolumnLine\n\t\t} = this.columnCodeGenerator.generateColumnCode(outputTableName, column, true);\n\n\t\tconst pkConstraintLine = this.createPrimaryKeyConstraint(outputTableName, column);\n\n\t\treturn {\n\t\t\tcolumnLine,\n\t\t\tpkConstraintLine\n\t\t};\n\n\t}\n\n\tprivate createIdColumnDescriptor(identifierColumnName: string): TableColumnDescriptor {\n\t\treturn {\n\t\t\tname: identifierColumnName,\n\t\t\ttype: EntityPropertyType.IDENTIFIER,\n\t\t\tlength: [],\n\t\t\tnotNull: true,\n\t\t\t// Autoincrement of identity columns have to be achieved using IDENTITY,\n\t\t\t// while other autoincremental columns have to use a custom sequence.\n\t\t\tautoincremental: false,\n\t\t\t// As primary keys are unique by default, we don't\n\t\t\t// need to manually define an UNIQUE KEY constraint\n\t\t\tunique: false\n\t\t};\n\t}\n\n\tprivate createPrimaryKeyConstraint(outputTableName: string, column: TableColumnDescriptor) {\n\t\tconst columnName = this.columnNameCaseConverter.convertCase(column.name);\n\t\treturn `CONSTRAINT \"${outputTableName}_pk\" PRIMARY KEY (\"${columnName}\")`;\n\t}\n\n}\n","import {EntityPropertyType} from '@/erdiagram/parser/entity-relationship-model-types';\nimport StandardCaseFormats from '@/erdiagram/generator/common/case-format/StandardCaseFormats';\nimport AbstractComponentConfigManager from '@/erdiagram/common/config/AbstractComponentConfigManager';\nimport SqlServerDatabaseModelToCodeConverterConfig\n\tfrom '@/erdiagram/generator/database/code-converter/sqlserver/config/SqlServerDatabaseModelToCodeConverterConfig';\nimport {findKeyFromValue, findValueFromNullableKey} from '@/erdiagram/util/record-utils';\nimport SqlServerDatabaseModelToCodeConverterSerializableConfig\n\tfrom '@/erdiagram/generator/database/code-converter/sqlserver/config/SqlServerDatabaseModelToCodeConverterSerializableConfig';\n\nexport class SqlServerDatabaseModelToCodeConverterConfigManager\n\t\textends AbstractComponentConfigManager<SqlServerDatabaseModelToCodeConverterConfig, Partial<SqlServerDatabaseModelToCodeConverterConfig>, SqlServerDatabaseModelToCodeConverterSerializableConfig> {\n\n\tgetDefaultConfig(): SqlServerDatabaseModelToCodeConverterConfig {\n\t\treturn {\n\t\t\ttypeBindings: {\n\t\t\t\t[EntityPropertyType.IDENTIFIER]: 'BIGINT',\n\t\t\t\t[EntityPropertyType.TEXT]: 'NVARCHAR',\n\t\t\t\t[EntityPropertyType.LONG]: 'BIGINT',\n\t\t\t\t[EntityPropertyType.INT]: 'INT',\n\t\t\t\t[EntityPropertyType.SHORT]: 'SMALLINT',\n\t\t\t\t[EntityPropertyType.DECIMAL]: 'DECIMAL',\n\t\t\t\t[EntityPropertyType.BOOLEAN]: 'BIT',\n\t\t\t\t[EntityPropertyType.DATE]: 'DATE',\n\t\t\t\t[EntityPropertyType.TIME]: 'TIME',\n\t\t\t\t[EntityPropertyType.DATETIME]: 'DATETIME2',\n\t\t\t\t[EntityPropertyType.BLOB]: 'VARBINARY(MAX)'\n\t\t\t},\n\t\t\ttableNameCaseFormat: StandardCaseFormats.UPPER_CAMEL,\n\t\t\tcolumnNameCaseFormat: StandardCaseFormats.UPPER_CAMEL,\n\t\t};\n\t}\n\n\tmergeConfigs(fullConfig: SqlServerDatabaseModelToCodeConverterConfig, partialConfig?: Partial<SqlServerDatabaseModelToCodeConverterConfig>): SqlServerDatabaseModelToCodeConverterConfig {\n\t\treturn {\n\t\t\t...fullConfig,\n\t\t\t...partialConfig,\n\t\t\ttypeBindings: {\n\t\t\t\t...fullConfig.typeBindings,\n\t\t\t\t...partialConfig?.typeBindings\n\t\t\t}\n\t\t};\n\t}\n\n\tconvertToSerializableObject(fullConfig: SqlServerDatabaseModelToCodeConverterConfig): SqlServerDatabaseModelToCodeConverterSerializableConfig {\n\t\treturn {\n\t\t\t...fullConfig,\n\t\t\ttableNameCaseFormat: findKeyFromValue(StandardCaseFormats, fullConfig.tableNameCaseFormat),\n\t\t\tcolumnNameCaseFormat: findKeyFromValue(StandardCaseFormats, fullConfig.columnNameCaseFormat),\n\t\t};\n\t}\n\n\tconvertFromSerializableObject(serializableConfig: SqlServerDatabaseModelToCodeConverterSerializableConfig): SqlServerDatabaseModelToCodeConverterConfig {\n\t\treturn {\n\t\t\t...serializableConfig,\n\t\t\ttableNameCaseFormat: findValueFromNullableKey(StandardCaseFormats, serializableConfig.tableNameCaseFormat, StandardCaseFormats.UPPER_CAMEL),\n\t\t\tcolumnNameCaseFormat: findValueFromNullableKey(StandardCaseFormats, serializableConfig.columnNameCaseFormat, StandardCaseFormats.UPPER_CAMEL),\n\t\t};\n\t}\n\n}\n\nconst sqlServerDatabaseModelToCodeConverterConfigManager = new SqlServerDatabaseModelToCodeConverterConfigManager();\nexport default sqlServerDatabaseModelToCodeConverterConfigManager;\n","import SqlServerDatabaseModelToCodeConverterConfig from './SqlServerDatabaseModelToCodeConverterConfig';\nimport SqlServerDatabaseModelToCodeConverterSerializableConfig\n\tfrom './SqlServerDatabaseModelToCodeConverterSerializableConfig';\nimport sqlServerDatabaseModelToCodeConverterConfigManager, {SqlServerDatabaseModelToCodeConverterConfigManager} from './SqlServerDatabaseModelToCodeConverterConfigManager';\n\nexport {\n\tSqlServerDatabaseModelToCodeConverterConfig,\n\tSqlServerDatabaseModelToCodeConverterSerializableConfig,\n\tSqlServerDatabaseModelToCodeConverterConfigManager,\n\tsqlServerDatabaseModelToCodeConverterConfigManager\n};\n","import SqlServerDatabaseModelToCodeConverter\n\tfrom 'src/main/erdiagram/generator/database/code-converter/sqlserver/SqlServerDatabaseModelToCodeConverter';\n\nexport * from './config/exports';\n\nexport {\n\tSqlServerDatabaseModelToCodeConverter\n};\n","import {EntityPropertyType} from '@/erdiagram/parser/entity-relationship-model-types';\n\nexport default class SqlServerTypeResolver {\n\n\tprivate readonly typeBindings: Partial<Record<EntityPropertyType, string>>;\n\n\tconstructor(typeBindings: Partial<Record<EntityPropertyType, string>>) {\n\t\tthis.typeBindings = typeBindings;\n\t}\n\n\tpublic resolveSqlServerType(type: EntityPropertyType): string {\n\n\t\tif (!this.typeBindings.hasOwnProperty(type)) {\n\t\t\tthrow new Error('Unsupported type: ' + type);\n\t\t}\n\n\t\treturn this.typeBindings[type]!;\n\n\t}\n\n}\n","export * from './code-converter/exports';\nexport * from './model/exports';\n","import pluralize from 'pluralize';\nimport {\n\tDatabaseModel,\n\tTableColumnDescriptor,\n\tTableDescriptor,\n\tTableReferenceDescriptor\n} from '@/erdiagram/generator/database/model/database-model-types';\nimport DatabaseModelGeneratorConfig from '@/erdiagram/generator/database/model/config/DatabaseModelGeneratorConfig';\nimport {\n\tCardinality,\n\tEntityDescriptor,\n\tEntityPropertyDescriptor,\n\tEntityRelationshipModel,\n\tRelationshipDescriptor,\n\tRelationshipMember\n} from '@/erdiagram/parser/entity-relationship-model-types';\nimport databaseModelGeneratorConfigManager\n\tfrom '@/erdiagram/generator/database/model/config/DatabaseModelGeneratorConfigManager';\nimport {classifyBy} from '@/erdiagram/util/map-utils';\n\nexport default class DatabaseModelGenerator {\n\n\tprivate readonly config: DatabaseModelGeneratorConfig;\n\n\tconstructor(config?: Partial<DatabaseModelGeneratorConfig>) {\n\t\tthis.config = databaseModelGeneratorConfigManager.mergeWithDefaultConfig(config);\n\t}\n\n\tgenerateDatabaseModel(model: EntityRelationshipModel): DatabaseModel {\n\n\t\tconst entityIdentifiersMap = classifyBy(\n\t\t\t\tmodel.entities.filter(entity => entity.identifierPropertyName),\n\t\t\t\tentity => entity.name,\n\t\t\t\tentity => entity.identifierPropertyName!\n\t\t);\n\n\t\tconst tables: TableDescriptor[] = [];\n\n\t\tthis.generateEntityTables(model, entityIdentifiersMap, tables);\n\t\tthis.generateRelationshipTables(model, entityIdentifiersMap, tables);\n\n\t\treturn {\n\t\t\ttables\n\t\t};\n\n\t}\n\n\tprivate generateEntityTables(model: EntityRelationshipModel, entityIdentifiersMap: Map<string, string>, tables: TableDescriptor[]) {\n\t\tmodel.entities\n\t\t\t\t.map(entity => this.generateEntityTable(entity, model, entityIdentifiersMap))\n\t\t\t\t.forEach(sentence => tables.push(sentence));\n\t}\n\n\tprivate generateEntityTable(entity: EntityDescriptor, model: EntityRelationshipModel, entityIdentifiersMap: Map<string, string>): TableDescriptor {\n\n\t\tconst columns: TableColumnDescriptor[] = [];\n\n\t\tconst references: TableReferenceDescriptor[] = [];\n\n\t\tfor (const property of entity.properties) {\n\t\t\tcolumns.push(this.mapPropertyToColumn(property));\n\t\t}\n\n\t\tfor (const relationship of model.relationships) {\n\t\t\tif (relationship.rightMember.cardinality !== Cardinality.MANY) {\n\t\t\t\tif (relationship.leftMember.entity === entity.name) {\n\t\t\t\t\tconst isOneToOneRelationship = relationship.leftMember.cardinality !== Cardinality.MANY;\n\t\t\t\t\treferences.push(this.createTableReference(relationship.rightMember, entityIdentifiersMap, isOneToOneRelationship));\n\t\t\t\t}\n\t\t\t} else if (relationship.leftMember.cardinality !== Cardinality.MANY) {\n\t\t\t\tif (relationship.rightMember.entity === entity.name) {\n\t\t\t\t\treferences.push(this.createTableReference(relationship.leftMember, entityIdentifiersMap));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tname: this.pluralizeEntityNameIfApplies(entity.name),\n\t\t\tidentifierColumnName: this.getIdentifierColumnName(entity.name, entityIdentifiersMap),\n\t\t\tcolumns,\n\t\t\treferences\n\t\t};\n\n\t}\n\n\tprivate generateRelationshipTables(model: EntityRelationshipModel, entityIdentifiersMap: Map<string, string>, tables: TableDescriptor[]) {\n\t\tmodel.relationships\n\t\t\t\t.filter(relationship => this.isManyToManyRelationship(relationship))\n\t\t\t\t.map(relationship => this.generateRelationshipTable(relationship, entityIdentifiersMap))\n\t\t\t\t.forEach(sentence => tables.push(sentence));\n\t}\n\n\tprivate generateRelationshipTable(relationship: RelationshipDescriptor, entityIdentifiersMap: Map<string, string>): TableDescriptor {\n\n\t\tconst name = this.getRelationshipTableName(relationship);\n\t\tconst identifierColumnName = this.getRelationshipTableIdentifierColumnName(relationship, entityIdentifiersMap);\n\n\t\treturn {\n\t\t\tname,\n\t\t\tidentifierColumnName,\n\t\t\tcolumns: [],\n\t\t\treferences: [\n\t\t\t\tthis.createTableReference(relationship.leftMember, entityIdentifiersMap),\n\t\t\t\tthis.createTableReference(relationship.rightMember, entityIdentifiersMap)\n\t\t\t]\n\t\t};\n\n\t}\n\n\tprivate getRelationshipTableName(relationship: RelationshipDescriptor): string {\n\n\t\tconst {\n\t\t\trelationShipName,\n\t\t\tleftMember,\n\t\t\trightMember\n\t\t} = relationship;\n\n\t\tif (relationShipName) {\n\t\t\treturn relationShipName;\n\t\t}\n\n\t\treturn this.pluralizeEntityNameIfApplies(leftMember.entity)\n\t\t\t\t+ this.pluralizeEntityNameIfApplies(rightMember.entity);\n\n\t}\n\n\tprivate getRelationshipTableIdentifierColumnName(relationship: RelationshipDescriptor, entityIdentifiersMap: Map<string, string>): string {\n\n\t\tconst {\n\t\t\trelationShipName,\n\t\t\tleftMember,\n\t\t\trightMember\n\t\t} = relationship;\n\n\t\tif (relationShipName) {\n\t\t\treturn this.getIdentifierColumnName(relationShipName, entityIdentifiersMap);\n\t\t}\n\n\t\treturn this.getIdentifierColumnName(leftMember.entity + rightMember.entity, entityIdentifiersMap);\n\n\t}\n\n\tprivate createTableReference(toMember: RelationshipMember, entityIdentifiersMap: Map<string, string>, unique: boolean = false): TableReferenceDescriptor {\n\n\t\tconst {\n\t\t\tentityAlias,\n\t\t\tentity,\n\t\t\tcardinality\n\t\t} = toMember;\n\n\t\treturn {\n\t\t\tcolumnName: `${entityAlias}Id`,\n\t\t\ttargetTableName: this.pluralizeEntityNameIfApplies(entity),\n\t\t\ttargetTableIdentifierColumnName: this.getIdentifierColumnName(entity, entityIdentifiersMap),\n\t\t\tnotNull: cardinality !== Cardinality.ZERO_OR_ONE,\n\t\t\tunique\n\t\t};\n\n\t}\n\n\tprivate pluralizeEntityNameIfApplies(entityName: string): string {\n\t\tif (this.config.usePluralTableNames) {\n\t\t\treturn pluralize(entityName);\n\t\t} else {\n\t\t\treturn entityName;\n\t\t}\n\t}\n\n\tprivate getIdentifierColumnName(entityName: string, entityIdentifiersMap: Map<string, string>): string {\n\n\t\tif (entityIdentifiersMap.has(entityName)) {\n\t\t\treturn entityIdentifiersMap.get(entityName)!;\n\t\t}\n\n\t\tconst {idNamingStrategy} = this.config;\n\t\treturn idNamingStrategy(entityName);\n\n\t}\n\n\tprivate mapPropertyToColumn(property: EntityPropertyDescriptor): TableColumnDescriptor {\n\n\t\tconst {\n\t\t\tname,\n\t\t\toptional,\n\t\t\tautoincremental,\n\t\t\tunique,\n\t\t\ttype,\n\t\t\tlength\n\t\t} = property;\n\n\t\treturn {\n\t\t\tname,\n\t\t\tnotNull: !optional,\n\t\t\tautoincremental,\n\t\t\tunique,\n\t\t\ttype,\n\t\t\tlength\n\t\t};\n\n\t}\n\n\tprivate isManyToManyRelationship(relationship: RelationshipDescriptor): boolean {\n\t\treturn [\n\t\t\trelationship.leftMember,\n\t\t\trelationship.rightMember\n\t\t].every(member => member.cardinality === Cardinality.MANY);\n\t}\n\n}\n","import AbstractComponentConfigManager from '@/erdiagram/common/config/AbstractComponentConfigManager';\nimport DatabaseModelGeneratorConfig from '@/erdiagram/generator/database/model/config/DatabaseModelGeneratorConfig';\nimport StandardIdNamingStrategies from '@/erdiagram/generator/common/id-naming-strategy/StandardIdNamingStrategies';\nimport {findKeyFromValue, findValueFromNullableKey} from '@/erdiagram/util/record-utils';\nimport DatabaseModelGeneratorSerializableConfig\n\tfrom '@/erdiagram/generator/database/model/config/DatabaseModelGeneratorSerializableConfig';\n\nexport class DatabaseModelGeneratorConfigManager\n\t\textends AbstractComponentConfigManager<DatabaseModelGeneratorConfig, Partial<DatabaseModelGeneratorConfig>, DatabaseModelGeneratorSerializableConfig> {\n\n\tgetDefaultConfig(): DatabaseModelGeneratorConfig {\n\t\treturn {\n\t\t\tusePluralTableNames: false,\n\t\t\tidNamingStrategy: StandardIdNamingStrategies.DEFAULT\n\t\t};\n\t}\n\n\tmergeConfigs(fullConfig: DatabaseModelGeneratorConfig, partialConfig?: Partial<DatabaseModelGeneratorConfig>): DatabaseModelGeneratorConfig {\n\t\treturn {\n\t\t\t...fullConfig,\n\t\t\t...partialConfig\n\t\t};\n\t}\n\n\tconvertToSerializableObject(fullConfig: DatabaseModelGeneratorConfig): DatabaseModelGeneratorSerializableConfig {\n\t\treturn {\n\t\t\t...fullConfig,\n\t\t\tidNamingStrategy: findKeyFromValue(StandardIdNamingStrategies, fullConfig.idNamingStrategy)\n\t\t};\n\t}\n\n\tconvertFromSerializableObject(serializableConfig: DatabaseModelGeneratorSerializableConfig): DatabaseModelGeneratorConfig {\n\t\treturn {\n\t\t\t...serializableConfig,\n\t\t\tidNamingStrategy: findValueFromNullableKey(StandardIdNamingStrategies, serializableConfig.idNamingStrategy, StandardIdNamingStrategies.DEFAULT)\n\t\t};\n\t}\n\n}\n\nconst databaseModelGeneratorConfigManager = new DatabaseModelGeneratorConfigManager();\nexport default databaseModelGeneratorConfigManager;\n","import DatabaseModelGeneratorConfig from './DatabaseModelGeneratorConfig';\nimport DatabaseModelGeneratorSerializableConfig from './DatabaseModelGeneratorSerializableConfig';\nimport databaseModelGeneratorConfigManager, {DatabaseModelGeneratorConfigManager} from './DatabaseModelGeneratorConfigManager';\n\nexport {\n\tDatabaseModelGeneratorConfig,\n\tDatabaseModelGeneratorSerializableConfig,\n\tDatabaseModelGeneratorConfigManager,\n\tdatabaseModelGeneratorConfigManager\n};\n","import DatabaseModelGenerator from './DatabaseModelGenerator';\n\nexport * from './database-model-types';\nexport * from './config/exports';\n\nexport {\n\tDatabaseModelGenerator\n};\n","import EntityRelationshipModelToCodeConverter from './EntityRelationshipModelToCodeConverter';\n\nexport * from './common/exports';\nexport * from './database/exports';\nexport * from './oop/exports';\n\nexport {\n\tEntityRelationshipModelToCodeConverter\n};\n","import EntityRelationshipModelToCodeConverter from '@/erdiagram/generator/EntityRelationshipModelToCodeConverter';\nimport ClassModelToCodeConverter from '@/erdiagram/generator/oop/code-converter/ClassModelToCodeConverter';\nimport {EntityRelationshipModel} from '@/erdiagram/parser/entity-relationship-model-types';\nimport ClassModelGenerator from '@/erdiagram/generator/oop/model/ClassModelGenerator';\n\nexport default class EntityRelationshipModelToClassCodeConverter implements EntityRelationshipModelToCodeConverter {\n\n\tconstructor(\n\t\t\tprivate readonly classModelGenerator: ClassModelGenerator,\n\t\t\tprivate readonly classModelToCodeConverter: ClassModelToCodeConverter\n\t) {\n\n\t}\n\n\tpublic generateCode(entityRelationshipModel: EntityRelationshipModel): string {\n\t\tconst classModel = this.classModelGenerator.generateClassModel(entityRelationshipModel);\n\t\treturn this.classModelToCodeConverter.generateCode(classModel);\n\t}\n\n}\n","import ClassModelToCodeConverterConfig from './ClassModelToCodeConverterConfig';\nimport ClassModelToCodeConverterSerializableConfig from './ClassModelToCodeConverterSerializableConfig';\nimport ClassModelToCodeConverter from './ClassModelToCodeConverter';\nimport EntityRelationshipModelToClassCodeConverter from './EntityRelationshipModelToClassCodeConverter';\n\nexport * from './java/exports';\nexport * from './typescript/exports';\n\nexport {\n\tClassModelToCodeConverter,\n\tClassModelToCodeConverterConfig,\n\tClassModelToCodeConverterSerializableConfig,\n\tEntityRelationshipModelToClassCodeConverter\n};\n","import {capitalizeWord} from '@/erdiagram/util/string-utils';\nimport {ClassDescriptor, ClassFieldDescriptor, ClassModel} from '@/erdiagram/generator/oop/model/class-model-types';\nimport {indentLine, indentLines} from '@/erdiagram/util/indent-utils';\nimport JavaParameterizedType, {\n\tcreateJavaParameterizedType,\n\tisJavaParameterizedType\n} from '@/erdiagram/generator/oop/code-converter/java/type/JavaParameterizedType';\nimport JavaType, {createJavaType} from '@/erdiagram/generator/oop/code-converter/java/type/JavaType';\nimport {removeDuplicates} from '@/erdiagram/util/array-utils';\nimport ClassModelToCodeConverter from '@/erdiagram/generator/oop/code-converter/ClassModelToCodeConverter';\nimport JavaClassModelToCodeConverterConfig\n\tfrom '@/erdiagram/generator/oop/code-converter/java/config/JavaClassModelToCodeConverterConfig';\nimport javaClassModelToCodeConverterConfigManager\n\tfrom '@/erdiagram/generator/oop/code-converter/java/config/JavaClassModelToCodeConverterConfigManager';\n\nconst EMPTY_STRING: string = '';\n\nexport default class JavaClassModelToCodeConverter implements ClassModelToCodeConverter {\n\n\tprivate readonly config: JavaClassModelToCodeConverterConfig;\n\n\tconstructor(config?: Partial<JavaClassModelToCodeConverterConfig>) {\n\t\tthis.config = javaClassModelToCodeConverterConfigManager.mergeWithDefaultConfig(config);\n\t}\n\n\tpublic generateCode(classModel: ClassModel): string {\n\t\treturn classModel.classes\n\t\t\t\t.map(classDescriptor => this.generateClass(classDescriptor))\n\t\t\t\t.join('\\n\\n');\n\t}\n\n\tprivate generateClass(classDescriptor: ClassDescriptor): string {\n\n\t\tconst className = capitalizeWord(classDescriptor.name);\n\n\t\tconst fieldsTypes: JavaType[] = [];\n\t\tconst fieldsLines: string[] = [];\n\t\tconst methodsLines: string[] = [];\n\n\t\tfor (const field of classDescriptor.fields) {\n\n\t\t\tconst {\n\t\t\t\tfieldType,\n\t\t\t\tfieldLines,\n\t\t\t\tgetterLines,\n\t\t\t\tsetterLines\n\t\t\t} = this.createField(field);\n\n\t\t\tfieldsTypes.push(fieldType);\n\t\t\tfieldsLines.push(...fieldLines);\n\t\t\tmethodsLines.push(...getterLines, EMPTY_STRING, ...setterLines, EMPTY_STRING);\n\n\t\t}\n\n\t\tconst classOuterLines = [\n\t\t\t`/* ========== ${className} class ========== */`,\n\t\t\tEMPTY_STRING\n\t\t];\n\n\t\tif (this.config.generatedClassesPackage) {\n\t\t\tclassOuterLines.push(`package ${this.config.generatedClassesPackage};`, EMPTY_STRING);\n\t\t}\n\n\t\tconst importLines = this.createImportStatements(fieldsTypes);\n\n\t\tif (this.config.useSpringNullabilityAnnotations) {\n\t\t\t// FIXME gestionar estos imports de otra forma\n\t\t\t// Quizás hacer que createField() devuelva qué tipos utiliza, y no solo el tipo del campo\n\t\t\tconst importNonNullAnnotation = classDescriptor.fields.some(f => !f.nullable);\n\t\t\tif (importNonNullAnnotation) {\n\t\t\t\timportLines.push('import org.springframework.lang.NonNull;');\n\t\t\t}\n\t\t\tconst importNullableAnnotation = classDescriptor.fields.some(f => f.nullable);\n\t\t\tif (importNullableAnnotation) {\n\t\t\t\timportLines.push('import org.springframework.lang.Nullable;');\n\t\t\t}\n\t\t}\n\n\t\tif (importLines.length !== 0) {\n\t\t\tclassOuterLines.push(...importLines, EMPTY_STRING);\n\t\t}\n\n\t\tclassOuterLines.push(`public class ${className} {`);\n\n\t\tconst classContentLines: string[] = [\n\t\t\tEMPTY_STRING,\n\t\t\t...fieldsLines,\n\t\t\tEMPTY_STRING,\n\t\t\t...methodsLines\n\t\t];\n\n\t\tclassOuterLines.push(...indentLines(classContentLines));\n\n\t\tclassOuterLines.push(`}`);\n\n\t\treturn classOuterLines.join('\\n');\n\n\t}\n\n\tprivate createField(field: ClassFieldDescriptor) {\n\n\t\tconst fieldName = field.name;\n\t\tconst capitalizedFieldName = capitalizeWord(fieldName);\n\n\t\tconst fieldLines: string[] = [];\n\n\t\t// TODO use length for validation annotations?\n\n\t\tif (this.config.useSpringNullabilityAnnotations) {\n\t\t\tif (field.nullable) {\n\t\t\t\tfieldLines.push('@Nullable');\n\t\t\t} else {\n\t\t\t\tfieldLines.push('@NonNull');\n\t\t\t}\n\t\t}\n\n\t\tconst javaType = this.mapFieldTypeToJavaType(field);\n\t\tconst formattedJavaType = javaType.formatSimple();\n\n\t\tfieldLines.push(`private ${formattedJavaType} ${fieldName};`);\n\n\t\tconst getterLines: string[] = [\n\t\t\t`public ${formattedJavaType} get${capitalizedFieldName}() {`,\n\t\t\tindentLine(`return ${fieldName};`),\n\t\t\t'}',\n\t\t];\n\n\t\tconst setterLines: string[] = [\n\t\t\t`public ${formattedJavaType} set${capitalizedFieldName}(${formattedJavaType} ${fieldName}) {`,\n\t\t\tindentLine(`this.${fieldName} = ${fieldName};`),\n\t\t\t'}',\n\t\t];\n\n\t\treturn {\n\t\t\tfieldType: javaType,\n\t\t\tfieldLines,\n\t\t\tgetterLines,\n\t\t\tsetterLines\n\t\t};\n\n\t}\n\n\tprivate mapFieldTypeToJavaType(field: ClassFieldDescriptor): JavaType {\n\t\tif (field.list) {\n\t\t\treturn this.mapListTypeToJavaType(field);\n\t\t} else {\n\t\t\treturn this.mapSingleTypeToJavaType(field);\n\t\t}\n\t}\n\n\tprivate mapListTypeToJavaType(field: ClassFieldDescriptor): JavaParameterizedType {\n\t\treturn createJavaParameterizedType(\n\t\t\t\t'List',\n\t\t\t\t'java.util',\n\t\t\t\t[\n\t\t\t\t\tthis.mapSingleTypeToJavaType(field)\n\t\t\t\t]\n\t\t);\n\t}\n\n\tprivate mapSingleTypeToJavaType(field: ClassFieldDescriptor): JavaType {\n\n\t\tconst {\n\t\t\tentityType,\n\t\t\tprimitiveType\n\t\t} = field;\n\n\t\tif (entityType) {\n\n\t\t\tif (primitiveType) {\n\t\t\t\tthrow new Error('Invalid field descriptor: provided both primitive and entity types');\n\t\t\t}\n\n\t\t\treturn createJavaType(entityType, this.config.generatedClassesPackage);\n\n\t\t}\n\n\t\tif (!primitiveType) {\n\t\t\tthrow new Error('Invalid field descriptor: missing type');\n\t\t}\n\n\t\tif (!this.config.typeBindings.hasOwnProperty(primitiveType)) {\n\t\t\tthrow new Error('Unsupported type: ' + primitiveType);\n\t\t}\n\n\t\treturn this.config.typeBindings[primitiveType]!;\n\n\t}\n\n\tprivate createImportStatements(javaTypes: JavaType[]): string[] {\n\n\t\tconst importStatements = this.unrollTypesRecursively(javaTypes)\n\t\t\t\t.filter(javaType => this.isImportRequired(javaType))\n\t\t\t\t.map(javaType => `import ${javaType.canonicalName};`);\n\n\t\treturn removeDuplicates(importStatements).sort();\n\n\t}\n\n\tprivate unrollTypesRecursively(javaTypes: JavaType[], appendTo: JavaType[] = []): JavaType[] {\n\n\t\tfor (const javaType of javaTypes) {\n\n\t\t\tappendTo.push(javaType);\n\n\t\t\tif (isJavaParameterizedType(javaType)) {\n\t\t\t\tthis.unrollTypesRecursively(javaType.parameterTypes, appendTo);\n\t\t\t}\n\n\t\t}\n\n\t\treturn appendTo;\n\n\t}\n\n\tprivate isImportRequired(javaType: JavaType): boolean {\n\t\treturn !!javaType.packageName\n\t\t\t\t&& javaType.packageName !== 'java.lang'\n\t\t\t\t&& this.config.generatedClassesPackage !== javaType.packageName;\n\t}\n\n}\n","import {EntityPropertyType} from '@/erdiagram/parser/entity-relationship-model-types';\nimport AbstractComponentConfigManager from '@/erdiagram/common/config/AbstractComponentConfigManager';\nimport JavaClassModelToCodeConverterConfig\n\tfrom '@/erdiagram/generator/oop/code-converter/java/config/JavaClassModelToCodeConverterConfig';\nimport parseJavaType from '@/erdiagram/generator/oop/code-converter/java/type/parseJavaType';\nimport {mapValues} from '@/erdiagram/util/record-utils';\nimport JavaClassModelToCodeConverterSerializableConfig\n\tfrom '@/erdiagram/generator/oop/code-converter/java/config/JavaClassModelToCodeConverterSerializableConfig';\n\nexport class JavaClassModelToCodeConverterConfigManager\n\t\textends AbstractComponentConfigManager<JavaClassModelToCodeConverterConfig, Partial<JavaClassModelToCodeConverterConfig>, JavaClassModelToCodeConverterSerializableConfig> {\n\n\tgetDefaultConfig(): JavaClassModelToCodeConverterConfig {\n\t\treturn {\n\t\t\ttypeBindings: {\n\t\t\t\t[EntityPropertyType.IDENTIFIER]: parseJavaType('java.lang.Long'),\n\t\t\t\t[EntityPropertyType.TEXT]: parseJavaType('java.lang.String'),\n\t\t\t\t[EntityPropertyType.LONG]: parseJavaType('java.lang.Long'),\n\t\t\t\t[EntityPropertyType.INT]: parseJavaType('java.lang.Integer'),\n\t\t\t\t[EntityPropertyType.SHORT]: parseJavaType('java.lang.Short'),\n\t\t\t\t[EntityPropertyType.DECIMAL]: parseJavaType('java.math.BigDecimal'),\n\t\t\t\t[EntityPropertyType.BOOLEAN]: parseJavaType('java.lang.Boolean'),\n\t\t\t\t[EntityPropertyType.DATE]: parseJavaType('java.time.LocalDate'),\n\t\t\t\t[EntityPropertyType.TIME]: parseJavaType('java.time.LocalTime'),\n\t\t\t\t[EntityPropertyType.DATETIME]: parseJavaType('java.time.LocalDateTime'),\n\t\t\t\t[EntityPropertyType.BLOB]: parseJavaType('byte[]')\n\t\t\t},\n\t\t\tuseSpringNullabilityAnnotations: false\n\t\t};\n\t}\n\n\tmergeConfigs(fullConfig: JavaClassModelToCodeConverterConfig, partialConfig?: Partial<JavaClassModelToCodeConverterConfig>): JavaClassModelToCodeConverterConfig {\n\t\treturn {\n\t\t\t...fullConfig,\n\t\t\t...partialConfig,\n\t\t\ttypeBindings: {\n\t\t\t\t...fullConfig.typeBindings,\n\t\t\t\t...partialConfig?.typeBindings\n\t\t\t}\n\t\t};\n\t}\n\n\tconvertToSerializableObject(fullConfig: JavaClassModelToCodeConverterConfig): JavaClassModelToCodeConverterSerializableConfig {\n\t\treturn {\n\t\t\t...fullConfig,\n\t\t\ttypeBindings: mapValues(fullConfig.typeBindings, javaType => javaType!.formatCanonical()),\n\t\t};\n\t}\n\n\tconvertFromSerializableObject(serializableConfig: JavaClassModelToCodeConverterSerializableConfig): JavaClassModelToCodeConverterConfig {\n\t\treturn {\n\t\t\t...serializableConfig,\n\t\t\ttypeBindings: mapValues(serializableConfig.typeBindings, parseJavaType),\n\t\t};\n\t}\n\n}\n\nconst javaClassModelToCodeConverterConfigManager = new JavaClassModelToCodeConverterConfigManager();\nexport default javaClassModelToCodeConverterConfigManager;\n","import JavaClassModelToCodeConverterConfig from './JavaClassModelToCodeConverterConfig';\nimport JavaClassModelToCodeConverterSerializableConfig from './JavaClassModelToCodeConverterSerializableConfig';\nimport javaClassModelToCodeConverterConfigManager, {JavaClassModelToCodeConverterConfigManager} from './JavaClassModelToCodeConverterConfigManager';\n\nexport {\n\tJavaClassModelToCodeConverterConfig,\n\tJavaClassModelToCodeConverterSerializableConfig,\n\tJavaClassModelToCodeConverterConfigManager,\n\tjavaClassModelToCodeConverterConfigManager\n};\n","import JavaType, {createJavaType} from './type/JavaType';\nimport JavaParameterizedType, {\n\tcreateJavaArrayType,\n\tcreateJavaParameterizedType,\n\tisJavaParameterizedType\n} from './type/JavaParameterizedType';\nimport JavaClassModelToCodeConverter from './JavaClassModelToCodeConverter';\nimport parseJavaType from '@/erdiagram/generator/oop/code-converter/java/type/parseJavaType';\n\nexport * from './config/exports';\n\nexport {\n\tJavaType,\n\tcreateJavaType,\n\tJavaParameterizedType,\n\tcreateJavaParameterizedType,\n\tcreateJavaArrayType,\n\tisJavaParameterizedType,\n\tparseJavaType,\n\tJavaClassModelToCodeConverter\n};\n","import JavaType from '@/erdiagram/generator/oop/code-converter/java/type/JavaType';\n\nexport default interface JavaParameterizedType extends JavaType {\n\tparameterTypes: JavaType[];\n}\n\nexport function createJavaParameterizedType(name: string, packageName: string | undefined, parameterTypes: JavaType[]): JavaParameterizedType {\n\n\tconst canonicalName = packageName ? `${packageName}.${name}` : name;\n\n\treturn {\n\t\tpackageName,\n\t\tname,\n\t\tparameterTypes,\n\t\tcanonicalName,\n\t\tformatSimple(canonical: boolean = false) {\n\t\t\tconst formattedParameterTypes = parameterTypes.map(t => t.formatSimple()).join(', ');\n\t\t\treturn `${name}<${formattedParameterTypes}>`;\n\t\t},\n\t\tformatCanonical(canonical: boolean = false) {\n\t\t\tconst formattedParameterTypes = parameterTypes.map(t => t.formatCanonical()).join(', ');\n\t\t\treturn `${canonicalName}<${formattedParameterTypes}>`;\n\t\t}\n\t};\n}\n\nexport function createJavaArrayType(parameterType: JavaType): JavaParameterizedType {\n\n\tconst name = `${parameterType.name}[]`;\n\n\treturn {\n\t\tname,\n\t\tparameterTypes: [parameterType],\n\t\tcanonicalName: name,\n\t\tformatSimple() {\n\t\t\treturn `${parameterType.formatSimple()}[]`;\n\t\t},\n\t\tformatCanonical() {\n\t\t\treturn `${parameterType.formatCanonical()}[]`;\n\t\t}\n\t};\n\n}\n\nexport function isJavaParameterizedType(javaType: JavaType): javaType is JavaParameterizedType {\n\treturn Array.isArray((javaType as JavaParameterizedType).parameterTypes);\n}\n","export default interface JavaType {\n\n\tpackageName?: string;\n\tname: string;\n\tcanonicalName: string;\n\n\tformatSimple(): string;\n\n\tformatCanonical(): string;\n\n}\n\nexport function createJavaType(name: string, packageName?: string): JavaType {\n\n\tconst canonicalName = packageName ? `${packageName}.${name}` : name;\n\n\treturn {\n\t\tpackageName,\n\t\tname,\n\t\tcanonicalName,\n\t\tformatSimple() {\n\t\t\treturn name;\n\t\t},\n\t\tformatCanonical() {\n\t\t\treturn canonicalName;\n\t\t}\n\t};\n\n}\n","import {\n\tcreateJavaArrayType,\n\tcreateJavaParameterizedType\n} from '@/erdiagram/generator/oop/code-converter/java/type/JavaParameterizedType';\nimport JavaType, {createJavaType} from '@/erdiagram/generator/oop/code-converter/java/type/JavaType';\n\nexport default function parseJavaType(text: string): JavaType {\n\ttry {\n\t\treturn parseJavaTypeInternal(text);\n\t} catch (error) {\n\t\tthrow new Error('Malformed Java type: ' + text);\n\t}\n}\n\nfunction parseJavaTypeInternal(text: string): JavaType {\n\n\tconst trimmedText = text.trim();\n\n\tif (trimmedText.endsWith('[]')) {\n\t\tconst parameterType = trimmedText.substring(0, trimmedText.length - 2);\n\t\treturn createJavaArrayType(parseJavaType(parameterType));\n\t}\n\n\tconst startOfParameterTypes = trimmedText.indexOf('<');\n\n\tif (startOfParameterTypes === -1) {\n\t\treturn parseJavaSimpleType(trimmedText);\n\t}\n\n\tconst endOfParameterTypes = trimmedText.lastIndexOf('>');\n\n\tif (endOfParameterTypes === -1) {\n\t\tthrow new Error('Missing end character of parameter types (>)');\n\t}\n\n\tif (endOfParameterTypes !== trimmedText.length - 1) {\n\t\tthrow new Error('Unexpected characters found after parameter types');\n\t}\n\n\tconst rawType = parseJavaSimpleType(trimmedText.substring(0, startOfParameterTypes));\n\n\tconst parameterTypes = splitParameterTypes(trimmedText.substring(startOfParameterTypes + 1, endOfParameterTypes))\n\t\t\t.map(parameterType => parseJavaType(parameterType));\n\n\treturn createJavaParameterizedType(rawType.name, rawType.packageName, parameterTypes);\n\n}\n\nfunction parseJavaSimpleType(text: string): JavaType {\n\n\tconst trimmedText = text.trim();\n\n\tconst lastDotIndex = trimmedText.lastIndexOf('.');\n\n\tif (lastDotIndex === -1) {\n\t\treturn createJavaType(trimmedText);\n\t}\n\n\tconst packageName = trimmedText.substring(0, lastDotIndex);\n\tconst className = trimmedText.substring(lastDotIndex + 1);\n\n\treturn createJavaType(className, packageName);\n\n}\n\nfunction splitParameterTypes(parameterTypesText: string): string[] {\n\n\tif (!parameterTypesText.includes(',')) {\n\t\treturn [parameterTypesText];\n\t}\n\n\tconst commaIndices: number[] = [];\n\n\tlet nestedLevelsCount = 0;\n\n\t[...parameterTypesText].forEach((character, index) => {\n\t\tswitch (character) {\n\t\t\tcase ',':\n\t\t\t\tif (nestedLevelsCount === 0) {\n\t\t\t\t\tcommaIndices.push(index);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase '<':\n\t\t\t\tnestedLevelsCount++;\n\t\t\t\tbreak;\n\t\t\tcase '>':\n\t\t\t\tif (nestedLevelsCount === 0) {\n\t\t\t\t\tthrow new Error('Unexpected character \">\"');\n\t\t\t\t}\n\t\t\t\tnestedLevelsCount--;\n\t\t\t\tbreak;\n\t\t}\n\t});\n\n\tconst splittedParameterTypes: string[] = [];\n\tlet startIndex = 0;\n\n\tfor (const commaIndex of commaIndices) {\n\t\tsplittedParameterTypes.push(parameterTypesText.substring(startIndex, commaIndex));\n\t\tstartIndex = commaIndex + 1;\n\t}\n\n\t// Text after the last comma\n\tsplittedParameterTypes.push(parameterTypesText.substring(startIndex));\n\n\treturn splittedParameterTypes;\n\n}\n","import {capitalizeWord} from '@/erdiagram/util/string-utils';\nimport {ClassDescriptor, ClassFieldDescriptor, ClassModel} from '@/erdiagram/generator/oop/model/class-model-types';\nimport {indentLines} from '@/erdiagram/util/indent-utils';\nimport TypeScriptParameterizedType, {createTypeScriptArrayType} from '@/erdiagram/generator/oop/code-converter/typescript/type/TypeScriptParameterizedType';\nimport TypeScriptType, {createTypeScriptType} from '@/erdiagram/generator/oop/code-converter/typescript/type/TypeScriptType';\nimport ClassModelToCodeConverter from '@/erdiagram/generator/oop/code-converter/ClassModelToCodeConverter';\nimport TypeScriptClassModelToCodeConverterConfig\n\tfrom '@/erdiagram/generator/oop/code-converter/typescript/config/TypeScriptClassModelToCodeConverterConfig';\nimport typescriptClassModelToCodeConverterConfigManager\n\tfrom '@/erdiagram/generator/oop/code-converter/typescript/config/TypeScriptClassModelToCodeConverterConfigManager';\n\nexport default class TypeScriptClassModelToCodeConverter implements ClassModelToCodeConverter {\n\n\tprivate readonly config: TypeScriptClassModelToCodeConverterConfig;\n\n\tconstructor(config?: Partial<TypeScriptClassModelToCodeConverterConfig>) {\n\t\tthis.config = typescriptClassModelToCodeConverterConfigManager.mergeWithDefaultConfig(config);\n\t}\n\n\tpublic generateCode(classModel: ClassModel): string {\n\t\treturn classModel.classes\n\t\t\t\t.map(classDescriptor => this.generateClass(classDescriptor))\n\t\t\t\t.join('\\n\\n');\n\t}\n\n\tprivate generateClass(classDescriptor: ClassDescriptor): string {\n\n\t\tconst interfaceName = capitalizeWord(classDescriptor.name);\n\n\t\tconst fieldsLines: string[] = classDescriptor.fields\n\t\t\t\t.map(field => this.createField(field));\n\n\t\tconst classOuterLines = [\n\t\t\t`interface ${interfaceName} {`\n\t\t];\n\n\t\tclassOuterLines.push(...indentLines(fieldsLines));\n\n\t\tclassOuterLines.push(`}`);\n\n\t\treturn classOuterLines.join('\\n');\n\n\t}\n\n\tprivate createField(field: ClassFieldDescriptor) {\n\n\t\tconst fieldName = field.name;\n\n\t\tconst typescriptType = this.mapFieldTypeToTypeScriptType(field);\n\t\tconst formattedTypeScriptType = typescriptType.format();\n\t\tconst optionalIndicatorChar = field.nullable ? '?' : '';\n\n\t\treturn `${fieldName}${optionalIndicatorChar}: ${formattedTypeScriptType};`;\n\n\t}\n\n\tprivate mapFieldTypeToTypeScriptType(field: ClassFieldDescriptor): TypeScriptType {\n\t\tif (field.list) {\n\t\t\treturn this.mapListTypeToTypeScriptType(field);\n\t\t} else {\n\t\t\treturn this.mapSingleTypeToTypeScriptType(field);\n\t\t}\n\t}\n\n\tprivate mapListTypeToTypeScriptType(field: ClassFieldDescriptor): TypeScriptParameterizedType {\n\t\treturn createTypeScriptArrayType(this.mapSingleTypeToTypeScriptType(field));\n\t}\n\n\tprivate mapSingleTypeToTypeScriptType(field: ClassFieldDescriptor): TypeScriptType {\n\n\t\tconst {\n\t\t\tentityType,\n\t\t\tprimitiveType\n\t\t} = field;\n\n\t\tif (entityType) {\n\n\t\t\tif (primitiveType) {\n\t\t\t\tthrow new Error('Invalid field descriptor: provided both primitive and entity types');\n\t\t\t}\n\n\t\t\treturn createTypeScriptType(entityType);\n\n\t\t}\n\n\t\tif (!primitiveType) {\n\t\t\tthrow new Error('Invalid field descriptor: missing type');\n\t\t}\n\n\t\tif (!this.config.typeBindings.hasOwnProperty(primitiveType)) {\n\t\t\tthrow new Error('Unsupported type: ' + primitiveType);\n\t\t}\n\n\t\treturn this.config.typeBindings[primitiveType]!;\n\n\t}\n\n}\n","import {EntityPropertyType} from '@/erdiagram/parser/entity-relationship-model-types';\nimport AbstractComponentConfigManager from '@/erdiagram/common/config/AbstractComponentConfigManager';\nimport TypeScriptClassModelToCodeConverterConfig\n\tfrom '@/erdiagram/generator/oop/code-converter/typescript/config/TypeScriptClassModelToCodeConverterConfig';\nimport parseTypeScriptType from '@/erdiagram/generator/oop/code-converter/typescript/type/parseTypeScriptType';\nimport TypeScriptClassModelToCodeConverterSerializableConfig\n\tfrom '@/erdiagram/generator/oop/code-converter/typescript/config/TypeScriptClassModelToCodeConverterSerializableConfig';\nimport {mapValues} from '@/erdiagram/util/record-utils';\n\nexport class TypeScriptClassModelToCodeConverterConfigManager\n\t\textends AbstractComponentConfigManager<TypeScriptClassModelToCodeConverterConfig, Partial<TypeScriptClassModelToCodeConverterConfig>, TypeScriptClassModelToCodeConverterSerializableConfig> {\n\n\tgetDefaultConfig(): TypeScriptClassModelToCodeConverterConfig {\n\t\treturn {\n\t\t\ttypeBindings: {\n\t\t\t\t[EntityPropertyType.IDENTIFIER]: parseTypeScriptType('number'),\n\t\t\t\t[EntityPropertyType.TEXT]: parseTypeScriptType('string'),\n\t\t\t\t[EntityPropertyType.LONG]: parseTypeScriptType('number'),\n\t\t\t\t[EntityPropertyType.INT]: parseTypeScriptType('number'),\n\t\t\t\t[EntityPropertyType.SHORT]: parseTypeScriptType('number'),\n\t\t\t\t[EntityPropertyType.DECIMAL]: parseTypeScriptType('number'),\n\t\t\t\t[EntityPropertyType.BOOLEAN]: parseTypeScriptType('boolean'),\n\t\t\t\t[EntityPropertyType.DATE]: parseTypeScriptType('Date'),\n\t\t\t\t[EntityPropertyType.TIME]: parseTypeScriptType('Date'),\n\t\t\t\t[EntityPropertyType.DATETIME]: parseTypeScriptType('Date'),\n\t\t\t\t[EntityPropertyType.BLOB]: parseTypeScriptType('Uint8Array'),\n\t\t\t}\n\t\t};\n\t}\n\n\tmergeConfigs(fullConfig: TypeScriptClassModelToCodeConverterConfig, partialConfig?: Partial<TypeScriptClassModelToCodeConverterConfig>): TypeScriptClassModelToCodeConverterConfig {\n\t\treturn {\n\t\t\t...fullConfig,\n\t\t\t...partialConfig,\n\t\t\ttypeBindings: {\n\t\t\t\t...fullConfig.typeBindings,\n\t\t\t\t...partialConfig?.typeBindings\n\t\t\t}\n\t\t};\n\t}\n\n\tconvertToSerializableObject(fullConfig: TypeScriptClassModelToCodeConverterConfig): TypeScriptClassModelToCodeConverterSerializableConfig {\n\t\treturn {\n\t\t\t...fullConfig,\n\t\t\ttypeBindings: mapValues(fullConfig.typeBindings, typeScriptType => typeScriptType!.format()),\n\t\t};\n\t}\n\n\tconvertFromSerializableObject(serializableConfig: TypeScriptClassModelToCodeConverterSerializableConfig): TypeScriptClassModelToCodeConverterConfig {\n\t\treturn {\n\t\t\t...serializableConfig,\n\t\t\ttypeBindings: mapValues(serializableConfig.typeBindings, parseTypeScriptType),\n\t\t};\n\t}\n\n}\n\nconst typescriptClassModelToCodeConverterConfigManager = new TypeScriptClassModelToCodeConverterConfigManager();\nexport default typescriptClassModelToCodeConverterConfigManager;\n","import TypeScriptClassModelToCodeConverterConfig from './TypeScriptClassModelToCodeConverterConfig';\nimport TypeScriptClassModelToCodeConverterSerializableConfig\n\tfrom './TypeScriptClassModelToCodeConverterSerializableConfig';\nimport typescriptClassModelToCodeConverterConfigManager, {TypeScriptClassModelToCodeConverterConfigManager} from './TypeScriptClassModelToCodeConverterConfigManager';\n\nexport {\n\tTypeScriptClassModelToCodeConverterConfig,\n\tTypeScriptClassModelToCodeConverterSerializableConfig,\n\tTypeScriptClassModelToCodeConverterConfigManager,\n\ttypescriptClassModelToCodeConverterConfigManager\n};\n","import TypeScriptType, {createTypeScriptType} from './type/TypeScriptType';\nimport TypeScriptParameterizedType, {\n\tcreateTypeScriptArrayType,\n\tcreateTypeScriptParameterizedType,\n\tisTypeScriptParameterizedType\n} from './type/TypeScriptParameterizedType';\nimport TypeScriptClassModelToCodeConverter from './TypeScriptClassModelToCodeConverter';\nimport parseTypeScriptType from '@/erdiagram/generator/oop/code-converter/typescript/type/parseTypeScriptType';\n\nexport * from './config/exports';\n\nexport {\n\tTypeScriptType,\n\tcreateTypeScriptType,\n\tTypeScriptParameterizedType,\n\tcreateTypeScriptParameterizedType,\n\tcreateTypeScriptArrayType,\n\tisTypeScriptParameterizedType,\n\tparseTypeScriptType,\n\tTypeScriptClassModelToCodeConverter\n};\n","import TypeScriptType from '@/erdiagram/generator/oop/code-converter/typescript/type/TypeScriptType';\n\nexport default interface TypeScriptParameterizedType extends TypeScriptType {\n\tparameterTypes: TypeScriptType[];\n}\n\nexport function createTypeScriptParameterizedType(name: string, parameterTypes: TypeScriptType[]): TypeScriptParameterizedType {\n\treturn {\n\t\tname,\n\t\tparameterTypes,\n\t\tformat: () => {\n\t\t\tconst formattedParameterTypes = parameterTypes.map(t => t.format()).join(', ');\n\t\t\treturn `${name}<${formattedParameterTypes}>`;\n\t\t}\n\t};\n}\n\nexport function createTypeScriptArrayType(parameterType: TypeScriptType): TypeScriptParameterizedType {\n\treturn {\n\t\tname: 'Array',\n\t\tparameterTypes: [parameterType],\n\t\tformat: () => `${parameterType.format()}[]`\n\t};\n}\n\nexport function isTypeScriptParameterizedType(javaType: TypeScriptType): javaType is TypeScriptParameterizedType {\n\treturn Array.isArray((javaType as TypeScriptParameterizedType).parameterTypes);\n}\n","export default interface TypeScriptType {\n\n\tname: string;\n\n\tformat(): string;\n\n}\n\nexport function createTypeScriptType(name: string): TypeScriptType {\n\treturn {\n\t\tname,\n\t\tformat: () => name\n\t};\n}\n","import TypeScriptType, {createTypeScriptType} from '@/erdiagram/generator/oop/code-converter/typescript/type/TypeScriptType';\nimport {\n\tcreateTypeScriptArrayType,\n\tcreateTypeScriptParameterizedType\n} from '@/erdiagram/generator/oop/code-converter/typescript/type/TypeScriptParameterizedType';\n\nexport default function parseTypeScriptType(text: string): TypeScriptType {\n\n\tconst trimmedText = text.trim();\n\n\tif (trimmedText.endsWith('[]')) {\n\t\tconst parameterType = trimmedText.substring(0, trimmedText.length - 2);\n\t\treturn createTypeScriptArrayType(parseTypeScriptType(parameterType));\n\t}\n\n\tconst startOfParameterTypes = trimmedText.indexOf('<');\n\n\tif (startOfParameterTypes === -1) {\n\t\treturn parseTypeScriptSimpleType(trimmedText);\n\t}\n\n\tconst endOfParameterTypes = trimmedText.lastIndexOf('>');\n\n\tif (endOfParameterTypes === -1 || endOfParameterTypes !== trimmedText.length - 1) {\n\t\tthrow new Error('Malformed TypeScript type: ' + trimmedText);\n\t}\n\n\tconst rawType = parseTypeScriptSimpleType(trimmedText.substring(0, startOfParameterTypes));\n\n\tconst parameterTypes = splitParameterTypes(trimmedText.substring(startOfParameterTypes + 1, endOfParameterTypes))\n\t\t\t.map(parameterType => parseTypeScriptType(parameterType));\n\n\treturn createTypeScriptParameterizedType(rawType.name, parameterTypes);\n\n}\n\nfunction parseTypeScriptSimpleType(text: string): TypeScriptType {\n\treturn createTypeScriptType(text.trim());\n}\n\nfunction splitParameterTypes(parameterTypesText: string): string[] {\n\n\tif (!parameterTypesText.includes(',')) {\n\t\treturn [parameterTypesText];\n\t}\n\n\tconst commaIndices: number[] = [];\n\n\tlet nestedLevelsCount = 0;\n\n\t[...parameterTypesText].forEach((character, index) => {\n\t\tswitch (character) {\n\t\t\tcase ',':\n\t\t\t\tif (nestedLevelsCount === 0) {\n\t\t\t\t\tcommaIndices.push(index);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase '<':\n\t\t\t\tnestedLevelsCount++;\n\t\t\t\tbreak;\n\t\t\tcase '>':\n\t\t\t\tif (nestedLevelsCount === 0) {\n\t\t\t\t\tthrow new Error('Unexpected character \">\"');\n\t\t\t\t}\n\t\t\t\tnestedLevelsCount--;\n\t\t\t\tbreak;\n\t\t}\n\t});\n\n\tconst splittedParameterTypes: string[] = [];\n\tlet startIndex = 0;\n\n\tfor (const commaIndex of commaIndices) {\n\t\tsplittedParameterTypes.push(parameterTypesText.substring(startIndex, commaIndex));\n\t\tstartIndex = commaIndex + 1;\n\t}\n\n\t// Text after the last comma\n\tsplittedParameterTypes.push(parameterTypesText.substring(startIndex));\n\n\treturn splittedParameterTypes;\n\n}\n","export * from './code-converter/exports';\nexport * from './model/exports';\n","import pluralize from 'pluralize';\nimport {capitalizeWord} from '@/erdiagram/util/string-utils';\nimport {ClassDescriptor, ClassFieldDescriptor, ClassModel} from '@/erdiagram/generator/oop/model/class-model-types';\nimport {\n\tCardinality,\n\tDirection,\n\tEntityDescriptor,\n\tEntityPropertyDescriptor,\n\tEntityPropertyType,\n\tEntityRelationshipModel,\n\tRelationshipMember\n} from '@/erdiagram/parser/entity-relationship-model-types';\nimport ClassModelGeneratorConfig from '@/erdiagram/generator/oop/model/config/ClassModelGeneratorConfig';\nimport classModelGeneratorConfigManager from '@/erdiagram/generator/oop/model/config/ClassModelGeneratorConfigManager';\n\nexport default class ClassModelGenerator {\n\n\tprivate readonly config: ClassModelGeneratorConfig;\n\n\tconstructor(config?: Partial<ClassModelGeneratorConfig>) {\n\t\tthis.config = classModelGeneratorConfigManager.mergeWithDefaultConfig(config);\n\t}\n\n\tgenerateClassModel(model: EntityRelationshipModel): ClassModel {\n\n\t\tconst classes: ClassDescriptor[] = [];\n\n\t\tmodel.entities\n\t\t\t\t.map(entity => this.generateEntityTable(entity, model))\n\t\t\t\t.forEach(sentence => classes.push(sentence));\n\n\t\treturn {\n\t\t\tclasses\n\t\t};\n\n\t}\n\n\tprivate generateEntityTable(entity: EntityDescriptor, model: EntityRelationshipModel): ClassDescriptor {\n\n\t\tconst name = capitalizeWord(entity.name);\n\n\t\tconst fields: ClassFieldDescriptor[] = [\n\t\t\tthis.createIdField(entity)\n\t\t];\n\n\t\tfor (const property of entity.properties) {\n\t\t\tfields.push(this.mapPropertyToField(property));\n\t\t}\n\n\t\tfor (const relationship of model.relationships) {\n\n\t\t\tconst {\n\t\t\t\tleftMember,\n\t\t\t\trightMember,\n\t\t\t\tdirection\n\t\t\t} = relationship;\n\n\t\t\tif (leftMember.entity === entity.name && [Direction.LEFT_TO_RIGHT, Direction.BIDIRECTIONAL].includes(direction)) {\n\t\t\t\tfields.push(this.mapRelationshipMemberToField(rightMember));\n\t\t\t}\n\n\t\t\tif (rightMember.entity === entity.name && [Direction.RIGHT_TO_LEFT, Direction.BIDIRECTIONAL].includes(direction)) {\n\t\t\t\tfields.push(this.mapRelationshipMemberToField(leftMember));\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\t\t\tname,\n\t\t\tfields\n\t\t};\n\n\t}\n\n\tprivate createIdField(entity: EntityDescriptor): ClassFieldDescriptor {\n\t\treturn {\n\t\t\tname: this.getIdentifierFieldName(entity),\n\t\t\tprimitiveType: EntityPropertyType.IDENTIFIER,\n\t\t\tnullable: false,\n\t\t\tlist: false\n\t\t};\n\t}\n\n\tprivate getIdentifierFieldName(entity: EntityDescriptor) {\n\n\t\tif (entity.identifierPropertyName) {\n\t\t\treturn entity.identifierPropertyName;\n\t\t}\n\n\t\tconst {idNamingStrategy} = this.config;\n\t\treturn idNamingStrategy(entity.name);\n\n\t}\n\n\tprivate mapRelationshipMemberToField(toMember: RelationshipMember): ClassFieldDescriptor {\n\n\t\tconst list = toMember.cardinality === Cardinality.MANY;\n\t\tconst name = list ? pluralize(toMember.entityAlias) : toMember.entityAlias;\n\n\t\treturn {\n\t\t\tname,\n\t\t\tnullable: toMember.cardinality === Cardinality.ZERO_OR_ONE,\n\t\t\tentityType: toMember.entity,\n\t\t\tlist\n\t\t};\n\n\t}\n\n\tprivate mapPropertyToField(property: EntityPropertyDescriptor): ClassFieldDescriptor {\n\n\t\tconst {\n\t\t\tname,\n\t\t\toptional,\n\t\t\ttype\n\t\t} = property;\n\n\t\treturn {\n\t\t\tname,\n\t\t\tnullable: optional,\n\t\t\tprimitiveType: type,\n\t\t\tlist: false\n\t\t};\n\n\t}\n\n};\n","import AbstractComponentConfigManager from '@/erdiagram/common/config/AbstractComponentConfigManager';\nimport ClassModelGeneratorConfig from '@/erdiagram/generator/oop/model/config/ClassModelGeneratorConfig';\nimport StandardIdNamingStrategies from '@/erdiagram/generator/common/id-naming-strategy/StandardIdNamingStrategies';\nimport {findKeyFromValue, findValueFromNullableKey} from '@/erdiagram/util/record-utils';\nimport ClassModelGeneratorSerializableConfig\n\tfrom '@/erdiagram/generator/oop/model/config/ClassModelGeneratorSerializableConfig';\n\nexport class ClassModelGeneratorConfigManager\n\t\textends AbstractComponentConfigManager<ClassModelGeneratorConfig, Partial<ClassModelGeneratorConfig>, ClassModelGeneratorSerializableConfig> {\n\n\tgetDefaultConfig(): ClassModelGeneratorConfig {\n\t\treturn {\n\t\t\tidNamingStrategy: StandardIdNamingStrategies.DEFAULT\n\t\t};\n\t}\n\n\tmergeConfigs(fullConfig: ClassModelGeneratorConfig, partialConfig?: Partial<ClassModelGeneratorConfig>): ClassModelGeneratorConfig {\n\t\treturn {\n\t\t\t...fullConfig,\n\t\t\t...partialConfig\n\t\t};\n\t}\n\n\tconvertToSerializableObject(fullConfig: ClassModelGeneratorConfig): ClassModelGeneratorSerializableConfig {\n\t\treturn {\n\t\t\t...fullConfig,\n\t\t\tidNamingStrategy: findKeyFromValue(StandardIdNamingStrategies, fullConfig.idNamingStrategy)\n\t\t};\n\t}\n\n\tconvertFromSerializableObject(serializableConfig: ClassModelGeneratorSerializableConfig): ClassModelGeneratorConfig {\n\t\treturn {\n\t\t\t...serializableConfig,\n\t\t\tidNamingStrategy: findValueFromNullableKey(StandardIdNamingStrategies, serializableConfig.idNamingStrategy, StandardIdNamingStrategies.DEFAULT)\n\t\t};\n\t}\n\n}\n\nconst classModelGeneratorConfigManager = new ClassModelGeneratorConfigManager();\nexport default classModelGeneratorConfigManager;\n","import ClassModelGeneratorConfig from './ClassModelGeneratorConfig';\nimport ClassModelGeneratorSerializableConfig from './ClassModelGeneratorSerializableConfig';\nimport classModelGeneratorConfigManager, {ClassModelGeneratorConfigManager} from './ClassModelGeneratorConfigManager';\n\nexport {\n\tClassModelGeneratorConfig,\n\tClassModelGeneratorSerializableConfig,\n\tClassModelGeneratorConfigManager,\n\tclassModelGeneratorConfigManager\n};\n","import ClassModelGenerator from './ClassModelGenerator';\n\nexport * from './class-model-types';\nexport * from './config/exports';\n\nexport {\n\tClassModelGenerator\n};\n","import {\n\tparseEntityNameStatement,\n\tparseEntityPropertyStatement,\n\tparseRelationshipStatement\n} from '@/erdiagram/parser/statement/statement-types-parse-functions';\nimport {guessStatementType, StatementType} from '@/erdiagram/parser/statement/statement-type-guesser';\nimport {EntityRelationshipModel} from '@/erdiagram/parser/entity-relationship-model-types';\nimport EntityRelationshipModelParserConfig from '@/erdiagram/parser/config/EntityRelationshipModelParserConfig';\nimport ParsedEntityRelationshipModelValidator\n\tfrom '@/erdiagram/parser/validator/ParsedEntityRelationshipModelValidator';\nimport entityRelationshipModelParserConfigManager\n\tfrom '@/erdiagram/parser/config/EntityRelationshipModelParserConfigManager';\nimport {\n\tERDiagramEntityError,\n\tERDiagramEntityPropertyError,\n\tERDiagramError,\n\tERDiagramParseLineError,\n\tERDiagramRelationshipError,\n\tERDiagramSyntaxError\n} from '@/erdiagram/parser/parse-errors';\nimport {\n\tParsedEntityDescriptor,\n\tParsedEntityRelationshipModel,\n\tParsedRelationshipDescriptor,\n\tParsedStatementResult\n} from '@/erdiagram/parser/parsed-entity-relationship-model-types';\nimport ParsedModelToPublicModelConverter from '@/erdiagram/parser/ParsedModelToPublicModelConverter';\n\ninterface ParseState {\n\tentities: ParsedEntityDescriptor[];\n\trelationships: ParsedRelationshipDescriptor[];\n\tentityBeingParsed: ParsedEntityDescriptor | null;\n\tstatementResultToLineMap: Map<ParsedStatementResult, number>;\n}\n\ninterface ParseResult {\n\tmodel: ParsedEntityRelationshipModel;\n\tstatementResultToLineMap: Map<ParsedStatementResult, number>;\n}\n\nexport default class EntityRelationshipModelParser {\n\n\tprivate readonly config: EntityRelationshipModelParserConfig;\n\tprivate readonly validator: ParsedEntityRelationshipModelValidator;\n\tprivate readonly parsedModelToPublicModelConverter: ParsedModelToPublicModelConverter;\n\n\tconstructor(config?: Partial<EntityRelationshipModelParserConfig>) {\n\t\tthis.config = entityRelationshipModelParserConfigManager.mergeWithDefaultConfig(config);\n\t\tthis.validator = new ParsedEntityRelationshipModelValidator(this.config.allowUnknownEntities);\n\t\tthis.parsedModelToPublicModelConverter = new ParsedModelToPublicModelConverter();\n\t}\n\n\tpublic parseModel(code: string): EntityRelationshipModel {\n\t\tconst {\n\t\t\tmodel,\n\t\t\tstatementResultToLineMap\n\t\t} = this.parseModelWithoutValidation(code);\n\t\ttry {\n\t\t\tthis.validator.validateParsedModel(model);\n\t\t} catch (error) {\n\t\t\tthis.handleValidationError(error, statementResultToLineMap);\n\t\t}\n\t\treturn this.parsedModelToPublicModelConverter.convertParsedModelToPublicModel(model);\n\t}\n\n\tprivate parseModelWithoutValidation(code: string): ParseResult {\n\n\t\tconst lines = code.split('\\n');\n\n\t\tconst state: ParseState = {\n\t\t\tentities: [],\n\t\t\trelationships: [],\n\t\t\tentityBeingParsed: null,\n\t\t\tstatementResultToLineMap: new Map<ParsedStatementResult, number>()\n\t\t};\n\n\t\tlines.forEach((line, lineIndex) => {\n\t\t\ttry {\n\t\t\t\tthis.parseLine(line, lineIndex, state);\n\t\t\t} catch (error) {\n\t\t\t\tthis.handleLineError(error, lineIndex);\n\t\t\t}\n\t\t});\n\n\t\treturn {\n\t\t\tmodel: {\n\t\t\t\tentities: state.entities,\n\t\t\t\trelationships: state.relationships\n\t\t\t},\n\t\t\tstatementResultToLineMap: state.statementResultToLineMap\n\t\t};\n\n\t}\n\n\tprivate parseLine(line: string, lineIndex: number, state: ParseState) {\n\n\t\tconst statementType = guessStatementType(line);\n\n\t\tswitch (statementType) {\n\t\t\tcase StatementType.ENTITY_NAME:\n\n\t\t\t\tconst entityDescriptor: ParsedEntityDescriptor = {\n\t\t\t\t\tname: parseEntityNameStatement(line),\n\t\t\t\t\tproperties: []\n\t\t\t\t};\n\n\t\t\t\tstate.entities.push(entityDescriptor);\n\t\t\t\tstate.entityBeingParsed = entityDescriptor;\n\t\t\t\tstate.statementResultToLineMap.set(entityDescriptor, lineIndex);\n\n\t\t\t\tbreak;\n\t\t\tcase StatementType.ENTITY_PROPERTY:\n\n\t\t\t\tif (state.entityBeingParsed == null) {\n\t\t\t\t\tthrow new ERDiagramSyntaxError('Unexpected entity property statement');\n\t\t\t\t}\n\n\t\t\t\tconst entityPropertyDescriptor = parseEntityPropertyStatement(line);\n\n\t\t\t\tstate.entityBeingParsed.properties.push(entityPropertyDescriptor);\n\t\t\t\tstate.statementResultToLineMap.set(entityPropertyDescriptor, lineIndex);\n\n\t\t\t\tbreak;\n\t\t\tcase StatementType.RELATIONSHIP:\n\n\t\t\t\tconst relationshipDescriptor = parseRelationshipStatement(line);\n\n\t\t\t\tstate.relationships.push(relationshipDescriptor);\n\t\t\t\tstate.entityBeingParsed = null;\n\t\t\t\tstate.statementResultToLineMap.set(relationshipDescriptor, lineIndex);\n\n\t\t\t\tbreak;\n\t\t\tcase StatementType.BLANK_LINE:\n\t\t\t\t// Ignore\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new ERDiagramSyntaxError(`Unknown statement type`);\n\t\t}\n\n\t}\n\n\tprivate handleLineError(error: Error, lineIndex: number): never {\n\n\t\tif (error instanceof ERDiagramError) {\n\t\t\tthrow new ERDiagramParseLineError(error, lineIndex);\n\t\t}\n\n\t\tthrow error;\n\n\t}\n\n\tprivate handleValidationError(error: Error, statementResultToLineMap: Map<ParsedStatementResult, number>): never {\n\n\t\tif (error instanceof ERDiagramParseLineError) {\n\t\t\tthrow error;\n\t\t}\n\n\t\tif (error instanceof ERDiagramEntityPropertyError) {\n\t\t\tthrow new ERDiagramParseLineError(error, statementResultToLineMap.get(error.property)!);\n\t\t}\n\n\t\tif (error instanceof ERDiagramEntityError) {\n\t\t\tthrow new ERDiagramParseLineError(error, statementResultToLineMap.get(error.entity)!);\n\t\t}\n\n\t\tif (error instanceof ERDiagramRelationshipError) {\n\t\t\tthrow new ERDiagramParseLineError(error, statementResultToLineMap.get(error.relationship)!);\n\t\t}\n\n\t\tthrow error;\n\n\t}\n\n}\n","import {\n\tEntityDescriptor,\n\tEntityPropertyDescriptor,\n\tEntityPropertyType,\n\tEntityRelationshipModel\n} from '@/erdiagram/parser/entity-relationship-model-types';\nimport {\n\tParsedEntityDescriptor,\n\tParsedEntityRelationshipModel\n} from '@/erdiagram/parser/parsed-entity-relationship-model-types';\n\nexport default class ParsedModelToPublicModelConverter {\n\n\tpublic convertParsedModelToPublicModel(parsedModel: ParsedEntityRelationshipModel): EntityRelationshipModel {\n\t\treturn {\n\t\t\tentities: parsedModel.entities.map(parsedEntity => this.convertParsedEntityToPublicEntity(parsedEntity)),\n\t\t\trelationships: parsedModel.relationships\n\t\t};\n\t}\n\n\tprivate convertParsedEntityToPublicEntity(parsedEntity: ParsedEntityDescriptor): EntityDescriptor {\n\n\t\tconst identifierProperty = this.getEntityIdentifierProperty(parsedEntity);\n\n\t\treturn {\n\t\t\tname: parsedEntity.name,\n\t\t\tidentifierPropertyName: identifierProperty?.name,\n\t\t\tproperties: parsedEntity.properties.filter(property => property != identifierProperty)\n\t\t};\n\n\t}\n\n\tprivate getEntityIdentifierProperty(parsedEntity: ParsedEntityDescriptor): EntityPropertyDescriptor | undefined {\n\t\treturn parsedEntity.properties.find(property => property.type === EntityPropertyType.IDENTIFIER);\n\t}\n\n}\n","import AbstractComponentConfigManager from '@/erdiagram/common/config/AbstractComponentConfigManager';\nimport EntityRelationshipModelParserConfig from '@/erdiagram/parser/config/EntityRelationshipModelParserConfig';\nimport EntityRelationshipModelParserSerializableConfig\n\tfrom '@/erdiagram/parser/config/EntityRelationshipModelParserSerializableConfig';\n\nexport class EntityRelationshipModelParserConfigManager\n\t\textends AbstractComponentConfigManager<EntityRelationshipModelParserConfig, Partial<EntityRelationshipModelParserConfig>, EntityRelationshipModelParserSerializableConfig> {\n\n\tgetDefaultConfig(): EntityRelationshipModelParserConfig {\n\t\treturn {\n\t\t\tallowUnknownEntities: false\n\t\t};\n\t}\n\n\tmergeConfigs(fullConfig: EntityRelationshipModelParserConfig, partialConfig?: Partial<EntityRelationshipModelParserConfig>): EntityRelationshipModelParserConfig {\n\t\treturn {\n\t\t\t...fullConfig,\n\t\t\t...partialConfig\n\t\t};\n\t}\n\n\tconvertToSerializableObject(fullConfig: EntityRelationshipModelParserConfig): EntityRelationshipModelParserSerializableConfig {\n\t\treturn {\n\t\t\t...fullConfig\n\t\t};\n\t}\n\n\tconvertFromSerializableObject(serializableConfig: EntityRelationshipModelParserSerializableConfig): EntityRelationshipModelParserConfig {\n\t\treturn {\n\t\t\t...serializableConfig\n\t\t};\n\t}\n\n}\n\nconst entityRelationshipModelParserConfigManager = new EntityRelationshipModelParserConfigManager();\nexport default entityRelationshipModelParserConfigManager;\n","import EntityRelationshipModelParserConfig from './EntityRelationshipModelParserConfig';\nimport EntityRelationshipModelParserSerializableConfig from './EntityRelationshipModelParserSerializableConfig';\nimport entityRelationshipModelParserConfigManager, {EntityRelationshipModelParserConfigManager} from './EntityRelationshipModelParserConfigManager';\n\nexport {\n\tEntityRelationshipModelParserConfig,\n\tEntityRelationshipModelParserSerializableConfig,\n\tEntityRelationshipModelParserConfigManager,\n\tentityRelationshipModelParserConfigManager\n};\n","export interface EntityRelationshipModel {\n\tentities: EntityDescriptor[];\n\trelationships: RelationshipDescriptor[];\n}\n\nexport interface EntityDescriptor {\n\tname: string;\n\tidentifierPropertyName?: string;\n\tproperties: EntityPropertyDescriptor[];\n}\n\nexport interface EntityPropertyDescriptor {\n\tname: string;\n\toptional: boolean;\n\tautoincremental: boolean;\n\tunique: boolean;\n\ttype: EntityPropertyType;\n\tlength: number[];\n}\n\nexport enum EntityPropertyType {\n\tIDENTIFIER = 'identifier',\n\tBOOLEAN = 'bool',\n\tSHORT = 'short',\n\tINT = 'int',\n\tLONG = 'long',\n\tDECIMAL = 'decimal',\n\tTEXT = 'text',\n\tDATE = 'date',\n\tTIME = 'time',\n\tDATETIME = 'datetime',\n\tBLOB = 'blob'\n}\n\nexport interface RelationshipDescriptor {\n\tleftMember: RelationshipMember;\n\trightMember: RelationshipMember;\n\tdirection: Direction;\n\trelationShipName?: string;\n}\n\nexport interface RelationshipMember {\n\tentity: string;\n\tentityAlias: string;\n\tcardinality: Cardinality;\n}\n\nexport enum Cardinality {\n\tMANY = 'many',\n\tONE = 'one',\n\tZERO_OR_ONE = 'zero_or_one'\n}\n\nexport enum Direction {\n\tLEFT_TO_RIGHT = 'left_to_right',\n\tRIGHT_TO_LEFT = 'right_to_left',\n\tBIDIRECTIONAL = 'bidirectional'\n}\n","import EntityRelationshipModelParser from './EntityRelationshipModelParser';\n\nexport * from './config/exports';\nexport * from './entity-relationship-model-types';\nexport * from './parse-errors';\n\nexport {\n\tEntityRelationshipModelParser\n};\n","import {RelationshipMember} from '@/erdiagram/parser/entity-relationship-model-types';\nimport {\n\tParsedEntityDescriptor,\n\tParsedEntityPropertyDescriptor,\n\tParsedRelationshipDescriptor\n} from '@/erdiagram/parser/parsed-entity-relationship-model-types';\n\nexport class ERDiagramError extends Error {\n\n}\n\nexport class ERDiagramParseLineError extends ERDiagramError {\n\n\tconstructor(\n\t\t\tprivate readonly cause: ERDiagramError,\n\t\t\tprivate readonly lineIndex: number\n\t) {\n\t\tsuper(cause.message);\n\t}\n\n\tget lineNumber() {\n\t\treturn this.lineIndex + 1;\n\t}\n\n}\n\nexport class ERDiagramSyntaxError extends ERDiagramError {\n\n}\n\nexport class ERDiagramUnknownTypeError extends ERDiagramError {\n\n}\n\nexport class ERDiagramRelationshipError extends ERDiagramError {\n\n\tconstructor(\n\t\t\tmessage: string,\n\t\t\tpublic readonly relationship: ParsedRelationshipDescriptor\n\t) {\n\t\tsuper(message);\n\t}\n\n}\n\nexport class ERDiagramUnknownEntityError extends ERDiagramRelationshipError {\n\n\tconstructor(\n\t\t\tmessage: string,\n\t\t\trelationship: ParsedRelationshipDescriptor,\n\t\t\tpublic readonly member: RelationshipMember\n\t) {\n\t\tsuper(message, relationship);\n\t}\n\n}\n\nexport class ERDiagramEntityError extends ERDiagramError {\n\n\tconstructor(\n\t\t\tmessage: string,\n\t\t\tpublic readonly entity: ParsedEntityDescriptor\n\t) {\n\t\tsuper(message);\n\t}\n\n}\n\nexport class ERDiagramDuplicatedEntityNameError extends ERDiagramEntityError {\n\n}\n\nexport class ERDiagramEntityPropertyError extends ERDiagramEntityError {\n\n\tconstructor(\n\t\t\tmessage: string,\n\t\t\tentity: ParsedEntityDescriptor,\n\t\t\tpublic readonly property: ParsedEntityPropertyDescriptor\n\t) {\n\t\tsuper(message, entity);\n\t}\n\n}\n\nexport class ERDiagramMultipleIdentifiersError extends ERDiagramEntityPropertyError {\n\n\tpublic readonly identifierProperties: ParsedEntityPropertyDescriptor[];\n\n\tconstructor(\n\t\t\tmessage: string,\n\t\t\tentity: ParsedEntityDescriptor,\n\t\t\tidentifierProperties: ParsedEntityPropertyDescriptor[]\n\t) {\n\t\tconst firstDuplicateApparition = identifierProperties[1];\n\t\tsuper(message, entity, firstDuplicateApparition);\n\t\tthis.identifierProperties = identifierProperties;\n\t}\n\n}\n\nexport class ERDiagramInvalidIdentifierDefinitionError extends ERDiagramEntityPropertyError {\n\n}\n\nexport class ERDiagramDuplicatedPropertyNameError extends ERDiagramEntityPropertyError {\n\n}\n","import {\n\tENTITY_NAME_LINE_REGEX,\n\tENTITY_PROPERTY_LINE_REGEX,\n\tRELATIONSHIP_LINE_REGEX\n} from '@/erdiagram/parser/statement/statement-types-regexes';\n\nexport enum StatementType {\n\tENTITY_NAME = 'entityName',\n\tENTITY_PROPERTY = 'entityProperty',\n\tRELATIONSHIP = 'relationship',\n\tBLANK_LINE = 'blankLine',\n\tUNKNOWN = 'unknown'\n}\n\nexport function guessStatementType(line: string): StatementType {\n\tif (ENTITY_NAME_LINE_REGEX.test(line)) {\n\t\treturn StatementType.ENTITY_NAME;\n\t} else if (ENTITY_PROPERTY_LINE_REGEX.test(line)) {\n\t\treturn StatementType.ENTITY_PROPERTY;\n\t} else if (RELATIONSHIP_LINE_REGEX.test(line)) {\n\t\treturn StatementType.RELATIONSHIP;\n\t} else if (isBlankLine(line)) {\n\t\treturn StatementType.BLANK_LINE;\n\t} else {\n\t\treturn StatementType.UNKNOWN;\n\t}\n}\n\nfunction isBlankLine(line: string) {\n\treturn /^\\s*(#.*)?$/.test(line);\n}\n","import {capitalizeWord, uncapitalizeWord} from '@/erdiagram/util/string-utils';\nimport {\n\tENTITY_NAME_LINE_REGEX,\n\tENTITY_PROPERTY_LINE_REGEX,\n\tRELATIONSHIP_LINE_REGEX\n} from '@/erdiagram/parser/statement/statement-types-regexes';\nimport {Cardinality, Direction, EntityPropertyType} from '@/erdiagram/parser/entity-relationship-model-types';\nimport {\n\tParsedEntityPropertyDescriptor,\n\tParsedRelationshipDescriptor\n} from '@/erdiagram/parser/parsed-entity-relationship-model-types';\nimport {ERDiagramSyntaxError, ERDiagramUnknownTypeError} from '@/erdiagram/parser/parse-errors';\n\nexport function parseEntityNameStatement(line: string): string {\n\n\tconst result = ENTITY_NAME_LINE_REGEX.exec(line);\n\n\tif (result == null) {\n\t\tthrow new ERDiagramSyntaxError('Syntax error');\n\t}\n\n\tconst [\n\t\tfullMatch,\n\t\tentityName\n\t] = result;\n\n\treturn capitalizeWord(entityName);\n\n}\n\nexport function parseEntityPropertyStatement(line: string): ParsedEntityPropertyDescriptor {\n\n\tconst result = ENTITY_PROPERTY_LINE_REGEX.exec(line);\n\n\tif (result == null) {\n\t\tthrow new ERDiagramSyntaxError('Syntax error');\n\t}\n\n\tconst [\n\t\tfullMatch,\n\t\tname,\n\t\tmodifiers,\n\t\ttype,\n\t\tlength\n\t] = result;\n\n\tconst mappedType = type.toLowerCase() as EntityPropertyType;\n\n\tif (!Object.values(EntityPropertyType).includes(mappedType)) {\n\t\tthrow new ERDiagramUnknownTypeError('Unknown type: ' + type);\n\t}\n\n\treturn {\n\t\tname: uncapitalizeWord(name),\n\t\toptional: modifiers.includes('?'),\n\t\tautoincremental: modifiers.includes('+'),\n\t\tunique: modifiers.includes('!'),\n\t\ttype: mappedType,\n\t\tlength: parsePropertyLength(length)\n\t};\n\n}\n\nfunction parsePropertyLength(length: string): number[] {\n\n\tif (!length) {\n\t\treturn [];\n\t}\n\n\treturn length.split(',')\n\t\t\t.map(lengthNumber => parseInt(lengthNumber.trim(), 10));\n\n}\n\nexport function parseRelationshipStatement(line: string): ParsedRelationshipDescriptor {\n\n\tconst result = RELATIONSHIP_LINE_REGEX.exec(line);\n\n\tif (result == null) {\n\t\tthrow new ERDiagramSyntaxError('Syntax error');\n\t}\n\n\tconst [\n\t\tfullMatch,\n\t\tleftEntity,\n\t\tleftEntityAlias = leftEntity,\n\t\tleftCardinalityCharacter,\n\t\tdirection,\n\t\trightCardinalityCharacter,\n\t\trightEntity,\n\t\trightEntityAlias = rightEntity,\n\t\trelationShipName\n\t] = result;\n\n\treturn {\n\t\trelationShipName: relationShipName ? capitalizeWord(relationShipName) : undefined,\n\t\tdirection: direction === '->' ? Direction.LEFT_TO_RIGHT : (direction === '<-' ? Direction.RIGHT_TO_LEFT : Direction.BIDIRECTIONAL),\n\t\tleftMember: {\n\t\t\tentity: capitalizeWord(leftEntity),\n\t\t\tentityAlias: uncapitalizeWord(leftEntityAlias),\n\t\t\tcardinality: parseRelationshipMemberCardinality(leftCardinalityCharacter)\n\t\t},\n\t\trightMember: {\n\t\t\tentity: capitalizeWord(rightEntity),\n\t\t\tentityAlias: uncapitalizeWord(rightEntityAlias),\n\t\t\tcardinality: parseRelationshipMemberCardinality(rightCardinalityCharacter)\n\t\t}\n\t};\n\n}\n\nfunction parseRelationshipMemberCardinality(leftCardinalityCharacter: string) {\n\tswitch (leftCardinalityCharacter) {\n\t\tcase '*':\n\t\t\treturn Cardinality.MANY;\n\t\tcase '?':\n\t\t\treturn Cardinality.ZERO_OR_ONE;\n\t\tdefault:\n\t\t\treturn Cardinality.ONE;\n\t}\n}\n","import {joinRegExps} from '@/erdiagram/util/regex-utils';\n\nconst IDENTIFIER_REGEX = /[a-zA-Z_][a-zA-Z_0-9]*/;\nconst OPTIONAL_TRAILING_SPACES_AND_COMMENT = /\\s*(#.*)?$/;\n\n// Entity name\n\nexport const ENTITY_NAME_LINE_REGEX = new RegExp(`^(${IDENTIFIER_REGEX.source})${OPTIONAL_TRAILING_SPACES_AND_COMMENT.source}`);\n\n// Entity property\n\nconst PROPERTY_NAME_REGEX = new RegExp(`(${IDENTIFIER_REGEX.source})`);\nconst PROPERTY_MODIFIERS_REGEX = new RegExp(`([?!+]*)`);\n\nconst PROPERTY_TYPE_NAME_REGEX = new RegExp(`(${IDENTIFIER_REGEX.source})`);\nconst PROPERTY_TYPE_LENGTH_REGEX = new RegExp(`(?:\\\\((\\\\s*\\\\d+\\\\s*(?:,\\\\s*\\\\d+\\\\s*)*)\\\\))?`);\n\nconst ENTITY_PROPERTY_REGEX = joinRegExps(PROPERTY_NAME_REGEX, PROPERTY_MODIFIERS_REGEX, /\\s+/, PROPERTY_TYPE_NAME_REGEX, PROPERTY_TYPE_LENGTH_REGEX);\n\nexport const ENTITY_PROPERTY_LINE_REGEX = new RegExp(`^\\\\s+${ENTITY_PROPERTY_REGEX.source}${OPTIONAL_TRAILING_SPACES_AND_COMMENT.source}`);\n\n// Relationship\n\nconst RELATIONSHIP_DIRECTION_REGEX = /(<-|->|<->)/;\nconst RELATIONSHIP_CARDINALITY_REGEX = /([?1*])?/;\nconst DIRECTION_AND_CARDINALITY_REGEX = joinRegExps(RELATIONSHIP_CARDINALITY_REGEX, RELATIONSHIP_DIRECTION_REGEX, RELATIONSHIP_CARDINALITY_REGEX);\n\nconst ENTITY_AND_ALIAS_REGEX = new RegExp(`(${IDENTIFIER_REGEX.source})(?:\\\\s+(${IDENTIFIER_REGEX.source}))?`);\n\nexport const RELATIONSHIP_LINE_REGEX = new RegExp(`^${ENTITY_AND_ALIAS_REGEX.source}\\\\s*?${DIRECTION_AND_CARDINALITY_REGEX.source}\\\\s*?${ENTITY_AND_ALIAS_REGEX.source}(?:\\\\s+\\\\(\\\\s*(${IDENTIFIER_REGEX.source})\\\\s*\\\\))?${OPTIONAL_TRAILING_SPACES_AND_COMMENT.source}`);\n","import {EntityPropertyType} from '@/erdiagram/parser/entity-relationship-model-types';\nimport {\n\tERDiagramDuplicatedEntityNameError,\n\tERDiagramDuplicatedPropertyNameError,\n\tERDiagramInvalidIdentifierDefinitionError,\n\tERDiagramMultipleIdentifiersError,\n\tERDiagramUnknownEntityError\n} from '@/erdiagram/parser/parse-errors';\nimport {ParsedEntityRelationshipModel} from '@/erdiagram/parser/parsed-entity-relationship-model-types';\n\nexport default class ParsedEntityRelationshipModelValidator {\n\n\tconstructor(\n\t\t\tprivate readonly allowUnknownEntities: boolean\n\t) {\n\n\t}\n\n\tpublic validateParsedModel(model: ParsedEntityRelationshipModel) {\n\n\t\tthis.validateNonRepeatedEntityNames(model);\n\t\tthis.validateNonRepeatedPropertyNames(model);\n\t\tthis.validateIdentifierProperties(model);\n\n\t\tif (!this.allowUnknownEntities) {\n\t\t\tthis.validateRelationshipsHaveNoUnknownEntities(model);\n\t\t}\n\n\t}\n\n\tprivate validateNonRepeatedEntityNames(model: ParsedEntityRelationshipModel) {\n\n\t\tconst entityNames = new Set<string>();\n\n\t\tmodel.entities.forEach(entity => {\n\n\t\t\tconst entityName = entity.name;\n\n\t\t\tif (entityNames.has(entityName)) {\n\t\t\t\tthrow new ERDiagramDuplicatedEntityNameError(\n\t\t\t\t\t\t`Repeated entity \"${entityName}\"`,\n\t\t\t\t\t\tentity\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tentityNames.add(entityName);\n\n\t\t});\n\n\t}\n\n\tprivate validateNonRepeatedPropertyNames(model: ParsedEntityRelationshipModel) {\n\n\t\tmodel.entities.forEach(entity => {\n\n\t\t\tconst entityPropertyNames = new Set<string>();\n\n\t\t\tentity.properties.forEach(property => {\n\n\t\t\t\tconst propertyName = property.name;\n\n\t\t\t\tif (entityPropertyNames.has(propertyName)) {\n\t\t\t\t\tthrow new ERDiagramDuplicatedPropertyNameError(\n\t\t\t\t\t\t\t`Repeated property \"${propertyName}\" in \"${entity.name}\" entity`,\n\t\t\t\t\t\t\tentity,\n\t\t\t\t\t\t\tproperty\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tentityPropertyNames.add(propertyName);\n\n\t\t\t});\n\n\t\t});\n\n\t}\n\n\tprivate validateIdentifierProperties(model: ParsedEntityRelationshipModel) {\n\n\t\tmodel.entities.forEach(entity => {\n\n\t\t\tconst identifierProperties = entity.properties.filter(property => property.type === EntityPropertyType.IDENTIFIER);\n\n\t\t\tif (identifierProperties.length > 1) {\n\t\t\t\tthrow new ERDiagramMultipleIdentifiersError(\n\t\t\t\t\t\t`Entity ${entity.name} has more than one identifier property`,\n\t\t\t\t\t\tentity,\n\t\t\t\t\t\tidentifierProperties\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst identifierProperty = identifierProperties[0];\n\n\t\t\tif (identifierProperty != null) {\n\n\t\t\t\tif (identifierProperty.autoincremental) {\n\t\t\t\t\tthrow new ERDiagramInvalidIdentifierDefinitionError(\n\t\t\t\t\t\t\t'Autoincremental modifier (+) cannot be used in identifier properties',\n\t\t\t\t\t\t\tentity,\n\t\t\t\t\t\t\tidentifierProperty\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (identifierProperty.optional) {\n\t\t\t\t\tthrow new ERDiagramInvalidIdentifierDefinitionError(\n\t\t\t\t\t\t\t'Optional modifier (?) cannot be used in identifier properties',\n\t\t\t\t\t\t\tentity,\n\t\t\t\t\t\t\tidentifierProperty\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (identifierProperty.unique) {\n\t\t\t\t\tthrow new ERDiagramInvalidIdentifierDefinitionError(\n\t\t\t\t\t\t\t'Unique modifier (!) cannot be used in identifier properties',\n\t\t\t\t\t\t\tentity,\n\t\t\t\t\t\t\tidentifierProperty\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (identifierProperty.length.length > 0) {\n\t\t\t\t\tthrow new ERDiagramInvalidIdentifierDefinitionError(\n\t\t\t\t\t\t\t'Identifier properties cannot have a length',\n\t\t\t\t\t\t\tentity,\n\t\t\t\t\t\t\tidentifierProperty\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t});\n\n\t}\n\n\tprivate validateRelationshipsHaveNoUnknownEntities(model: ParsedEntityRelationshipModel) {\n\n\t\tconst entityNames = model.entities.map(e => e.name);\n\n\t\tmodel.relationships.forEach(relationship => {\n\t\t\tif (!entityNames.includes(relationship.leftMember.entity)) {\n\t\t\t\tthrow new ERDiagramUnknownEntityError(\n\t\t\t\t\t\t`Uknown entity \"${relationship.leftMember.entity}\" in relationship's left member`,\n\t\t\t\t\t\trelationship,\n\t\t\t\t\t\trelationship.leftMember\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (!entityNames.includes(relationship.rightMember.entity)) {\n\t\t\t\tthrow new ERDiagramUnknownEntityError(\n\t\t\t\t\t\t`Uknown entity \"${relationship.rightMember.entity}\" in relationship's right member`,\n\t\t\t\t\t\trelationship,\n\t\t\t\t\t\trelationship.rightMember\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\n\t}\n\n}\n","export function removeDuplicates<T>(array: T[]): T[] {\n\treturn [...new Set<T>(array)];\n}\n","const DEFAULT_INDENT = '    ';\n\nexport function indentLines(lines: string[], indent?: string | number) {\n\treturn lines.map(line => indentLine(line, indent));\n}\n\nexport function indentLine(line: string, indent: string | number = DEFAULT_INDENT) {\n\tif (line.trim().length === 0) {\n\t\treturn line;\n\t} else {\n\t\treturn generateIndentText(indent) + line;\n\t}\n}\n\nfunction generateIndentText(indent: string | number): string {\n\n\tif (typeof indent !== 'number') {\n\t\treturn indent;\n\t}\n\n\treturn ''.padEnd(indent, ' ');\n\n}\n","export function classifyBy<T, K, V>(objects: T[], keyMapper: (object: T) => K, valueMapper: (object: T) => V): Map<K, V> {\n\n\tconst map = new Map<K, V>();\n\n\tobjects.forEach(object => {\n\n\t\tconst key = keyMapper(object);\n\t\tconst value = valueMapper(object);\n\n\t\tmap.set(key, value);\n\n\t});\n\n\treturn map;\n\n}\n","export function mapValues<T, U>(record: Record<string, T>, mapper: (value: T) => U): Record<string, U> {\n\treturn Object.fromEntries(Object.entries(record).map(([key, value]) => [key, mapper(value)]));\n}\n\nexport function findKeyFromValue<T>(record: Record<string, T>, value: T): string | undefined {\n\tconst entry = Object.entries(record).find(entry => value === entry[1]);\n\treturn entry?.[0];\n}\n\nexport function findValueFromNullableKey<T>(record: Record<string, T>, key: string | undefined): T | undefined\nexport function findValueFromNullableKey<T>(record: Record<string, T>, key: string | undefined, defaultValue: T): T\nexport function findValueFromNullableKey<T>(record: Record<string, T>, key: string | undefined, defaultValue?: T): T | undefined {\n\treturn key == null ? defaultValue : record[key];\n}\n","export function escapeRegExpSpecialChars(text: string): string {\n\treturn text.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}\n\nexport function joinRegExps(...regexes: (RegExp | string)[]): RegExp {\n\n\tconst source = regexes\n\t\t\t.map((e): string => {\n\t\t\t\tif (typeof e === 'string') {\n\t\t\t\t\treturn escapeRegExpSpecialChars(e);\n\t\t\t\t} else {\n\t\t\t\t\treturn e.source;\n\t\t\t\t}\n\t\t\t})\n\t\t\t.join('');\n\n\treturn new RegExp(source);\n\n}\n","export function capitalizeWord(text: string) {\n\treturn text[0].toUpperCase() + text.substring(1);\n}\n\nexport function uncapitalizeWord(text: string) {\n\treturn text[0].toLowerCase() + text.substring(1);\n}\n","export * from './erdiagram/exports';\n"],"sourceRoot":""}